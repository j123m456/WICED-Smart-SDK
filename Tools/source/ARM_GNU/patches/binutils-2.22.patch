From 869112a5b287020afe85fc7c14a0a1f64fe37071 Mon Sep 17 00:00:00 2001
From: Evan Hunter <ehunter@broadcom.com>
Date: Tue, 23 Jul 2013 16:13:32 +1000
Subject: [PATCH] Working overflow

---
 binutils/Makefile.in |   26 +-
 binutils/dwarf.c     |    4 +
 gas/Makefile.in      |    2 +-
 include/opcode/arm.h |    3 +-
 ld/Makefile.in       |   21 +-
 ld/ldgram.c          | 3508 +++++++++++++++++++++++++++++---------------------
 ld/ldgram.h          |  212 +--
 ld/ldgram.y          |   20 +-
 ld/ldlang.c          |  488 ++++++-
 ld/ldlang.h          |   15 +-
 ld/ldlex.c           | 2202 +++++++++++++++----------------
 ld/ldlex.l           |    1 +
 ld/mri.c             |    2 +-
 13 files changed, 3807 insertions(+), 2697 deletions(-)

diff --git a/binutils/Makefile.in b/binutils/Makefile.in
index 9f10781..74ae7d4 100644
--- a/binutils/Makefile.in
+++ b/binutils/Makefile.in
@@ -1422,19 +1422,19 @@ install-exec-local: install-binPROGRAMS $(bin_PROGRAMS) $(noinst_PROGRAMS)
 	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p$(EXEEXT) $(DESTDIR)$(bindir)/`echo $$p|sed -e 's/-new//' -e 's/cxxfilt/$(DEMANGLER_NAME)/'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
 	  else :; fi; \
 	done
-	$(mkinstalldirs) $(DESTDIR)$(tooldir)/bin
-	for i in $(TOOL_PROGS); do \
-	  if [ -f $$i$(EXEEXT) ]; then \
-	    j=`echo $$i | sed -e 's/-new//'`; \
-	    k=`echo $$j | sed '$(transform)'`; \
-	    if [ "$(bindir)/$$k" != "$(tooldir)/bin/$$j" ]; then \
-	      rm -f $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT); \
-	      ln $(DESTDIR)$(bindir)/$$k$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT) >/dev/null 2>/dev/null \
-		|| $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$i$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT); \
-	    fi; \
-	  else true; \
-	  fi; \
-	done
+#	$(mkinstalldirs) $(DESTDIR)$(tooldir)/bin
+#	for i in $(TOOL_PROGS); do \
+#	  if [ -f $$i$(EXEEXT) ]; then \
+#	    j=`echo $$i | sed -e 's/-new//'`; \
+#	    k=`echo $$j | sed '$(transform)'`; \
+#	    if [ "$(bindir)/$$k" != "$(tooldir)/bin/$$j" ]; then \
+#	      rm -f $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT); \
+#	      ln $(DESTDIR)$(bindir)/$$k$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT) >/dev/null 2>/dev/null \
+#		|| $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$i$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$$j$(EXEEXT); \
+#	    fi; \
+#	  else true; \
+#	  fi; \
+#	done
 
 # Tell versions [3.59,3.63) of GNU make to not export all variables.
 # Otherwise a system limit (for SysV at least) may be exceeded.
diff --git a/binutils/dwarf.c b/binutils/dwarf.c
index 1ee0e33..4624463 100644
--- a/binutils/dwarf.c
+++ b/binutils/dwarf.c
@@ -5758,6 +5758,10 @@ dwarf_select_sections_by_names (const char *names)
     }
 }
 
+#if defined (__MINGW32__)
+extern char *optarg;
+#endif
+
 void
 dwarf_select_sections_by_letters (const char *letters)
 {
diff --git a/gas/Makefile.in b/gas/Makefile.in
index ddd42d7..92e67e4 100644
--- a/gas/Makefile.in
+++ b/gas/Makefile.in
@@ -2477,7 +2477,7 @@ cgen.@OBJEXT@: cgen.c cgen.h cgen-desc.h subsegs.h \
 .PHONY: install-exec-local install-data-local
 .PHONY: install-exec-bindir install-exec-tooldir
 
-install-exec-local: install-exec-bindir @install_tooldir@
+install-exec-local: install-exec-bindir
 
 install-exec-bindir: $(noinst_PROGRAMS)
 	$(mkinstalldirs) $(DESTDIR)$(bindir)
diff --git a/include/opcode/arm.h b/include/opcode/arm.h
index 86e3d67..5950b4f 100644
--- a/include/opcode/arm.h
+++ b/include/opcode/arm.h
@@ -109,7 +109,8 @@
 #define ARM_AEXT_V6KT2  (ARM_AEXT_V6T2 | ARM_EXT_V6K)
 #define ARM_AEXT_V6ZT2  (ARM_AEXT_V6T2 | ARM_EXT_SEC)
 #define ARM_AEXT_V6ZKT2 (ARM_AEXT_V6T2 | ARM_EXT_V6K | ARM_EXT_SEC)
-#define ARM_AEXT_V7_ARM	(ARM_AEXT_V6KT2 | ARM_EXT_V7 | ARM_EXT_BARRIER)
+#define ARM_AEXT_V7_ARM	(ARM_AEXT_V6KT2 | ARM_EXT_V7 | ARM_EXT_BARRIER \
+   | ARM_EXT_OS)
 #define ARM_AEXT_V7A	(ARM_AEXT_V7_ARM | ARM_EXT_V7A)
 #define ARM_AEXT_V7R	(ARM_AEXT_V7_ARM | ARM_EXT_V7R | ARM_EXT_DIV)
 #define ARM_AEXT_NOTM \
diff --git a/ld/Makefile.in b/ld/Makefile.in
index f062b92..66e6e3c 100644
--- a/ld/Makefile.in
+++ b/ld/Makefile.in
@@ -1863,7 +1863,7 @@ info: info-recursive
 
 info-am: $(INFO_DEPS)
 
-install-data-am: install-data-local install-info-am install-man
+install-data-am: install-info-am install-man
 
 install-dvi: install-dvi-recursive
 
@@ -1879,7 +1879,7 @@ install-dvi-am: $(DVIS)
 	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(dvidir)'"; \
 	  $(INSTALL_DATA) $$files "$(DESTDIR)$(dvidir)" || exit $$?; \
 	done
-install-exec-am: install-binPROGRAMS install-exec-local
+install-exec-am: install-exec-local
 
 install-html: install-html-recursive
 
@@ -3546,24 +3546,11 @@ mostlyclean-local:
 
 .PHONY: install-exec-local install-data-local
 
-install-exec-local: ld-new$(EXEEXT) install-binPROGRAMS
-	$(mkinstalldirs) $(DESTDIR)$(tooldir)/bin
-	n=`echo $(installed_linker) | sed '$(transform)'`; \
-	if test "$(bindir)" != "$(tooldir)/bin"; then \
-	  rm -f $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT); \
-	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT) >/dev/null 2>/dev/null \
-	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT); \
-	fi; \
+install-exec-local: ld-new$(EXEEXT)
 	if test "x$(install_as_default)" = "xyes"; then \
 	  ld=`echo ld | sed '$(transform)'`; \
 	  rm -f $(DESTDIR)$(bindir)/$$ld$(EXEEXT); \
-	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(bindir)/$$ld$(EXEEXT) >/dev/null 2>/dev/null \
-	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(bindir)/$$ld$(EXEEXT); \
-	  if test "$(bindir)" != "$(tooldir)/bin"; then \
-	    rm -f $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
-	    ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT) >/dev/null 2>/dev/null \
-	    || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
-	  fi; \
+	  $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(bindir)/$$ld$(EXEEXT); \
 	fi
 
 install-data-local:
diff --git a/ld/ldgram.c b/ld/ldgram.c
index 2b34c63..ec15cd4 100644
--- a/ld/ldgram.c
+++ b/ld/ldgram.c
@@ -1,24 +1,22 @@
-/* A Bison parser, made by GNU Bison 2.3.  */
+/* A Bison parser, made by GNU Bison 2.4.2.  */
 
 /* Skeleton implementation for Bison's Yacc-like parsers in C
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
-   Free Software Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
+   
+      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
+   Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-
+   
    You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 51 Franklin Street, Fifth Floor,
-   Boston, MA 02110-1301, USA.  */
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -29,7 +27,7 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-
+   
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
@@ -47,7 +45,7 @@
 #define YYBISON 1
 
 /* Bison version.  */
-#define YYBISON_VERSION "2.3"
+#define YYBISON_VERSION "2.4.2"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
@@ -55,11 +53,85 @@
 /* Pure parsers.  */
 #define YYPURE 0
 
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
 /* Using locations.  */
 #define YYLSP_NEEDED 0
 
 
 
+/* Copy the first part of user declarations.  */
+
+/* Line 189 of yacc.c  */
+#line 24 "ldgram.y"
+
+/*
+
+ */
+
+#define DONTDECLARE_MALLOC
+
+#include "sysdep.h"
+#include "bfd.h"
+#include "bfdlink.h"
+#include "ld.h"
+#include "ldexp.h"
+#include "ldver.h"
+#include "ldlang.h"
+#include "ldfile.h"
+#include "ldemul.h"
+#include "ldmisc.h"
+#include "ldmain.h"
+#include "mri.h"
+#include "ldctor.h"
+#include "ldlex.h"
+
+#define YYDEBUG 1
+#define YYERROR_VERBOSE 1
+
+#ifndef YYDEBUG
+#define YYDEBUG 1
+#endif
+
+static enum section_type sectype;
+static lang_memory_region_type *region;
+
+bfd_boolean ldgram_had_keep = FALSE;
+char *ldgram_vers_current_lang = NULL;
+
+#define ERROR_NAME_MAX 20
+static char *error_names[ERROR_NAME_MAX];
+static int error_index;
+#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
+#define POP_ERROR()   error_index--;
+
+
+/* Line 189 of yacc.c  */
+#line 115 "ldgram.c"
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Enabling the token table.  */
+#ifndef YYTOKEN_TABLE
+# define YYTOKEN_TABLE 0
+#endif
+
+
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -149,47 +221,48 @@
      CONSTRUCTORS = 338,
      ALIGNMOD = 339,
      AT = 340,
-     SUBALIGN = 341,
-     PROVIDE = 342,
-     PROVIDE_HIDDEN = 343,
-     AS_NEEDED = 344,
-     CHIP = 345,
-     LIST = 346,
-     SECT = 347,
-     ABSOLUTE = 348,
-     LOAD = 349,
-     NEWLINE = 350,
-     ENDWORD = 351,
-     ORDER = 352,
-     NAMEWORD = 353,
-     ASSERT_K = 354,
-     FORMAT = 355,
-     PUBLIC = 356,
-     DEFSYMEND = 357,
-     BASE = 358,
-     ALIAS = 359,
-     TRUNCATE = 360,
-     REL = 361,
-     INPUT_SCRIPT = 362,
-     INPUT_MRI_SCRIPT = 363,
-     INPUT_DEFSYM = 364,
-     CASE = 365,
-     EXTERN = 366,
-     START = 367,
-     VERS_TAG = 368,
-     VERS_IDENTIFIER = 369,
-     GLOBAL = 370,
-     LOCAL = 371,
-     VERSIONK = 372,
-     INPUT_VERSION_SCRIPT = 373,
-     KEEP = 374,
-     ONLY_IF_RO = 375,
-     ONLY_IF_RW = 376,
-     SPECIAL = 377,
-     INPUT_SECTION_FLAGS = 378,
-     EXCLUDE_FILE = 379,
-     CONSTANT = 380,
-     INPUT_DYNAMIC_LIST = 381
+     OVERFLOW_INTO = 341,
+     SUBALIGN = 342,
+     PROVIDE = 343,
+     PROVIDE_HIDDEN = 344,
+     AS_NEEDED = 345,
+     CHIP = 346,
+     LIST = 347,
+     SECT = 348,
+     ABSOLUTE = 349,
+     LOAD = 350,
+     NEWLINE = 351,
+     ENDWORD = 352,
+     ORDER = 353,
+     NAMEWORD = 354,
+     ASSERT_K = 355,
+     FORMAT = 356,
+     PUBLIC = 357,
+     DEFSYMEND = 358,
+     BASE = 359,
+     ALIAS = 360,
+     TRUNCATE = 361,
+     REL = 362,
+     INPUT_SCRIPT = 363,
+     INPUT_MRI_SCRIPT = 364,
+     INPUT_DEFSYM = 365,
+     CASE = 366,
+     EXTERN = 367,
+     START = 368,
+     VERS_TAG = 369,
+     VERS_IDENTIFIER = 370,
+     GLOBAL = 371,
+     LOCAL = 372,
+     VERSIONK = 373,
+     INPUT_VERSION_SCRIPT = 374,
+     KEEP = 375,
+     ONLY_IF_RO = 376,
+     ONLY_IF_RW = 377,
+     SPECIAL = 378,
+     INPUT_SECTION_FLAGS = 379,
+     EXCLUDE_FILE = 380,
+     CONSTANT = 381,
+     INPUT_DYNAMIC_LIST = 382
    };
 #endif
 /* Tokens.  */
@@ -276,114 +349,59 @@
 #define CONSTRUCTORS 338
 #define ALIGNMOD 339
 #define AT 340
-#define SUBALIGN 341
-#define PROVIDE 342
-#define PROVIDE_HIDDEN 343
-#define AS_NEEDED 344
-#define CHIP 345
-#define LIST 346
-#define SECT 347
-#define ABSOLUTE 348
-#define LOAD 349
-#define NEWLINE 350
-#define ENDWORD 351
-#define ORDER 352
-#define NAMEWORD 353
-#define ASSERT_K 354
-#define FORMAT 355
-#define PUBLIC 356
-#define DEFSYMEND 357
-#define BASE 358
-#define ALIAS 359
-#define TRUNCATE 360
-#define REL 361
-#define INPUT_SCRIPT 362
-#define INPUT_MRI_SCRIPT 363
-#define INPUT_DEFSYM 364
-#define CASE 365
-#define EXTERN 366
-#define START 367
-#define VERS_TAG 368
-#define VERS_IDENTIFIER 369
-#define GLOBAL 370
-#define LOCAL 371
-#define VERSIONK 372
-#define INPUT_VERSION_SCRIPT 373
-#define KEEP 374
-#define ONLY_IF_RO 375
-#define ONLY_IF_RW 376
-#define SPECIAL 377
-#define INPUT_SECTION_FLAGS 378
-#define EXCLUDE_FILE 379
-#define CONSTANT 380
-#define INPUT_DYNAMIC_LIST 381
-
-
-
-
-/* Copy the first part of user declarations.  */
-#line 24 "ldgram.y"
-
-/*
-
- */
-
-#define DONTDECLARE_MALLOC
-
-#include "sysdep.h"
-#include "bfd.h"
-#include "bfdlink.h"
-#include "ld.h"
-#include "ldexp.h"
-#include "ldver.h"
-#include "ldlang.h"
-#include "ldfile.h"
-#include "ldemul.h"
-#include "ldmisc.h"
-#include "ldmain.h"
-#include "mri.h"
-#include "ldctor.h"
-#include "ldlex.h"
-
-#ifndef YYDEBUG
-#define YYDEBUG 1
-#endif
-
-static enum section_type sectype;
-static lang_memory_region_type *region;
-
-bfd_boolean ldgram_had_keep = FALSE;
-char *ldgram_vers_current_lang = NULL;
-
-#define ERROR_NAME_MAX 20
-static char *error_names[ERROR_NAME_MAX];
-static int error_index;
-#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
-#define POP_ERROR()   error_index--;
+#define OVERFLOW_INTO 341
+#define SUBALIGN 342
+#define PROVIDE 343
+#define PROVIDE_HIDDEN 344
+#define AS_NEEDED 345
+#define CHIP 346
+#define LIST 347
+#define SECT 348
+#define ABSOLUTE 349
+#define LOAD 350
+#define NEWLINE 351
+#define ENDWORD 352
+#define ORDER 353
+#define NAMEWORD 354
+#define ASSERT_K 355
+#define FORMAT 356
+#define PUBLIC 357
+#define DEFSYMEND 358
+#define BASE 359
+#define ALIAS 360
+#define TRUNCATE 361
+#define REL 362
+#define INPUT_SCRIPT 363
+#define INPUT_MRI_SCRIPT 364
+#define INPUT_DEFSYM 365
+#define CASE 366
+#define EXTERN 367
+#define START 368
+#define VERS_TAG 369
+#define VERS_IDENTIFIER 370
+#define GLOBAL 371
+#define LOCAL 372
+#define VERSIONK 373
+#define INPUT_VERSION_SCRIPT 374
+#define KEEP 375
+#define ONLY_IF_RO 376
+#define ONLY_IF_RW 377
+#define SPECIAL 378
+#define INPUT_SECTION_FLAGS 379
+#define EXCLUDE_FILE 380
+#define CONSTANT 381
+#define INPUT_DYNAMIC_LIST 382
 
 
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 0
-#endif
 
-/* Enabling the token table.  */
-#ifndef YYTOKEN_TABLE
-# define YYTOKEN_TABLE 0
-#endif
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 62 "ldgram.y"
 {
+
+/* Line 214 of yacc.c  */
+#line 65 "ldgram.y"
+
   bfd_vma integer;
   struct big_int
     {
@@ -412,22 +430,23 @@ typedef union YYSTYPE
   struct bfd_elf_version_deps *deflist;
   struct bfd_elf_version_expr *versyms;
   struct bfd_elf_version_tree *versnode;
-}
-/* Line 193 of yacc.c.  */
-#line 418 "ldgram.c"
-	YYSTYPE;
+
+
+
+/* Line 214 of yacc.c  */
+#line 438 "ldgram.c"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
-# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 
-
 /* Copy the second part of user declarations.  */
 
 
-/* Line 216 of yacc.c.  */
-#line 431 "ldgram.c"
+/* Line 264 of yacc.c  */
+#line 450 "ldgram.c"
 
 #ifdef short
 # undef short
@@ -502,14 +521,14 @@ typedef short int yytype_int16;
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static int
-YYID (int i)
+YYID (int yyi)
 #else
 static int
-YYID (i)
-    int i;
+YYID (yyi)
+    int yyi;
 #endif
 {
-  return i;
+  return yyi;
 }
 #endif
 
@@ -590,9 +609,9 @@ void free (void *); /* INFRINGES ON USER NAME SPACE */
 /* A type that is properly aligned for any stack member.  */
 union yyalloc
 {
-  yytype_int16 yyss;
-  YYSTYPE yyvs;
-  };
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
 
 /* The size of the maximum gap between one aligned stack and the next.  */
 # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
@@ -626,12 +645,12 @@ union yyalloc
    elements in the stack, and YYPTR gives the new location of the
    stack.  Advance YYPTR to a properly aligned location for the next
    stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
     do									\
       {									\
 	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
 	yyptr += yynewbytes / sizeof (*yyptr);				\
       }									\
@@ -642,20 +661,20 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  17
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   1887
+#define YYLAST   1835
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  150
+#define YYNTOKENS  151
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  128
+#define YYNNTS  129
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  364
+#define YYNRULES  366
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  787
+#define YYNSTATES  792
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
-#define YYMAXUTOK   381
+#define YYMAXUTOK   382
 
 #define YYTRANSLATE(YYX)						\
   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
@@ -666,16 +685,16 @@ static const yytype_uint8 yytranslate[] =
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   148,     2,     2,     2,    34,    21,     2,
-      37,   145,    32,    30,   143,    31,     2,    33,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,    16,   144,
+       2,     2,     2,   149,     2,     2,     2,    34,    21,     2,
+      37,   146,    32,    30,   144,    31,     2,    33,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    16,   145,
       24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   146,     2,   147,    20,     2,     2,     2,     2,     2,
+       2,   147,     2,   148,    20,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,    57,    19,    58,   149,     2,     2,     2,
+       2,     2,     2,    57,    19,    58,   150,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -701,7 +720,7 @@ static const yytype_uint8 yytranslate[] =
      111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142
+     141,   142,   143
 };
 
 #if YYDEBUG
@@ -735,191 +754,192 @@ static const yytype_uint16 yyprhs[] =
      774,   778,   782,   786,   790,   794,   798,   804,   808,   812,
      817,   819,   821,   826,   831,   836,   841,   846,   851,   856,
      863,   870,   877,   882,   889,   894,   896,   903,   910,   917,
-     922,   927,   931,   932,   937,   938,   943,   944,   949,   950,
-     952,   954,   956,   957,   958,   959,   960,   961,   962,   982,
-     983,   984,   985,   986,   987,  1006,  1007,  1008,  1016,  1017,
-    1023,  1025,  1027,  1029,  1031,  1033,  1037,  1038,  1041,  1045,
-    1048,  1055,  1066,  1069,  1071,  1072,  1074,  1077,  1078,  1079,
-    1083,  1084,  1085,  1086,  1087,  1099,  1104,  1105,  1108,  1109,
-    1110,  1117,  1119,  1120,  1124,  1130,  1131,  1135,  1136,  1139,
-    1141,  1144,  1149,  1152,  1153,  1156,  1157,  1163,  1165,  1168,
-    1173,  1179,  1186,  1188,  1191,  1192,  1195,  1200,  1205,  1214,
-    1216,  1218,  1222,  1226,  1227,  1237,  1238,  1246,  1248,  1252,
-    1254,  1258,  1260,  1264,  1265
+     922,   927,   931,   932,   936,   937,   942,   943,   948,   949,
+     954,   955,   957,   959,   961,   962,   963,   964,   965,   966,
+     967,   988,   989,   990,   991,   992,   993,  1013,  1014,  1015,
+    1023,  1024,  1030,  1032,  1034,  1036,  1038,  1040,  1044,  1045,
+    1048,  1052,  1055,  1062,  1073,  1076,  1078,  1079,  1081,  1084,
+    1085,  1086,  1090,  1091,  1092,  1093,  1094,  1106,  1111,  1112,
+    1115,  1116,  1117,  1124,  1126,  1127,  1131,  1137,  1138,  1142,
+    1143,  1146,  1148,  1151,  1156,  1159,  1160,  1163,  1164,  1170,
+    1172,  1175,  1180,  1186,  1193,  1195,  1198,  1199,  1202,  1207,
+    1212,  1221,  1223,  1225,  1229,  1233,  1234,  1244,  1245,  1253,
+    1255,  1259,  1261,  1265,  1267,  1271,  1272
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int16 yyrhs[] =
 {
-     151,     0,    -1,   123,   167,    -1,   124,   155,    -1,   134,
-     266,    -1,   142,   261,    -1,   125,   153,    -1,     4,    -1,
-      -1,   154,     4,     6,   222,    -1,    -1,   156,   157,    -1,
-     157,   158,   111,    -1,    -1,   106,   222,    -1,   106,   222,
-     143,   222,    -1,     4,    -1,   107,    -1,   113,   160,    -1,
-     112,    -1,   117,     4,     6,   222,    -1,   117,     4,   143,
-     222,    -1,   117,     4,   222,    -1,   116,     4,    -1,   108,
-       4,   143,   222,    -1,   108,     4,   222,    -1,   108,     4,
-       6,   222,    -1,    38,     4,     6,   222,    -1,    38,     4,
-     143,   222,    -1,   100,     4,     6,   222,    -1,   100,     4,
-     143,   222,    -1,   109,   162,    -1,   110,   161,    -1,   114,
-       4,    -1,   120,     4,   143,     4,    -1,   120,     4,   143,
-       3,    -1,   119,   222,    -1,   121,     3,    -1,   126,   163,
-      -1,   127,   164,    -1,    -1,    65,   152,   159,   157,    36,
-      -1,   128,     4,    -1,    -1,   160,   143,     4,    -1,   160,
-       4,    -1,    -1,     4,    -1,   161,   143,     4,    -1,     4,
-      -1,   162,   143,     4,    -1,    -1,     4,    -1,   163,   143,
-       4,    -1,    -1,   165,   166,    -1,     4,    -1,   166,     4,
-      -1,   166,   143,     4,    -1,    -1,   168,   169,    -1,   169,
-     170,    -1,    -1,   202,    -1,   177,    -1,   253,    -1,   213,
-      -1,   214,    -1,   216,    -1,   218,    -1,   179,    -1,   268,
-      -1,   144,    -1,    75,    37,     4,   145,    -1,    76,    37,
-     152,   145,    -1,    98,    37,   152,   145,    -1,    60,    37,
-       4,   145,    -1,    60,    37,     4,   143,     4,   143,     4,
-     145,    -1,    62,    37,     4,   145,    -1,    61,    -1,    63,
-      -1,    96,    37,   173,   145,    -1,    -1,    97,   171,    37,
-     173,   145,    -1,    77,    37,   152,   145,    -1,    -1,    65,
-     152,   172,   169,    36,    -1,    91,    37,   219,   145,    -1,
-     127,    37,   164,   145,    -1,    48,    49,     4,    -1,    48,
-      50,     4,    -1,    67,    37,     4,   143,     4,   145,    -1,
-      68,    37,     4,   145,    -1,     4,    -1,   173,   143,     4,
-      -1,   173,     4,    -1,     5,    -1,   173,   143,     5,    -1,
-     173,     5,    -1,    -1,   105,    37,   174,   173,   145,    -1,
-      -1,   173,   143,   105,    37,   175,   173,   145,    -1,    -1,
-     173,   105,    37,   176,   173,   145,    -1,    46,    57,   178,
-      58,    -1,   178,   228,    -1,   178,   179,    -1,    -1,    78,
-      37,     4,   145,    -1,   200,   199,    -1,    -1,   115,   180,
-      37,   222,   143,     4,   145,    -1,     4,    -1,    32,    -1,
-      15,    -1,   181,    -1,   140,    37,   185,   145,   181,    -1,
-      54,    37,   181,   145,    -1,    55,    37,   181,   145,    -1,
-      54,    37,    55,    37,   181,   145,   145,    -1,    54,    37,
-      54,    37,   181,   145,   145,    -1,    55,    37,    54,    37,
-     181,   145,   145,    -1,    55,    37,    55,    37,   181,   145,
-     145,    -1,    54,    37,   140,    37,   185,   145,   181,   145,
-      -1,    56,    37,   181,   145,    -1,     4,    -1,   183,    21,
-       4,    -1,   139,    37,   183,   145,    -1,   185,   181,    -1,
-     181,    -1,   186,   201,   182,    -1,   182,    -1,     4,    -1,
-     184,     4,    -1,   146,   186,   147,    -1,   184,   146,   186,
-     147,    -1,   182,    37,   186,   145,    -1,   184,   182,    37,
-     186,   145,    -1,   187,    -1,    -1,   135,    37,   189,   187,
-     145,    -1,   200,   199,    -1,    95,    -1,   144,    -1,    99,
-      -1,    54,    37,    99,   145,    -1,   188,    -1,   195,    37,
-     220,   145,    -1,    93,    37,   196,   145,    -1,    -1,   115,
-     191,    37,   222,   143,     4,   145,   199,    -1,    -1,    65,
-     152,   192,   194,    36,    -1,   193,   190,    -1,   190,    -1,
-      -1,   193,    -1,    41,    -1,    42,    -1,    43,    -1,    44,
-      -1,    45,    -1,   220,    -1,     6,   196,    -1,    -1,    14,
+     152,     0,    -1,   124,   168,    -1,   125,   156,    -1,   135,
+     268,    -1,   143,   263,    -1,   126,   154,    -1,     4,    -1,
+      -1,   155,     4,     6,   223,    -1,    -1,   157,   158,    -1,
+     158,   159,   112,    -1,    -1,   107,   223,    -1,   107,   223,
+     144,   223,    -1,     4,    -1,   108,    -1,   114,   161,    -1,
+     113,    -1,   118,     4,     6,   223,    -1,   118,     4,   144,
+     223,    -1,   118,     4,   223,    -1,   117,     4,    -1,   109,
+       4,   144,   223,    -1,   109,     4,   223,    -1,   109,     4,
+       6,   223,    -1,    38,     4,     6,   223,    -1,    38,     4,
+     144,   223,    -1,   100,     4,     6,   223,    -1,   100,     4,
+     144,   223,    -1,   110,   163,    -1,   111,   162,    -1,   115,
+       4,    -1,   121,     4,   144,     4,    -1,   121,     4,   144,
+       3,    -1,   120,   223,    -1,   122,     3,    -1,   127,   164,
+      -1,   128,   165,    -1,    -1,    65,   153,   160,   158,    36,
+      -1,   129,     4,    -1,    -1,   161,   144,     4,    -1,   161,
+       4,    -1,    -1,     4,    -1,   162,   144,     4,    -1,     4,
+      -1,   163,   144,     4,    -1,    -1,     4,    -1,   164,   144,
+       4,    -1,    -1,   166,   167,    -1,     4,    -1,   167,     4,
+      -1,   167,   144,     4,    -1,    -1,   169,   170,    -1,   170,
+     171,    -1,    -1,   203,    -1,   178,    -1,   255,    -1,   214,
+      -1,   215,    -1,   217,    -1,   219,    -1,   180,    -1,   270,
+      -1,   145,    -1,    75,    37,     4,   146,    -1,    76,    37,
+     153,   146,    -1,    98,    37,   153,   146,    -1,    60,    37,
+       4,   146,    -1,    60,    37,     4,   144,     4,   144,     4,
+     146,    -1,    62,    37,     4,   146,    -1,    61,    -1,    63,
+      -1,    96,    37,   174,   146,    -1,    -1,    97,   172,    37,
+     174,   146,    -1,    77,    37,   153,   146,    -1,    -1,    65,
+     153,   173,   170,    36,    -1,    91,    37,   220,   146,    -1,
+     128,    37,   165,   146,    -1,    48,    49,     4,    -1,    48,
+      50,     4,    -1,    67,    37,     4,   144,     4,   146,    -1,
+      68,    37,     4,   146,    -1,     4,    -1,   174,   144,     4,
+      -1,   174,     4,    -1,     5,    -1,   174,   144,     5,    -1,
+     174,     5,    -1,    -1,   106,    37,   175,   174,   146,    -1,
+      -1,   174,   144,   106,    37,   176,   174,   146,    -1,    -1,
+     174,   106,    37,   177,   174,   146,    -1,    46,    57,   179,
+      58,    -1,   179,   230,    -1,   179,   180,    -1,    -1,    78,
+      37,     4,   146,    -1,   201,   200,    -1,    -1,   116,   181,
+      37,   223,   144,     4,   146,    -1,     4,    -1,    32,    -1,
+      15,    -1,   182,    -1,   141,    37,   186,   146,   182,    -1,
+      54,    37,   182,   146,    -1,    55,    37,   182,   146,    -1,
+      54,    37,    55,    37,   182,   146,   146,    -1,    54,    37,
+      54,    37,   182,   146,   146,    -1,    55,    37,    54,    37,
+     182,   146,   146,    -1,    55,    37,    55,    37,   182,   146,
+     146,    -1,    54,    37,   141,    37,   186,   146,   182,   146,
+      -1,    56,    37,   182,   146,    -1,     4,    -1,   184,    21,
+       4,    -1,   140,    37,   184,   146,    -1,   186,   182,    -1,
+     182,    -1,   187,   202,   183,    -1,   183,    -1,     4,    -1,
+     185,     4,    -1,   147,   187,   148,    -1,   185,   147,   187,
+     148,    -1,   183,    37,   187,   146,    -1,   185,   183,    37,
+     187,   146,    -1,   188,    -1,    -1,   136,    37,   190,   188,
+     146,    -1,   201,   200,    -1,    95,    -1,   145,    -1,    99,
+      -1,    54,    37,    99,   146,    -1,   189,    -1,   196,    37,
+     221,   146,    -1,    93,    37,   197,   146,    -1,    -1,   116,
+     192,    37,   223,   144,     4,   146,   200,    -1,    -1,    65,
+     153,   193,   195,    36,    -1,   194,   191,    -1,   191,    -1,
+      -1,   194,    -1,    41,    -1,    42,    -1,    43,    -1,    44,
+      -1,    45,    -1,   221,    -1,     6,   197,    -1,    -1,    14,
       -1,    13,    -1,    12,    -1,    11,    -1,    10,    -1,     9,
-      -1,     8,    -1,     7,    -1,   144,    -1,   143,    -1,     4,
-       6,   220,    -1,     4,   198,   220,    -1,   103,    37,     4,
-       6,   220,   145,    -1,   104,    37,     4,     6,   220,   145,
-      -1,   143,    -1,    -1,    66,    57,   203,    58,    -1,   204,
-      -1,    -1,   204,   201,   205,    -1,   205,    -1,    -1,     4,
-     206,   210,    16,   208,   201,   209,    -1,    -1,    65,   152,
-     207,   203,    36,    -1,    92,     6,   220,    -1,    94,     6,
-     220,    -1,    -1,    37,   211,   145,    -1,   212,    -1,   211,
-     212,    -1,     4,    -1,   148,     4,    -1,    86,    37,   152,
-     145,    -1,    87,    37,   215,   145,    -1,    87,    37,   145,
-      -1,   215,   201,   152,    -1,   152,    -1,    88,    37,   217,
-     145,    -1,   217,   201,   152,    -1,    -1,    89,    -1,    90,
-      -1,    -1,     4,   219,    -1,     4,   143,   219,    -1,    -1,
-     221,   222,    -1,    31,   222,    -1,    37,   222,   145,    -1,
-      79,    37,   222,   145,    -1,   148,   222,    -1,    30,   222,
-      -1,   149,   222,    -1,   222,    32,   222,    -1,   222,    33,
-     222,    -1,   222,    34,   222,    -1,   222,    30,   222,    -1,
-     222,    31,   222,    -1,   222,    29,   222,    -1,   222,    28,
-     222,    -1,   222,    23,   222,    -1,   222,    22,   222,    -1,
-     222,    27,   222,    -1,   222,    26,   222,    -1,   222,    24,
-     222,    -1,   222,    25,   222,    -1,   222,    21,   222,    -1,
-     222,    20,   222,    -1,   222,    19,   222,    -1,   222,    15,
-     222,    16,   222,    -1,   222,    18,   222,    -1,   222,    17,
-     222,    -1,    74,    37,     4,   145,    -1,     3,    -1,    59,
-      -1,    81,    37,     4,   145,    -1,    80,    37,     4,   145,
-      -1,    82,    37,     4,   145,    -1,    83,    37,     4,   145,
-      -1,   141,    37,     4,   145,    -1,   109,    37,   222,   145,
-      -1,    38,    37,   222,   145,    -1,    38,    37,   222,   143,
-     222,   145,    -1,    51,    37,   222,   143,   222,   145,    -1,
-      52,    37,   222,   143,   222,   145,    -1,    53,    37,   222,
-     145,    -1,    64,    37,     4,   143,   222,   145,    -1,    39,
-      37,   222,   145,    -1,     4,    -1,    84,    37,   222,   143,
-     222,   145,    -1,    85,    37,   222,   143,   222,   145,    -1,
-     115,    37,   222,   143,     4,   145,    -1,    92,    37,     4,
-     145,    -1,    94,    37,     4,   145,    -1,   101,    25,     4,
-      -1,    -1,   101,    37,   222,   145,    -1,    -1,    38,    37,
-     222,   145,    -1,    -1,   102,    37,   222,   145,    -1,    -1,
-     136,    -1,   137,    -1,   138,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,     4,   229,   244,   224,   225,   226,   230,   227,
-      57,   231,   194,    58,   232,   247,   223,   248,   197,   233,
-     201,    -1,    -1,    -1,    -1,    -1,    -1,    73,   234,   245,
-     246,   224,   226,   235,    57,   236,   249,    58,   237,   247,
-     223,   248,   197,   238,   201,    -1,    -1,    -1,    97,   239,
-     244,   240,    57,   178,    58,    -1,    -1,    65,   152,   241,
-     178,    36,    -1,    69,    -1,    70,    -1,    71,    -1,    72,
-      -1,    73,    -1,    37,   242,   145,    -1,    -1,    37,   145,
-      -1,   222,   243,    16,    -1,   243,    16,    -1,    40,    37,
-     222,   145,   243,    16,    -1,    40,    37,   222,   145,    39,
-      37,   222,   145,   243,    16,    -1,   222,    16,    -1,    16,
-      -1,    -1,    91,    -1,    25,     4,    -1,    -1,    -1,   248,
-      16,     4,    -1,    -1,    -1,    -1,    -1,   249,     4,   250,
-      57,   194,    58,   251,   248,   197,   252,   201,    -1,    47,
-      57,   254,    58,    -1,    -1,   254,   255,    -1,    -1,    -1,
-       4,   256,   258,   259,   257,   144,    -1,   222,    -1,    -1,
-       4,   260,   259,    -1,   101,    37,   222,   145,   259,    -1,
-      -1,    37,   222,   145,    -1,    -1,   262,   263,    -1,   264,
-      -1,   263,   264,    -1,    57,   265,    58,   144,    -1,   274,
-     144,    -1,    -1,   267,   270,    -1,    -1,   269,   133,    57,
-     270,    58,    -1,   271,    -1,   270,   271,    -1,    57,   273,
-      58,   144,    -1,   129,    57,   273,    58,   144,    -1,   129,
-      57,   273,    58,   272,   144,    -1,   129,    -1,   272,   129,
-      -1,    -1,   274,   144,    -1,   131,    16,   274,   144,    -1,
-     132,    16,   274,   144,    -1,   131,    16,   274,   144,   132,
-      16,   274,   144,    -1,   130,    -1,     4,    -1,   274,   144,
-     130,    -1,   274,   144,     4,    -1,    -1,   274,   144,   127,
-       4,    57,   275,   274,   277,    58,    -1,    -1,   127,     4,
-      57,   276,   274,   277,    58,    -1,   131,    -1,   274,   144,
-     131,    -1,   132,    -1,   274,   144,   132,    -1,   127,    -1,
-     274,   144,   127,    -1,    -1,   144,    -1
+      -1,     8,    -1,     7,    -1,   145,    -1,   144,    -1,     4,
+       6,   221,    -1,     4,   199,   221,    -1,   104,    37,     4,
+       6,   221,   146,    -1,   105,    37,     4,     6,   221,   146,
+      -1,   144,    -1,    -1,    66,    57,   204,    58,    -1,   205,
+      -1,    -1,   205,   202,   206,    -1,   206,    -1,    -1,     4,
+     207,   211,    16,   209,   202,   210,    -1,    -1,    65,   153,
+     208,   204,    36,    -1,    92,     6,   221,    -1,    94,     6,
+     221,    -1,    -1,    37,   212,   146,    -1,   213,    -1,   212,
+     213,    -1,     4,    -1,   149,     4,    -1,    86,    37,   153,
+     146,    -1,    87,    37,   216,   146,    -1,    87,    37,   146,
+      -1,   216,   202,   153,    -1,   153,    -1,    88,    37,   218,
+     146,    -1,   218,   202,   153,    -1,    -1,    89,    -1,    90,
+      -1,    -1,     4,   220,    -1,     4,   144,   220,    -1,    -1,
+     222,   223,    -1,    31,   223,    -1,    37,   223,   146,    -1,
+      79,    37,   223,   146,    -1,   149,   223,    -1,    30,   223,
+      -1,   150,   223,    -1,   223,    32,   223,    -1,   223,    33,
+     223,    -1,   223,    34,   223,    -1,   223,    30,   223,    -1,
+     223,    31,   223,    -1,   223,    29,   223,    -1,   223,    28,
+     223,    -1,   223,    23,   223,    -1,   223,    22,   223,    -1,
+     223,    27,   223,    -1,   223,    26,   223,    -1,   223,    24,
+     223,    -1,   223,    25,   223,    -1,   223,    21,   223,    -1,
+     223,    20,   223,    -1,   223,    19,   223,    -1,   223,    15,
+     223,    16,   223,    -1,   223,    18,   223,    -1,   223,    17,
+     223,    -1,    74,    37,     4,   146,    -1,     3,    -1,    59,
+      -1,    81,    37,     4,   146,    -1,    80,    37,     4,   146,
+      -1,    82,    37,     4,   146,    -1,    83,    37,     4,   146,
+      -1,   142,    37,     4,   146,    -1,   110,    37,   223,   146,
+      -1,    38,    37,   223,   146,    -1,    38,    37,   223,   144,
+     223,   146,    -1,    51,    37,   223,   144,   223,   146,    -1,
+      52,    37,   223,   144,   223,   146,    -1,    53,    37,   223,
+     146,    -1,    64,    37,     4,   144,   223,   146,    -1,    39,
+      37,   223,   146,    -1,     4,    -1,    84,    37,   223,   144,
+     223,   146,    -1,    85,    37,   223,   144,   223,   146,    -1,
+     116,    37,   223,   144,     4,   146,    -1,    92,    37,     4,
+     146,    -1,    94,    37,     4,   146,    -1,   101,    25,     4,
+      -1,    -1,   102,    25,     4,    -1,    -1,   101,    37,   223,
+     146,    -1,    -1,    38,    37,   223,   146,    -1,    -1,   103,
+      37,   223,   146,    -1,    -1,   137,    -1,   138,    -1,   139,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,   231,   246,
+     226,   227,   228,   232,   229,    57,   233,   195,    58,   234,
+     249,   224,   250,   198,   225,   235,   202,    -1,    -1,    -1,
+      -1,    -1,    -1,    73,   236,   247,   248,   226,   228,   237,
+      57,   238,   251,    58,   239,   249,   224,   250,   198,   225,
+     240,   202,    -1,    -1,    -1,    97,   241,   246,   242,    57,
+     179,    58,    -1,    -1,    65,   153,   243,   179,    36,    -1,
+      69,    -1,    70,    -1,    71,    -1,    72,    -1,    73,    -1,
+      37,   244,   146,    -1,    -1,    37,   146,    -1,   223,   245,
+      16,    -1,   245,    16,    -1,    40,    37,   223,   146,   245,
+      16,    -1,    40,    37,   223,   146,    39,    37,   223,   146,
+     245,    16,    -1,   223,    16,    -1,    16,    -1,    -1,    91,
+      -1,    25,     4,    -1,    -1,    -1,   250,    16,     4,    -1,
+      -1,    -1,    -1,    -1,   251,     4,   252,    57,   195,    58,
+     253,   250,   198,   254,   202,    -1,    47,    57,   256,    58,
+      -1,    -1,   256,   257,    -1,    -1,    -1,     4,   258,   260,
+     261,   259,   145,    -1,   223,    -1,    -1,     4,   262,   261,
+      -1,   101,    37,   223,   146,   261,    -1,    -1,    37,   223,
+     146,    -1,    -1,   264,   265,    -1,   266,    -1,   265,   266,
+      -1,    57,   267,    58,   145,    -1,   276,   145,    -1,    -1,
+     269,   272,    -1,    -1,   271,   134,    57,   272,    58,    -1,
+     273,    -1,   272,   273,    -1,    57,   275,    58,   145,    -1,
+     130,    57,   275,    58,   145,    -1,   130,    57,   275,    58,
+     274,   145,    -1,   130,    -1,   274,   130,    -1,    -1,   276,
+     145,    -1,   132,    16,   276,   145,    -1,   133,    16,   276,
+     145,    -1,   132,    16,   276,   145,   133,    16,   276,   145,
+      -1,   131,    -1,     4,    -1,   276,   145,   131,    -1,   276,
+     145,     4,    -1,    -1,   276,   145,   128,     4,    57,   277,
+     276,   279,    58,    -1,    -1,   128,     4,    57,   278,   276,
+     279,    58,    -1,   132,    -1,   276,   145,   132,    -1,   133,
+      -1,   276,   145,   133,    -1,   128,    -1,   276,   145,   128,
+      -1,    -1,   145,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   168,   168,   169,   170,   171,   172,   176,   180,   180,
-     190,   190,   203,   204,   208,   209,   210,   213,   216,   217,
-     218,   220,   222,   224,   226,   228,   230,   232,   234,   236,
-     238,   240,   241,   242,   244,   246,   248,   250,   252,   253,
-     255,   254,   258,   260,   264,   265,   266,   270,   272,   276,
-     278,   283,   284,   285,   290,   290,   295,   297,   299,   304,
-     304,   310,   311,   316,   317,   318,   319,   320,   321,   322,
-     323,   324,   325,   326,   328,   330,   332,   335,   337,   339,
-     341,   343,   345,   344,   348,   351,   350,   354,   358,   359,
-     361,   363,   365,   370,   373,   376,   379,   382,   385,   389,
-     388,   393,   392,   397,   396,   403,   407,   408,   409,   413,
-     415,   416,   416,   424,   428,   432,   439,   446,   453,   460,
-     467,   474,   481,   488,   495,   502,   511,   529,   550,   563,
-     572,   583,   592,   603,   612,   621,   625,   634,   638,   646,
-     648,   647,   654,   655,   659,   660,   665,   670,   671,   676,
-     680,   680,   684,   683,   690,   691,   694,   696,   700,   702,
-     704,   706,   708,   713,   720,   722,   726,   728,   730,   732,
-     734,   736,   738,   740,   745,   745,   750,   754,   762,   766,
-     774,   774,   778,   781,   781,   784,   785,   790,   789,   795,
-     794,   801,   809,   817,   818,   822,   823,   827,   829,   834,
-     839,   840,   845,   847,   853,   855,   857,   861,   863,   869,
-     872,   881,   892,   892,   898,   900,   902,   904,   906,   908,
-     911,   913,   915,   917,   919,   921,   923,   925,   927,   929,
-     931,   933,   935,   937,   939,   941,   943,   945,   947,   949,
-     951,   953,   956,   958,   960,   962,   964,   966,   968,   970,
-     972,   974,   976,   978,   987,   989,   991,   993,   995,   997,
-     999,  1005,  1006,  1010,  1011,  1015,  1016,  1020,  1021,  1025,
-    1026,  1027,  1028,  1031,  1035,  1038,  1044,  1046,  1031,  1053,
-    1055,  1057,  1062,  1064,  1052,  1074,  1076,  1074,  1082,  1081,
-    1088,  1089,  1090,  1091,  1092,  1096,  1097,  1098,  1102,  1103,
-    1108,  1109,  1114,  1115,  1120,  1121,  1126,  1128,  1133,  1136,
-    1149,  1153,  1158,  1160,  1151,  1168,  1171,  1173,  1177,  1178,
-    1177,  1187,  1232,  1235,  1247,  1256,  1259,  1266,  1266,  1278,
-    1279,  1283,  1287,  1296,  1296,  1310,  1310,  1320,  1321,  1325,
-    1329,  1333,  1340,  1344,  1352,  1355,  1359,  1363,  1367,  1374,
-    1378,  1382,  1386,  1391,  1390,  1404,  1403,  1413,  1417,  1421,
-    1425,  1429,  1433,  1439,  1441
+       0,   172,   172,   173,   174,   175,   176,   180,   184,   184,
+     194,   194,   207,   208,   212,   213,   214,   217,   220,   221,
+     222,   224,   226,   228,   230,   232,   234,   236,   238,   240,
+     242,   244,   245,   246,   248,   250,   252,   254,   256,   257,
+     259,   258,   262,   264,   268,   269,   270,   274,   276,   280,
+     282,   287,   288,   289,   294,   294,   299,   301,   303,   308,
+     308,   314,   315,   320,   321,   322,   323,   324,   325,   326,
+     327,   328,   329,   330,   332,   334,   336,   339,   341,   343,
+     345,   347,   349,   348,   352,   355,   354,   358,   362,   363,
+     365,   367,   369,   374,   377,   380,   383,   386,   389,   393,
+     392,   397,   396,   401,   400,   407,   411,   412,   413,   417,
+     419,   420,   420,   428,   432,   436,   443,   450,   457,   464,
+     471,   478,   485,   492,   499,   506,   515,   533,   554,   567,
+     576,   587,   596,   607,   616,   625,   629,   638,   642,   650,
+     652,   651,   658,   659,   663,   664,   669,   674,   675,   680,
+     684,   684,   688,   687,   694,   695,   698,   700,   704,   706,
+     708,   710,   712,   717,   724,   726,   730,   732,   734,   736,
+     738,   740,   742,   744,   749,   749,   754,   758,   766,   770,
+     778,   778,   782,   785,   785,   788,   789,   794,   793,   799,
+     798,   805,   813,   821,   822,   826,   827,   831,   833,   838,
+     843,   844,   849,   851,   857,   859,   861,   865,   867,   873,
+     876,   885,   896,   896,   902,   904,   906,   908,   910,   912,
+     915,   917,   919,   921,   923,   925,   927,   929,   931,   933,
+     935,   937,   939,   941,   943,   945,   947,   949,   951,   953,
+     955,   957,   960,   962,   964,   966,   968,   970,   972,   974,
+     976,   978,   980,   982,   991,   993,   995,   997,   999,  1001,
+    1003,  1009,  1010,  1014,  1015,  1020,  1021,  1025,  1026,  1030,
+    1031,  1035,  1036,  1037,  1038,  1041,  1045,  1048,  1054,  1056,
+    1041,  1063,  1065,  1067,  1072,  1074,  1062,  1084,  1086,  1084,
+    1092,  1091,  1098,  1099,  1100,  1101,  1102,  1106,  1107,  1108,
+    1112,  1113,  1118,  1119,  1124,  1125,  1130,  1131,  1136,  1138,
+    1143,  1146,  1159,  1163,  1168,  1170,  1161,  1178,  1181,  1183,
+    1187,  1188,  1187,  1197,  1242,  1245,  1257,  1266,  1269,  1276,
+    1276,  1288,  1289,  1293,  1297,  1306,  1306,  1320,  1320,  1330,
+    1331,  1335,  1339,  1343,  1350,  1354,  1362,  1365,  1369,  1373,
+    1377,  1384,  1388,  1392,  1396,  1401,  1400,  1414,  1413,  1423,
+    1427,  1431,  1435,  1439,  1443,  1449,  1451
 };
 #endif
 
@@ -944,39 +964,41 @@ static const char *const yytname[] =
   "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT",
   "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH",
   "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS",
-  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "PROVIDE_HIDDEN", "AS_NEEDED",
-  "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD",
-  "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", "PUBLIC", "DEFSYMEND", "BASE",
-  "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", "INPUT_MRI_SCRIPT",
-  "INPUT_DEFSYM", "CASE", "EXTERN", "START", "VERS_TAG", "VERS_IDENTIFIER",
-  "GLOBAL", "LOCAL", "VERSIONK", "INPUT_VERSION_SCRIPT", "KEEP",
-  "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL", "INPUT_SECTION_FLAGS",
-  "EXCLUDE_FILE", "CONSTANT", "INPUT_DYNAMIC_LIST", "','", "';'", "')'",
-  "'['", "']'", "'!'", "'~'", "$accept", "file", "filename", "defsym_expr",
-  "@1", "mri_script_file", "@2", "mri_script_lines", "mri_script_command",
-  "@3", "ordernamelist", "mri_load_name_list", "mri_abs_name_list",
-  "casesymlist", "extern_name_list", "@4", "extern_name_list_body",
-  "script_file", "@5", "ifile_list", "ifile_p1", "@6", "@7", "input_list",
-  "@8", "@9", "@10", "sections", "sec_or_group_p1", "statement_anywhere",
-  "@11", "wildcard_name", "wildcard_spec", "sect_flag_list", "sect_flags",
+  "ALIGNMOD", "AT", "OVERFLOW_INTO", "SUBALIGN", "PROVIDE",
+  "PROVIDE_HIDDEN", "AS_NEEDED", "CHIP", "LIST", "SECT", "ABSOLUTE",
+  "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT",
+  "PUBLIC", "DEFSYMEND", "BASE", "ALIAS", "TRUNCATE", "REL",
+  "INPUT_SCRIPT", "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN",
+  "START", "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK",
+  "INPUT_VERSION_SCRIPT", "KEEP", "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL",
+  "INPUT_SECTION_FLAGS", "EXCLUDE_FILE", "CONSTANT", "INPUT_DYNAMIC_LIST",
+  "','", "';'", "')'", "'['", "']'", "'!'", "'~'", "$accept", "file",
+  "filename", "defsym_expr", "$@1", "mri_script_file", "$@2",
+  "mri_script_lines", "mri_script_command", "$@3", "ordernamelist",
+  "mri_load_name_list", "mri_abs_name_list", "casesymlist",
+  "extern_name_list", "$@4", "extern_name_list_body", "script_file", "$@5",
+  "ifile_list", "ifile_p1", "$@6", "$@7", "input_list", "@8", "@9", "@10",
+  "sections", "sec_or_group_p1", "statement_anywhere", "$@11",
+  "wildcard_name", "wildcard_spec", "sect_flag_list", "sect_flags",
   "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep",
-  "input_section_spec", "@12", "statement", "@13", "@14", "statement_list",
-  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op",
-  "end", "assignment", "opt_comma", "memory", "memory_spec_list_opt",
-  "memory_spec_list", "memory_spec", "@15", "@16", "origin_spec",
-  "length_spec", "attributes_opt", "attributes_list", "attributes_string",
-  "startup", "high_level_library", "high_level_library_NAME_list",
-  "low_level_library", "low_level_library_NAME_list",
-  "floating_point_support", "nocrossref_list", "mustbe_exp", "@17", "exp",
-  "memspec_at_opt", "opt_at", "opt_align", "opt_subalign",
-  "sect_constraint", "section", "@18", "@19", "@20", "@21", "@22", "@23",
-  "@24", "@25", "@26", "@27", "@28", "@29", "@30", "type", "atype",
-  "opt_exp_with_type", "opt_exp_without_type", "opt_nocrossrefs",
-  "memspec_opt", "phdr_opt", "overlay_section", "@31", "@32", "@33",
-  "phdrs", "phdr_list", "phdr", "@34", "@35", "phdr_type",
-  "phdr_qualifiers", "phdr_val", "dynamic_list_file", "@36",
+  "input_section_spec", "$@12", "statement", "$@13", "$@14",
+  "statement_list", "statement_list_opt", "length", "fill_exp", "fill_opt",
+  "assign_op", "end", "assignment", "opt_comma", "memory",
+  "memory_spec_list_opt", "memory_spec_list", "memory_spec", "$@15",
+  "$@16", "origin_spec", "length_spec", "attributes_opt",
+  "attributes_list", "attributes_string", "startup", "high_level_library",
+  "high_level_library_NAME_list", "low_level_library",
+  "low_level_library_NAME_list", "floating_point_support",
+  "nocrossref_list", "mustbe_exp", "$@17", "exp", "memspec_at_opt",
+  "memspec_ovfl_opt", "opt_at", "opt_align", "opt_subalign",
+  "sect_constraint", "section", "$@18", "$@19", "$@20", "$@21", "$@22",
+  "$@23", "$@24", "$@25", "$@26", "$@27", "$@28", "$@29", "$@30", "type",
+  "atype", "opt_exp_with_type", "opt_exp_without_type", "opt_nocrossrefs",
+  "memspec_opt", "phdr_opt", "overlay_section", "$@31", "$@32", "$@33",
+  "phdrs", "phdr_list", "phdr", "$@34", "$@35", "phdr_type",
+  "phdr_qualifiers", "phdr_val", "dynamic_list_file", "$@36",
   "dynamic_list_nodes", "dynamic_list_node", "dynamic_list_tag",
-  "version_script_file", "@37", "version", "@38", "vers_nodes",
+  "version_script_file", "$@37", "version", "$@38", "vers_nodes",
   "vers_node", "verdep", "vers_tag", "vers_defns", "@39", "@40",
   "opt_semicolon", 0
 };
@@ -1001,50 +1023,51 @@ static const yytype_uint16 yytoknum[] =
      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
-     379,   380,   381,    44,    59,    41,    91,    93,    33,   126
+     379,   380,   381,   382,    44,    59,    41,    91,    93,    33,
+     126
 };
 # endif
 
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint16 yyr1[] =
 {
-       0,   150,   151,   151,   151,   151,   151,   152,   154,   153,
-     156,   155,   157,   157,   158,   158,   158,   158,   158,   158,
-     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
-     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
-     159,   158,   158,   158,   160,   160,   160,   161,   161,   162,
-     162,   163,   163,   163,   165,   164,   166,   166,   166,   168,
-     167,   169,   169,   170,   170,   170,   170,   170,   170,   170,
-     170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
-     170,   170,   171,   170,   170,   172,   170,   170,   170,   170,
-     170,   170,   170,   173,   173,   173,   173,   173,   173,   174,
-     173,   175,   173,   176,   173,   177,   178,   178,   178,   179,
-     179,   180,   179,   181,   181,   181,   182,   182,   182,   182,
-     182,   182,   182,   182,   182,   182,   183,   183,   184,   185,
-     185,   186,   186,   187,   187,   187,   187,   187,   187,   188,
-     189,   188,   190,   190,   190,   190,   190,   190,   190,   190,
-     191,   190,   192,   190,   193,   193,   194,   194,   195,   195,
-     195,   195,   195,   196,   197,   197,   198,   198,   198,   198,
-     198,   198,   198,   198,   199,   199,   200,   200,   200,   200,
-     201,   201,   202,   203,   203,   204,   204,   206,   205,   207,
-     205,   208,   209,   210,   210,   211,   211,   212,   212,   213,
-     214,   214,   215,   215,   216,   217,   217,   218,   218,   219,
-     219,   219,   221,   220,   222,   222,   222,   222,   222,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,   223,   223,   224,   224,   225,   225,   226,   226,   227,
-     227,   227,   227,   229,   230,   231,   232,   233,   228,   234,
-     235,   236,   237,   238,   228,   239,   240,   228,   241,   228,
-     242,   242,   242,   242,   242,   243,   243,   243,   244,   244,
-     244,   244,   245,   245,   246,   246,   247,   247,   248,   248,
-     249,   250,   251,   252,   249,   253,   254,   254,   256,   257,
-     255,   258,   259,   259,   259,   260,   260,   262,   261,   263,
-     263,   264,   265,   267,   266,   269,   268,   270,   270,   271,
-     271,   271,   272,   272,   273,   273,   273,   273,   273,   274,
-     274,   274,   274,   275,   274,   276,   274,   274,   274,   274,
-     274,   274,   274,   277,   277
+       0,   151,   152,   152,   152,   152,   152,   153,   155,   154,
+     157,   156,   158,   158,   159,   159,   159,   159,   159,   159,
+     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
+     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
+     160,   159,   159,   159,   161,   161,   161,   162,   162,   163,
+     163,   164,   164,   164,   166,   165,   167,   167,   167,   169,
+     168,   170,   170,   171,   171,   171,   171,   171,   171,   171,
+     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
+     171,   171,   172,   171,   171,   173,   171,   171,   171,   171,
+     171,   171,   171,   174,   174,   174,   174,   174,   174,   175,
+     174,   176,   174,   177,   174,   178,   179,   179,   179,   180,
+     180,   181,   180,   182,   182,   182,   183,   183,   183,   183,
+     183,   183,   183,   183,   183,   183,   184,   184,   185,   186,
+     186,   187,   187,   188,   188,   188,   188,   188,   188,   189,
+     190,   189,   191,   191,   191,   191,   191,   191,   191,   191,
+     192,   191,   193,   191,   194,   194,   195,   195,   196,   196,
+     196,   196,   196,   197,   198,   198,   199,   199,   199,   199,
+     199,   199,   199,   199,   200,   200,   201,   201,   201,   201,
+     202,   202,   203,   204,   204,   205,   205,   207,   206,   208,
+     206,   209,   210,   211,   211,   212,   212,   213,   213,   214,
+     215,   215,   216,   216,   217,   218,   218,   219,   219,   220,
+     220,   220,   222,   221,   223,   223,   223,   223,   223,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,   224,   224,   225,   225,   226,   226,   227,   227,   228,
+     228,   229,   229,   229,   229,   231,   232,   233,   234,   235,
+     230,   236,   237,   238,   239,   240,   230,   241,   242,   230,
+     243,   230,   244,   244,   244,   244,   244,   245,   245,   245,
+     246,   246,   246,   246,   247,   247,   248,   248,   249,   249,
+     250,   250,   251,   252,   253,   254,   251,   255,   256,   256,
+     258,   259,   257,   260,   261,   261,   261,   262,   262,   264,
+     263,   265,   265,   266,   267,   269,   268,   271,   270,   272,
+     272,   273,   273,   273,   274,   274,   275,   275,   275,   275,
+     275,   276,   276,   276,   276,   277,   276,   278,   276,   276,
+     276,   276,   276,   276,   276,   279,   279
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
@@ -1076,17 +1099,17 @@ static const yytype_uint8 yyr2[] =
        3,     3,     3,     3,     3,     3,     5,     3,     3,     4,
        1,     1,     4,     4,     4,     4,     4,     4,     4,     6,
        6,     6,     4,     6,     4,     1,     6,     6,     6,     4,
-       4,     3,     0,     4,     0,     4,     0,     4,     0,     1,
-       1,     1,     0,     0,     0,     0,     0,     0,    19,     0,
-       0,     0,     0,     0,    18,     0,     0,     7,     0,     5,
-       1,     1,     1,     1,     1,     3,     0,     2,     3,     2,
-       6,    10,     2,     1,     0,     1,     2,     0,     0,     3,
-       0,     0,     0,     0,    11,     4,     0,     2,     0,     0,
-       6,     1,     0,     3,     5,     0,     3,     0,     2,     1,
-       2,     4,     2,     0,     2,     0,     5,     1,     2,     4,
-       5,     6,     1,     2,     0,     2,     4,     4,     8,     1,
-       1,     3,     3,     0,     9,     0,     7,     1,     3,     1,
-       3,     1,     3,     0,     1
+       4,     3,     0,     3,     0,     4,     0,     4,     0,     4,
+       0,     1,     1,     1,     0,     0,     0,     0,     0,     0,
+      20,     0,     0,     0,     0,     0,    19,     0,     0,     7,
+       0,     5,     1,     1,     1,     1,     1,     3,     0,     2,
+       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
+       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
+       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
+       2,     1,     2,     4,     2,     0,     2,     0,     5,     1,
+       2,     4,     5,     6,     1,     2,     0,     2,     4,     4,
+       8,     1,     1,     3,     3,     0,     9,     0,     7,     1,
+       3,     1,     3,     1,     3,     0,     1
 };
 
 /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
@@ -1094,18 +1117,18 @@ static const yytype_uint8 yyr2[] =
    means the default is an error.  */
 static const yytype_uint16 yydefact[] =
 {
-       0,    59,    10,     8,   333,   327,     0,     2,    62,     3,
+       0,    59,    10,     8,   335,   329,     0,     2,    62,     3,
       13,     6,     0,     4,     0,     5,     0,     1,    60,    11,
-       0,   344,     0,   334,   337,     0,   328,   329,     0,     0,
+       0,   346,     0,   336,   339,     0,   330,   331,     0,     0,
        0,     0,     0,    79,     0,    80,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,   207,   208,     0,
        0,    82,     0,     0,     0,   111,     0,    72,    61,    64,
       70,     0,    63,    66,    67,    68,    69,    65,    71,     0,
       16,     0,     0,     0,     0,    17,     0,     0,     0,    19,
       46,     0,     0,     0,     0,     0,     0,    51,    54,     0,
-       0,     0,   350,   361,   349,   357,   359,     0,     0,   344,
-     338,   357,   359,     0,     0,   330,   212,   173,   172,   171,
-     170,   169,   168,   167,   166,   212,   108,   316,     0,     0,
+       0,     0,   352,   363,   351,   359,   361,     0,     0,   346,
+     340,   359,   361,     0,     0,   332,   212,   173,   172,   171,
+     170,   169,   168,   167,   166,   212,   108,   318,     0,     0,
        0,     0,     7,    85,   184,     0,     0,     0,     0,     0,
        0,     0,     0,   206,   209,     0,     0,     0,     0,     0,
        0,    54,   175,   174,   110,     0,     0,    40,     0,   240,
@@ -1114,7 +1137,7 @@ static const yytype_uint16 yydefact[] =
        0,     0,     0,     0,     0,     0,    14,     0,    49,    31,
       47,    32,    18,    33,    23,     0,    36,     0,    37,    52,
       38,    39,     0,    42,    12,     9,     0,     0,     0,     0,
-     345,     0,     0,   332,   176,     0,   177,     0,     0,    89,
+     347,     0,     0,   334,   176,     0,   177,     0,     0,    89,
       90,     0,     0,    62,   187,     0,     0,   181,   186,     0,
        0,     0,     0,     0,     0,     0,   201,   203,   181,   181,
      209,     0,    93,    96,     0,     0,     0,     0,     0,     0,
@@ -1124,10 +1147,10 @@ static const yytype_uint16 yydefact[] =
      217,   219,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,    25,     0,     0,    45,     0,     0,
-       0,    22,     0,     0,    56,    55,   355,     0,     0,   339,
-     352,   362,   351,   358,   360,     0,   331,   213,   273,   105,
-       0,   279,   285,   107,   106,   318,   315,   317,     0,    76,
-      78,   335,   193,   189,   182,   180,     0,     0,    92,    73,
+       0,    22,     0,     0,    56,    55,   357,     0,     0,   341,
+     354,   364,   353,   360,   362,     0,   333,   213,   275,   105,
+       0,   281,   287,   107,   106,   320,   317,   319,     0,    76,
+      78,   337,   193,   189,   182,   180,     0,     0,    92,    73,
       74,    84,   109,   199,   200,     0,   204,     0,   209,   210,
       87,    99,    95,    98,     0,     0,    81,     0,    75,   212,
      212,     0,    88,     0,    27,    28,    43,    29,    30,   215,
@@ -1136,43 +1159,44 @@ static const yytype_uint16 yydefact[] =
      238,   237,   235,   234,   233,   228,   227,   231,   232,   230,
      229,   226,   225,   223,   224,   220,   221,   222,    15,    26,
       24,    50,    48,    44,    20,    21,    35,    34,    53,    57,
-       0,     0,   346,   347,     0,   342,   340,     0,   296,   288,
-       0,   296,     0,     0,    86,     0,     0,   184,   185,     0,
+       0,     0,   348,   349,     0,   344,   342,     0,   298,   290,
+       0,   298,     0,     0,    86,     0,     0,   184,   185,     0,
      202,   205,   211,     0,   103,    94,    97,     0,    83,     0,
-       0,     0,   336,    41,     0,   248,   254,     0,     0,   252,
+       0,     0,   338,    41,     0,   248,   254,     0,     0,   252,
        0,   239,   216,   243,   242,   244,   245,     0,     0,   259,
-     260,   247,     0,   246,     0,    58,   363,   360,   353,   343,
-     341,     0,     0,   296,     0,   264,   108,   303,     0,   304,
-     286,   321,   322,     0,   197,     0,     0,   195,     0,     0,
+     260,   247,     0,   246,     0,    58,   365,   362,   355,   345,
+     343,     0,     0,   298,     0,   266,   108,   305,     0,   306,
+     288,   323,   324,     0,   197,     0,     0,   195,     0,     0,
       91,     0,     0,   101,   178,   179,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,   364,     0,     0,     0,   290,
-     291,   292,   293,   294,   297,     0,     0,     0,     0,   299,
-       0,   266,     0,   302,   305,   264,     0,   325,     0,   319,
+       0,     0,     0,     0,   236,   366,     0,     0,     0,   292,
+     293,   294,   295,   296,   299,     0,     0,     0,     0,   301,
+       0,   268,     0,   304,   307,   266,     0,   327,     0,   321,
        0,   198,   194,   196,     0,   181,   190,   100,     0,     0,
-     112,   249,   250,   251,   253,   256,   257,   258,   356,     0,
-     363,   295,     0,   298,     0,     0,   268,   289,   268,   108,
-       0,   322,     0,     0,    77,   212,     0,   104,     0,   348,
-       0,   296,     0,     0,     0,   274,   280,     0,     0,   323,
-       0,   320,   191,     0,   188,   102,   354,     0,     0,   263,
-       0,     0,   272,     0,   287,   326,   322,   212,     0,   300,
-     265,     0,   269,   270,   271,     0,   281,   324,   192,     0,
-     267,   275,   310,   296,   156,     0,     0,   133,   115,   114,
+     112,   249,   250,   251,   253,   256,   257,   258,   358,     0,
+     365,   297,     0,   300,     0,     0,   270,   291,   270,   108,
+       0,   324,     0,     0,    77,   212,     0,   104,     0,   350,
+       0,   298,     0,     0,     0,   276,   282,     0,     0,   325,
+       0,   322,   191,     0,   188,   102,   356,     0,     0,   265,
+       0,     0,   274,     0,   289,   328,   324,   212,     0,   302,
+     267,     0,   271,   272,   273,     0,   283,   326,   192,     0,
+     269,   277,   312,   298,   156,     0,     0,   133,   115,   114,
      158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
      143,   145,   150,     0,     0,     0,   144,     0,   116,     0,
-       0,   139,   147,   155,   157,     0,     0,     0,   311,   282,
-     301,     0,     0,     0,   152,   212,     0,   140,     0,     0,
-     113,     0,   132,   181,     0,   134,     0,     0,   154,   276,
-     212,   142,     0,   307,     0,     0,     0,     0,     0,     0,
+       0,   139,   147,   155,   157,     0,     0,     0,   313,   284,
+     303,     0,     0,     0,   152,   212,     0,   140,     0,     0,
+     113,     0,   132,   181,     0,   134,     0,     0,   154,   278,
+     212,   142,     0,   309,     0,     0,     0,     0,     0,     0,
        0,     0,     0,   156,     0,   163,     0,     0,   126,     0,
-     130,     0,     0,   135,     0,   181,   181,     0,   307,     0,
+     130,     0,     0,   135,     0,   181,   181,     0,   309,     0,
      156,     0,   262,     0,     0,   146,     0,   118,     0,     0,
      119,   125,     0,   149,     0,   113,     0,     0,   128,     0,
-     129,   131,   137,   136,   181,   262,   148,     0,   306,     0,
-     308,     0,     0,     0,     0,     0,   153,     0,   141,   127,
-     117,   138,   308,   312,     0,   165,     0,     0,     0,     0,
-       0,     0,   165,   308,   261,   212,     0,   283,   121,   120,
-       0,   122,   123,     0,   277,   165,   164,   309,   181,   124,
-     151,   181,   313,   284,   278,   181,   314
+     129,   131,   137,   136,   181,   262,   148,     0,   308,     0,
+     310,     0,     0,     0,     0,     0,   153,     0,   141,   127,
+     117,   138,   310,   314,     0,   165,     0,     0,     0,     0,
+       0,     0,   165,   310,   261,   212,     0,   264,   121,   120,
+       0,   122,   123,     0,   264,   165,   164,   311,     0,   285,
+     124,   151,   279,   315,     0,   181,   181,   181,   263,   286,
+     280,   316
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -1185,245 +1209,241 @@ static const yytype_int16 yydefgoto[] =
      653,   666,   693,   654,   655,   656,   694,   767,   115,   144,
       61,   704,    62,   216,   217,   218,   332,   437,   545,   594,
      436,   496,   497,    63,    64,   228,    65,   229,    66,   231,
-     695,   205,   250,   740,   531,   566,   585,   615,   324,   428,
-     602,   624,   708,   781,   430,   603,   622,   683,   778,   431,
-     536,   486,   525,   484,   485,   489,   535,   712,   755,   625,
-     682,   763,   785,    67,   208,   327,   432,   573,   492,   539,
-     571,    15,    16,    26,    27,   103,    13,    14,    68,    69,
-      23,    24,   427,    97,    98,   518,   421,   516
+     695,   205,   250,   740,   779,   531,   566,   585,   615,   324,
+     428,   602,   624,   708,   786,   430,   603,   622,   683,   785,
+     431,   536,   486,   525,   484,   485,   489,   535,   712,   755,
+     625,   682,   763,   787,    67,   208,   327,   432,   573,   492,
+     539,   571,    15,    16,    26,    27,   103,    13,    14,    68,
+      69,    23,    24,   427,    97,    98,   518,   421,   516
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -714
+#define YYPACT_NINF -647
 static const yytype_int16 yypact[] =
 {
-     247,  -714,  -714,  -714,  -714,  -714,    79,  -714,  -714,  -714,
-    -714,  -714,    81,  -714,   -24,  -714,    35,  -714,   907,  1618,
-     112,   103,    67,   -24,  -714,   109,    35,  -714,  1006,    70,
-      75,   188,   105,  -714,   148,  -714,   150,   171,   155,   195,
-     205,   213,   217,   221,   224,   235,   239,  -714,  -714,   245,
-     250,  -714,   256,   265,   271,  -714,   278,  -714,  -714,  -714,
-    -714,   189,  -714,  -714,  -714,  -714,  -714,  -714,  -714,   162,
-    -714,   313,   150,   318,   754,  -714,   321,   326,   330,  -714,
-    -714,   333,   336,   345,   754,   347,   350,   359,  -714,   360,
-     254,   754,  -714,   365,  -714,   369,   371,   332,   232,   103,
-    -714,  -714,  -714,   334,   244,  -714,  -714,  -714,  -714,  -714,
-    -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,   387,   391,
-     393,   394,  -714,  -714,    43,   397,   398,   399,   150,   150,
-     402,   150,     4,  -714,   403,    41,   372,   150,   404,   410,
-     378,  -714,  -714,  -714,  -714,   373,    32,  -714,    45,  -714,
-    -714,   754,   754,   754,   379,   392,   395,   400,   405,  -714,
-     414,   423,   424,   425,   426,   428,   430,   432,   433,   435,
-     436,   437,   438,   439,   754,   754,  1432,   508,  -714,   285,
-    -714,   291,    17,  -714,  -714,   595,  1795,   292,  -714,  -714,
-     293,  -714,   446,  -714,  -714,  1795,   382,   109,   109,   296,
-     117,   383,   335,   117,  -714,   754,  -714,   258,    46,  -714,
-    -714,   -28,   319,  -714,  -714,   150,   419,    -2,  -714,   337,
-     339,   342,   343,   348,   349,   352,  -714,  -714,   100,   108,
-      25,   354,  -714,  -714,   444,    14,    41,   357,   476,   489,
-     754,   363,   -24,   754,   754,  -714,   754,   754,  -714,  -714,
-    1045,   754,   754,   754,   754,   754,   497,   500,   754,   509,
-     514,   516,   517,   754,   754,   521,   522,   754,   754,   525,
-    -714,  -714,   754,   754,   754,   754,   754,   754,   754,   754,
-     754,   754,   754,   754,   754,   754,   754,   754,   754,   754,
-     754,   754,   754,   754,  1795,   528,   529,  -714,   531,   754,
-     754,  1795,   356,   532,  -714,    39,  -714,   396,   406,  -714,
-    -714,   533,  -714,  -714,  -714,   -64,  -714,  1795,  1006,  -714,
-     150,  -714,  -714,  -714,  -714,  -714,  -714,  -714,   537,  -714,
-    -714,   223,   506,  -714,  -714,  -714,    43,   540,  -714,  -714,
-    -714,  -714,  -714,  -714,  -714,   150,  -714,   150,   403,  -714,
-    -714,  -714,  -714,  -714,   511,    48,  -714,    18,  -714,  -714,
-    -714,  1452,  -714,    36,  1795,  1795,  1641,  1795,  1795,  -714,
-     916,  1065,  1472,  1492,  1085,   408,   407,  1105,   409,   418,
-     421,   429,  1512,  1532,   434,   440,  1125,  1559,   441,  1755,
-    1639,  1811,  1826,  1840,  1853,   999,   999,   390,   390,   390,
-     390,   314,   314,   163,   163,  -714,  -714,  -714,  1795,  1795,
-    1795,  -714,  -714,  -714,  1795,  1795,  -714,  -714,  -714,  -714,
-     545,   109,   133,   117,   496,  -714,  -714,   -48,   633,  -714,
-     716,   633,   754,   412,  -714,     2,   552,    43,  -714,   449,
-    -714,  -714,  -714,    41,  -714,  -714,  -714,   534,  -714,   450,
-     458,   569,  -714,  -714,   754,  -714,  -714,   754,   754,  -714,
-     754,  -714,  -714,  -714,  -714,  -714,  -714,   754,   754,  -714,
-    -714,  -714,   571,  -714,   754,  -714,   460,   561,  -714,  -714,
-    -714,   374,   541,  1667,   564,   480,  -714,  -714,  1775,   492,
-    -714,  1795,    28,   580,  -714,   601,     3,  -714,   515,   570,
-    -714,    31,    41,  -714,  -714,  -714,   465,  1145,  1174,  1194,
-    1214,  1234,  1254,   467,  1795,   117,   557,   109,   109,  -714,
-    -714,  -714,  -714,  -714,  -714,   471,   754,   234,   602,  -714,
-     582,   583,   413,  -714,  -714,   480,   563,   590,   591,  -714,
-     484,  -714,  -714,  -714,   624,   488,  -714,  -714,    78,    41,
-    -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,   491,
-     460,  -714,  1274,  -714,   754,   603,   539,  -714,   539,  -714,
-     754,    28,   754,   495,  -714,  -714,   548,  -714,    86,   117,
-     585,   236,  1303,   754,   607,  -714,  -714,   427,  1323,  -714,
-    1343,  -714,  -714,   639,  -714,  -714,  -714,   613,   636,  -714,
-    1363,   754,   130,   598,  -714,  -714,    28,  -714,   754,  -714,
-    -714,  1383,  -714,  -714,  -714,   604,  -714,  -714,  -714,  1403,
-    -714,  -714,  -714,   621,   817,    51,   644,   877,  -714,  -714,
-    -714,  -714,  -714,  -714,  -714,   625,   628,   629,   150,   630,
-    -714,  -714,  -714,   631,   645,   646,  -714,    84,  -714,   651,
-      12,  -714,  -714,  -714,   817,   623,   653,   189,  -714,  -714,
-    -714,   242,   320,    82,  -714,  -714,   654,  -714,   689,    82,
-    -714,   657,  -714,   -45,    84,   658,    84,   659,  -714,  -714,
-    -714,  -714,   641,   674,   663,   664,   558,   665,   560,   669,
-     671,   566,   576,   817,   577,  -714,   754,    16,  -714,   -12,
-    -714,    22,    80,  -714,    84,   135,   -17,    84,   674,   578,
-     817,   705,   627,    82,    82,  -714,    82,  -714,    82,    82,
-    -714,  -714,   688,  -714,  1579,   581,   584,   726,  -714,    82,
-    -714,  -714,  -714,  -714,   149,   627,  -714,   673,  -714,   708,
-    -714,   589,   592,    26,   594,   596,  -714,   731,  -714,  -714,
-    -714,  -714,  -714,  -714,   736,   104,   600,   605,    82,   606,
-     611,   614,   104,  -714,  -714,  -714,   745,  -714,  -714,  -714,
-     615,  -714,  -714,   189,  -714,   104,  -714,  -714,   488,  -714,
-    -714,   488,  -714,  -714,  -714,   488,  -714
+     329,  -647,  -647,  -647,  -647,  -647,    29,  -647,  -647,  -647,
+    -647,  -647,    55,  -647,   -23,  -647,    10,  -647,   790,  1522,
+      70,   119,    41,   -23,  -647,   219,    10,  -647,   965,    61,
+      72,    42,    75,  -647,    97,  -647,   136,   117,   146,   154,
+     159,   187,   196,   208,   216,   238,   243,  -647,  -647,   256,
+     270,  -647,   278,   289,   291,  -647,   293,  -647,  -647,  -647,
+    -647,    96,  -647,  -647,  -647,  -647,  -647,  -647,  -647,   134,
+    -647,   328,   136,   331,   636,  -647,   335,   336,   337,  -647,
+    -647,   338,   340,   341,   636,   344,   343,   349,  -647,   356,
+     249,   636,  -647,   361,  -647,   350,   351,   313,   228,   119,
+    -647,  -647,  -647,   316,   232,  -647,  -647,  -647,  -647,  -647,
+    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,   372,   374,
+     391,   394,  -647,  -647,    51,   395,   398,   403,   136,   136,
+     405,   136,    21,  -647,   416,    35,   384,   136,   420,   422,
+     401,  -647,  -647,  -647,  -647,   371,    31,  -647,    32,  -647,
+    -647,   636,   636,   636,   404,   406,   419,   426,   428,  -647,
+     436,   437,   440,   441,   442,   444,   446,   447,   449,   450,
+     452,   454,   456,   458,   636,   636,   794,   366,  -647,   288,
+    -647,   290,    19,  -647,  -647,   514,  1552,   315,  -647,  -647,
+     353,  -647,   431,  -647,  -647,  1552,   400,   219,   219,   354,
+     231,   453,   359,   231,  -647,   636,  -647,   364,    37,  -647,
+    -647,    -7,   368,  -647,  -647,   136,   461,    -9,  -647,   377,
+     376,   379,   380,   382,   383,   387,  -647,  -647,   102,   127,
+      20,   396,  -647,  -647,   475,    76,    35,   408,   517,   524,
+     636,   411,   -23,   636,   636,  -647,   636,   636,  -647,  -647,
+     743,   636,   636,   636,   636,   636,   554,   555,   636,   556,
+     557,   558,   559,   636,   636,   560,   570,   636,   636,   571,
+    -647,  -647,   636,   636,   636,   636,   636,   636,   636,   636,
+     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
+     636,   636,   636,   636,  1552,   573,   575,  -647,   576,   636,
+     636,  1552,   254,   577,  -647,    24,  -647,   439,   455,  -647,
+    -647,   581,  -647,  -647,  -647,   -70,  -647,  1552,   965,  -647,
+     136,  -647,  -647,  -647,  -647,  -647,  -647,  -647,   582,  -647,
+    -647,   865,   550,  -647,  -647,  -647,    51,   588,  -647,  -647,
+    -647,  -647,  -647,  -647,  -647,   136,  -647,   136,   416,  -647,
+    -647,  -647,  -647,  -647,   564,   123,  -647,   115,  -647,  -647,
+    -647,  1384,  -647,    -6,  1552,  1552,  1553,  1552,  1552,  -647,
+     994,  1014,  1404,  1424,  1034,   463,   464,  1054,   466,   467,
+     468,   469,  1444,  1464,   471,   472,  1074,  1484,   473,  1750,
+    1787,  1573,   974,  1801,  1693,   958,   958,   507,   507,   507,
+     507,   516,   516,   268,   268,  -647,  -647,  -647,  1552,  1552,
+    1552,  -647,  -647,  -647,  1552,  1552,  -647,  -647,  -647,  -647,
+     598,   219,   259,   231,   563,  -647,  -647,   -62,     5,  -647,
+     552,     5,   636,   465,  -647,     1,   605,    51,  -647,   477,
+    -647,  -647,  -647,    35,  -647,  -647,  -647,   590,  -647,   479,
+     482,   625,  -647,  -647,   636,  -647,  -647,   636,   636,  -647,
+     636,  -647,  -647,  -647,  -647,  -647,  -647,   636,   636,  -647,
+    -647,  -647,   634,  -647,   636,  -647,   496,   626,  -647,  -647,
+    -647,   239,   606,  1727,   629,   568,  -647,  -647,  1770,   566,
+    -647,  1552,     3,   655,  -647,   656,    11,  -647,   569,   635,
+    -647,   121,    35,  -647,  -647,  -647,   519,  1094,  1124,  1144,
+    1164,  1184,  1204,   526,  1552,   231,   612,   219,   219,  -647,
+    -647,  -647,  -647,  -647,  -647,   530,   636,   342,   661,  -647,
+     642,   643,   397,  -647,  -647,   568,   623,   645,   646,  -647,
+     538,  -647,  -647,  -647,   679,   542,  -647,  -647,   128,    35,
+    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,   545,
+     496,  -647,  1224,  -647,   636,   654,   589,  -647,   589,  -647,
+     636,     3,   636,   548,  -647,  -647,   602,  -647,   138,   231,
+     639,   246,  1254,   636,   662,  -647,  -647,   427,  1274,  -647,
+    1294,  -647,  -647,   697,  -647,  -647,  -647,   667,   689,  -647,
+    1314,   636,   167,   649,  -647,  -647,     3,  -647,   636,  -647,
+    -647,  1334,  -647,  -647,  -647,   650,  -647,  -647,  -647,  1354,
+    -647,  -647,  -647,   671,   694,    50,   695,   641,  -647,  -647,
+    -647,  -647,  -647,  -647,  -647,   675,   676,   677,   136,   685,
+    -647,  -647,  -647,   686,   687,   688,  -647,   282,  -647,   690,
+      90,  -647,  -647,  -647,   694,   673,   692,    96,  -647,  -647,
+    -647,    98,   412,    78,  -647,  -647,   696,  -647,   728,    78,
+    -647,   703,  -647,    44,   282,   704,   282,   705,  -647,  -647,
+    -647,  -647,   698,   709,   706,   707,   599,   710,   607,   714,
+     717,   610,   611,   694,   633,  -647,   636,    18,  -647,    25,
+    -647,    15,   234,  -647,   282,   150,    88,   282,   709,   637,
+     694,   776,   680,    78,    78,  -647,    78,  -647,    78,    78,
+    -647,  -647,   746,  -647,  1512,   638,   644,   784,  -647,    78,
+    -647,  -647,  -647,  -647,   181,   680,  -647,   733,  -647,   767,
+    -647,   651,   657,    16,   658,   659,  -647,   791,  -647,  -647,
+    -647,  -647,  -647,  -647,   792,   179,   660,   683,    78,   699,
+     700,   701,   179,  -647,  -647,  -647,   796,   729,  -647,  -647,
+     702,  -647,  -647,    96,   729,   179,  -647,  -647,   777,  -647,
+    -647,  -647,  -647,  -647,   797,   542,   542,   542,  -647,  -647,
+    -647,  -647
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -714,  -714,   -68,  -714,  -714,  -714,  -714,   507,  -714,  -714,
-    -714,  -714,  -714,  -714,   620,  -714,  -714,  -714,  -714,   549,
-    -714,  -714,  -714,  -221,  -714,  -714,  -714,  -714,  -444,   -13,
-    -714,  -105,  -308,  -714,  -714,    47,  -601,    68,  -714,  -714,
-     110,  -714,  -714,  -714,  -653,  -714,     1,  -713,  -714,  -629,
-    -565,  -216,  -714,   340,  -714,   442,  -714,  -714,  -714,  -714,
-    -714,  -714,   274,  -714,  -714,  -714,  -714,  -714,  -714,  -205,
-    -104,  -714,   -74,    37,   238,  -714,   203,  -714,  -714,  -714,
-    -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,
-    -714,  -714,  -714,  -459,   355,  -714,  -714,    71,  -676,  -714,
-    -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,  -714,  -532,
-    -714,  -714,  -714,  -714,   750,  -714,  -714,  -714,  -714,  -714,
-     546,   -20,  -714,   684,   -11,  -714,  -714,   227
+    -647,  -647,   -66,  -647,  -647,  -647,  -647,   562,  -647,  -647,
+    -647,  -647,  -647,  -647,   691,  -647,  -647,  -647,  -647,   595,
+    -647,  -647,  -647,  -215,  -647,  -647,  -647,  -647,  -460,   -14,
+    -647,   985,  -268,  -647,  -647,   124,  -412,   145,  -647,  -647,
+     189,  -647,  -647,  -647,  -640,  -647,    68,  -624,  -647,  -625,
+    -394,  -216,  -647,   407,  -647,   513,  -647,  -647,  -647,  -647,
+    -647,  -647,   358,  -647,  -647,  -647,  -647,  -647,  -647,  -212,
+    -104,  -647,   -74,   125,    85,   326,  -647,   294,  -647,  -647,
+    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
+    -647,  -647,  -647,  -647,  -467,   432,  -647,  -647,   156,  -646,
+    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
+    -510,  -647,  -647,  -647,  -647,   844,  -647,  -647,  -647,  -647,
+    -647,   630,   -20,  -647,   772,   -11,  -647,  -647,   314
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
    number is the opposite.  If zero, do what YYDEFACT says.
    If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -336
+#define YYTABLE_NINF -338
 static const yytype_int16 yytable[] =
 {
-     176,   336,   204,   100,   147,    60,   494,   494,   122,   727,
-     186,   206,   345,   347,   104,   357,   675,   195,   352,   353,
-     725,   297,   352,   353,   528,   349,   670,   628,   681,   230,
-     670,   628,   537,    21,  -183,   352,   353,   628,   243,   589,
-     722,   628,   532,   419,   629,   232,   233,   214,   629,   774,
-     325,   246,   445,   446,   629,   658,  -183,   737,   629,   657,
-     222,   223,   782,   225,   227,   425,   671,   636,   637,   237,
-     671,   636,   637,   705,   617,   706,   762,   248,   249,    17,
-     426,   479,   352,   353,   670,    20,   670,   775,   670,   657,
-     352,   353,    25,    21,   452,   628,   480,   628,   335,   628,
-     270,   271,   703,   294,   326,    22,   734,    92,   215,   659,
-     765,   301,   629,    92,   629,   328,   629,   329,    91,   354,
-     766,   310,   598,   354,    99,   587,   335,   116,   657,   538,
-     733,   317,   117,   728,   684,   685,   354,   310,   671,   636,
-     637,   335,   120,   442,   780,   657,   234,   333,   542,   226,
-     495,   495,   645,   447,   122,   644,   645,   355,   676,   356,
-     298,   355,   647,   448,   626,    22,   361,   729,   348,   364,
-     365,   758,   367,   368,   355,   244,   547,   370,   371,   372,
-     373,   374,   420,   354,   377,   121,   307,   308,   247,   382,
-     383,   354,   125,   386,   387,   288,   289,   290,   389,   390,
+     176,   336,   204,   100,    60,   494,   147,   537,   149,   150,
+     186,   206,   345,   347,   104,   494,   528,   195,   349,   670,
+     670,   357,   725,   297,   230,   122,   532,  -183,   419,    17,
+     628,   628,   681,   628,    21,   151,   152,   243,   246,   232,
+     233,   325,   481,   154,   155,   482,   727,   629,   629,  -183,
+     629,    21,   452,   722,   658,   214,   156,   157,   158,    20,
+     425,   589,   222,   223,   159,   225,   227,    25,   479,   160,
+     737,   237,   671,   636,   637,   426,    91,   248,   249,   161,
+     352,   353,   670,   480,   162,   163,   164,   165,   166,   167,
+     168,   118,   119,   628,   675,   326,   617,   169,    99,   170,
+     270,   271,   670,   294,   538,   628,   762,    22,   659,   587,
+     629,   301,   120,   628,   598,   171,   215,   775,   116,   352,
+     353,   172,   629,    92,    22,   352,   353,   445,   446,   117,
+     629,   317,   352,   353,   121,   335,   442,   328,   774,   329,
+     122,   234,   352,   353,   671,   636,   637,   173,   781,   333,
+     495,   783,   684,   685,   174,   175,   626,   542,   644,   645,
+     495,   729,   758,   298,   348,   647,   361,   226,   420,   364,
+     365,   728,   367,   368,   124,   244,   247,   370,   371,   372,
+     373,   374,   354,   125,   377,   765,   307,   308,   335,   382,
+     383,   126,   703,   386,   387,   766,   127,   686,   389,   390,
      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
-     687,   355,   501,   577,   645,   414,   415,    28,   124,   355,
-      93,   595,   126,    94,    95,    96,    93,   118,   119,    94,
-     101,   102,   127,   335,   311,   344,   670,   312,   313,   314,
-     128,   335,   429,   346,   129,   449,   450,   628,   130,   434,
-     311,   131,   318,   312,   313,   477,   612,   613,   614,    29,
-      30,    31,   132,   527,   629,   597,   133,   440,   335,   441,
-     732,   548,   134,    32,    33,    34,    35,   135,    36,    37,
-      38,    39,   335,   137,   751,   145,   684,   685,    40,    41,
-      42,    43,   138,   519,   520,   521,   522,   523,   139,    44,
-      45,    46,    47,    48,    49,   141,   319,   146,    60,    50,
-      51,    52,   148,   320,   670,   177,    53,    54,   578,   576,
-     178,   321,   142,   143,   180,   628,    43,   183,    55,   672,
-     184,   686,   677,   100,   286,   287,   288,   289,   290,   185,
-      56,   187,   629,   188,   483,   322,   488,   483,   491,   416,
-     417,    53,    54,   189,   193,   194,   672,    57,   672,   196,
-       1,     2,     3,    55,   689,   690,   200,   149,   150,   524,
-     507,     4,   687,   508,   509,   197,   510,   198,   203,     5,
-     199,   209,   202,   511,   512,   210,   731,   211,   212,   672,
-     514,   219,   220,   221,   151,   152,   224,   230,   238,   236,
-     476,   153,   154,   155,   239,   240,   251,   318,   284,   285,
-     286,   287,   288,   289,   290,   156,   157,   158,   295,   252,
-     242,   318,   253,   159,   296,   302,   303,   254,   160,   306,
-     309,   315,   255,   519,   520,   521,   522,   523,   161,   567,
-     304,   256,   562,   162,   163,   164,   165,   166,   167,   168,
-     257,   258,   259,   260,   330,   261,   169,   262,   170,   263,
-     264,   592,   265,   266,   267,   268,   269,   334,   320,   316,
-     337,   351,   359,   171,   338,   604,   321,   339,   340,   172,
-     582,    43,   320,   341,   342,   360,   588,   343,   590,   350,
-     321,   375,   358,   618,   376,    43,   559,   560,   362,   600,
-     322,   149,   150,   378,   292,   173,    53,    54,   379,   524,
-     380,   381,   174,   175,   322,   384,   385,   611,    55,   388,
-      53,    54,   411,   412,   619,   413,   418,   424,   151,   152,
-     422,   433,    55,   435,   439,   153,   154,   155,   444,   475,
-     423,   460,   461,   478,   463,   493,   688,   691,   692,   156,
-     157,   158,   783,   464,   700,   784,   465,   159,   498,   786,
-     664,   503,   160,   506,   466,   513,   709,   517,   526,   469,
-     529,   530,   161,   534,   540,   470,   473,   162,   163,   164,
-     165,   166,   167,   168,   500,   504,   730,   688,   149,   150,
-     169,   299,   170,   505,   515,   541,   546,   544,   741,   742,
-     550,   700,   557,   744,   745,   558,   561,   171,   563,   564,
-     569,   565,   724,   172,   750,   151,   152,   570,   572,   574,
-     575,   335,   153,   154,   155,   579,   149,   150,   730,   591,
-     583,   584,   593,   596,   601,   607,   156,   157,   158,   173,
-     608,   293,   609,   770,   159,   616,   174,   175,   527,   160,
-     660,   621,   661,   151,   152,   662,   663,   665,   667,   161,
-     481,   154,   155,   482,   162,   163,   164,   165,   166,   167,
-     168,   679,   668,   669,   156,   157,   158,   169,   674,   170,
-     680,   696,   159,   698,   702,  -113,   707,   160,   710,   711,
-     713,   714,   716,   715,   171,   717,   718,   161,   719,   738,
-     172,   720,   162,   163,   164,   165,   166,   167,   168,   149,
-     150,   721,   723,   736,   746,   169,  -133,   170,   739,   748,
-     749,   753,   487,   754,   756,   761,   173,   757,   300,   759,
-     764,   760,   171,   174,   175,   768,   151,   152,   172,   777,
-     769,   771,   366,   153,   154,   155,   772,   149,   150,   773,
-     779,   241,   331,   743,   678,   726,   776,   156,   157,   158,
-     543,   586,   752,   568,   173,   159,   105,   499,   438,   735,
-     160,   174,   175,   201,   151,   152,   490,   580,   363,     0,
-     161,   153,   154,   155,     0,   162,   163,   164,   165,   166,
-     167,   168,     0,     0,     0,   156,   157,   158,   169,     0,
-     170,     0,     0,   159,     0,     0,     0,     0,   160,     0,
-       0,   627,     0,     0,     0,   171,     0,     0,   161,     0,
-       0,   172,   628,   162,   163,   164,   165,   166,   167,   168,
-       0,     0,     0,     0,     0,     0,   169,     0,   170,   629,
-       0,     0,     0,     0,     0,     0,     0,   173,   630,   631,
-     632,   633,   634,   171,   174,   175,     0,     0,     0,   172,
-       0,   635,   636,   637,     0,     0,     0,     0,     0,     0,
-       0,     0,   638,   106,   107,   108,   109,   110,   111,   112,
-     113,   114,     0,     0,     0,   173,     0,     0,     0,     0,
-       0,     0,   174,   175,     0,     0,     0,     0,     0,     0,
-     639,    28,   640,     0,  -113,     0,   641,     0,     0,     0,
-      53,    54,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   272,   642,   273,   274,   275,   276,   277,   278,   279,
-     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
-     290,     0,   643,    29,    30,    31,   644,   645,     0,     0,
-       0,   646,     0,   647,     0,     0,     0,    32,    33,    34,
-      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
-       0,     0,    40,    41,    42,    43,     0,     0,     0,     0,
-       0,     0,     0,    44,    45,    46,    47,    48,    49,     0,
-       0,     0,     0,    50,    51,    52,     0,     0,     0,     0,
-      53,    54,   106,   107,   108,   109,   110,   111,   112,   113,
-     114,     0,    55,   280,   281,   282,   283,   284,   285,   286,
-     287,   288,   289,   290,    56,     0,     0,     0,     0,     0,
-    -335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    57,     0,     0,     0,     0,     0,     0,     0,   454,
-     272,   455,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
-     369,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     355,   354,   356,    92,   128,   414,   415,   354,   501,   447,
+     657,   645,   335,   129,   354,   310,   733,   676,   670,   687,
+     142,   143,   149,   150,   354,   130,   335,    93,   344,   628,
+      94,    95,    96,   131,   429,   449,   450,   416,   417,   355,
+     657,   448,   705,   310,   706,   355,   629,   547,   145,   151,
+     152,   335,   355,   346,   577,   132,   153,   154,   155,   440,
+     133,   441,   355,   527,   595,   597,   670,   548,   684,   685,
+     156,   157,   158,   134,   335,   734,   732,   628,   159,   657,
+     288,   289,   290,   160,   612,   613,   614,   135,   519,   520,
+     521,   522,   523,   161,   629,   137,   657,    60,   162,   163,
+     164,   165,   166,   167,   168,   335,   138,   751,   139,   576,
+     141,   169,   146,   170,   578,   148,   671,   636,   637,   177,
+     178,   180,   183,   100,   184,   185,   188,    93,   187,   171,
+      94,   101,   102,   189,   483,   172,   488,   483,   491,   311,
+     193,   194,   312,   313,   314,   196,   197,   198,   318,   149,
+     150,   199,   292,   200,   202,   687,   209,   203,   210,   672,
+     507,   173,   677,   508,   509,   524,   510,   311,   174,   175,
+     312,   313,   477,   511,   512,   211,   151,   152,   212,   219,
+     514,   318,   220,   153,   154,   155,   672,   221,   672,   224,
+     476,   519,   520,   521,   522,   523,   670,   156,   157,   158,
+     230,   236,   319,   645,   238,   159,   239,   628,   242,   320,
+     160,   318,   295,   567,   296,   304,   731,   321,   240,   672,
+     161,   251,    43,   252,   629,   162,   163,   164,   165,   166,
+     167,   168,   562,     1,     2,     3,   253,   306,   169,   302,
+     170,   322,   320,   254,     4,   255,   689,   690,    53,    54,
+     321,   592,     5,   256,   257,    43,   171,   258,   259,   260,
+      55,   261,   172,   262,   263,   604,   264,   265,   524,   266,
+     582,   267,   320,   268,   322,   269,   588,   303,   590,   309,
+     321,    53,    54,   618,   316,    43,   559,   560,   173,   600,
+     293,   315,   351,    55,   330,   174,   175,   149,   150,   334,
+     299,   337,   338,   359,   322,   339,   340,   611,   341,   342,
+     360,    53,    54,   343,   619,   284,   285,   286,   287,   288,
+     289,   290,   350,    55,   151,   152,   286,   287,   288,   289,
+     290,   153,   154,   155,   358,   149,   150,   362,   375,   376,
+     378,   379,   380,   381,   384,   156,   157,   158,   487,   789,
+     790,   791,   664,   159,   385,   388,   709,   411,   160,   412,
+     413,   418,   151,   152,   422,   424,   433,   435,   161,   153,
+     154,   155,   439,   162,   163,   164,   165,   166,   167,   168,
+     423,   444,   475,   156,   157,   158,   169,   460,   170,   493,
+     461,   159,   463,   464,   465,   466,   160,   469,   470,   473,
+     478,   498,   724,   500,   171,   504,   161,   503,   505,   506,
+     172,   162,   163,   164,   165,   166,   167,   168,   513,   149,
+     150,   515,   517,   526,   169,   529,   170,   106,   107,   108,
+     109,   110,   111,   112,   113,   114,   173,   534,   300,   540,
+     541,   544,   171,   174,   175,   550,   151,   152,   172,   530,
+     558,   546,   557,   153,   154,   155,   561,   563,  -113,   564,
+     569,   565,   570,   572,   574,   575,   335,   156,   157,   158,
+     579,   583,   584,   591,   173,   159,   593,   596,   627,   601,
+     160,   174,   175,   607,   608,   609,   616,   621,   527,   628,
+     161,   660,   661,   662,   663,   162,   163,   164,   165,   166,
+     167,   168,   665,   667,   668,   669,   629,   674,   169,   680,
+     170,   679,   698,   696,   711,   630,   631,   632,   633,   634,
+     702,  -113,   707,   713,   714,   715,   171,   716,   635,   636,
+     637,   718,   172,   717,   719,   710,   720,   721,   272,   638,
+     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
+     283,   284,   285,   286,   287,   288,   289,   290,   173,   723,
+     738,   739,   746,   736,  -133,   174,   175,   639,   749,   640,
+     748,   753,   754,   641,    28,   761,   764,   756,    53,    54,
+     777,   788,   784,   757,   759,   760,   768,   366,   331,   272,
+     642,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   769,
+     643,   778,   241,   776,   644,   645,    29,    30,    31,   646,
+     743,   647,   726,   678,   499,   771,   772,   773,   780,   438,
+      32,    33,    34,    35,   543,    36,    37,    38,    39,   782,
+     752,   568,   586,   490,   735,    40,    41,    42,    43,    28,
+     105,   201,   363,     0,   580,     0,    44,    45,    46,    47,
+      48,    49,     0,     0,     0,     0,    50,    51,    52,   369,
+       0,     0,     0,     0,    53,    54,     0,     0,     0,     0,
+       0,   434,     0,     0,     0,     0,    55,     0,     0,     0,
+       0,    29,    30,    31,     0,     0,     0,     0,    56,     0,
+       0,     0,     0,     0,  -337,    32,    33,    34,    35,     0,
+      36,    37,    38,    39,     0,    57,     0,     0,   291,     0,
+      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
+       0,    44,    45,    46,    47,    48,    49,     0,     0,     0,
+       0,    50,    51,    52,     0,     0,     0,     0,     0,    53,
+      54,   106,   107,   108,   109,   110,   111,   112,   113,   114,
+       0,    55,   280,   281,   282,   283,   284,   285,   286,   287,
+     288,   289,   290,    56,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+      57,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   454,   272,
+     455,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
      456,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
@@ -1435,342 +1455,338 @@ static const yytype_int16 yytable[] =
      282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
      551,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   272,   552,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,   272,   553,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,   272,   554,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,   272,   555,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,   272,   556,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,   272,   581,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   272,   599,   273,
-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,   272,   605,   273,
-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,   272,   606,   273,
-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,   272,   610,   273,
-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,   272,   620,   273,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
+     552,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     553,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     554,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     555,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     556,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     581,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
+     599,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     605,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     606,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     610,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     620,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,   272,
+     623,   273,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
+       0,     0,     0,     0,     0,     0,    70,   272,   451,   273,
      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,   272,   623,   273,
+     284,   285,   286,   287,   288,   289,   290,     0,   457,     0,
+       0,     0,     0,     0,     0,     0,     0,    70,     0,     0,
+      71,     0,     0,     0,     0,     0,     0,   272,   458,   273,
      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   285,   286,   287,   288,   289,   290,     0,     0,     0,
-       0,     0,     0,     0,   272,   291,   273,   274,   275,   276,
-     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
-     287,   288,   289,   290,   272,   451,   273,   274,   275,   276,
-     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
-     287,   288,   289,   290,     0,   457,     0,     0,     0,     0,
-       0,     0,    70,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   458,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    70,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   467,    71,   274,   275,   276,
-     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
-     287,   288,   289,   290,     0,   468,     0,   453,     0,    71,
-       0,     0,   272,    72,   273,   274,   275,   276,   277,   278,
+     284,   285,   286,   287,   288,   289,   290,    72,   467,   453,
+       0,    71,   275,   276,   277,   278,   279,   280,   281,   282,
+     283,   284,   285,   286,   287,   288,   289,   290,   468,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    72,     0,
+       0,     0,    73,     0,     0,     0,     0,     0,   472,    74,
+      75,    76,    77,    78,   -43,    79,    80,    81,     0,    82,
+      83,     0,    84,    85,    86,     0,   688,   691,   692,    87,
+      88,    89,     0,    73,   700,     0,   747,     0,     0,     0,
+      74,    75,    76,    77,    78,     0,    79,    80,    81,     0,
+      82,    83,     0,    84,    85,    86,     0,     0,     0,     0,
+      87,    88,    89,     0,     0,     0,   730,   688,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   741,   742,
+       0,   700,     0,   744,   745,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   750,   278,   279,   280,   281,   282,
+     283,   284,   285,   286,   287,   288,   289,   290,   730,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   272,   770,   273,   274,   275,   276,   277,   278,
      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
-     289,   290,   472,     0,   527,     0,    72,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,    73,     0,
-       0,     0,   747,     0,    74,    75,    76,    77,    78,   -43,
-      79,    80,    81,     0,    82,    83,     0,    84,    85,    86,
-       0,    73,     0,     0,    87,    88,    89,    74,    75,    76,
-      77,    78,     0,    79,    80,    81,     0,    82,    83,     0,
-      84,    85,    86,     0,     0,     0,     0,    87,    88,    89,
-     272,   474,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,   533,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
-     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
-     285,   286,   287,   288,   289,   290,   276,   277,   278,   279,
-     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
-     290,   277,   278,   279,   280,   281,   282,   283,   284,   285,
-     286,   287,   288,   289,   290,   278,   279,   280,   281,   282,
-     283,   284,   285,   286,   287,   288,   289,   290
+     289,   290,     0,     0,   527,   272,   474,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,   272,   533,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,   274,   275,   276,   277,   278,
+     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
+     289,   290,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,   290
 };
 
 static const yytype_int16 yycheck[] =
 {
-      74,   217,   106,    23,    72,    18,     4,     4,     4,    21,
-      84,   115,   228,   229,    25,   236,     4,    91,     4,     5,
-       4,     4,     4,     5,   483,   230,     4,    15,   657,     4,
-       4,    15,     4,    57,    36,     4,     5,    15,     6,   571,
-     693,    15,   486,     4,    32,     4,     5,     4,    32,   762,
-       4,     6,     4,     5,    32,     4,    58,   710,    32,   624,
-     128,   129,   775,   131,   132,   129,    54,    55,    56,   137,
-      54,    55,    56,   674,   606,   676,   752,   151,   152,     0,
-     144,   129,     4,     5,     4,     4,     4,   763,     4,   654,
-       4,     5,    57,    57,    58,    15,   144,    15,   143,    15,
-     174,   175,   147,   177,    58,   129,   707,     4,    65,    58,
-       6,   185,    32,     4,    32,   143,    32,   145,     6,   105,
-      16,     4,   581,   105,    57,   569,   143,    57,   693,   101,
-     147,   205,    57,   145,    54,    55,   105,     4,    54,    55,
-      56,   143,    37,   348,   773,   710,   105,   215,   145,   145,
-     148,   148,   140,   105,     4,   139,   140,   143,   146,   145,
-     143,   143,   146,   145,   623,   129,   240,   145,   143,   243,
-     244,   145,   246,   247,   143,   143,   145,   251,   252,   253,
-     254,   255,   143,   105,   258,    37,   197,   198,   143,   263,
-     264,   105,    37,   267,   268,    32,    33,    34,   272,   273,
+      74,   217,   106,    23,    18,     4,    72,     4,     3,     4,
+      84,   115,   228,   229,    25,     4,   483,    91,   230,     4,
+       4,   236,     4,     4,     4,     4,   486,    36,     4,     0,
+      15,    15,   657,    15,    57,    30,    31,     6,     6,     4,
+       5,     4,    37,    38,    39,    40,    21,    32,    32,    58,
+      32,    57,    58,   693,     4,     4,    51,    52,    53,     4,
+     130,   571,   128,   129,    59,   131,   132,    57,   130,    64,
+     710,   137,    54,    55,    56,   145,     6,   151,   152,    74,
+       4,     5,     4,   145,    79,    80,    81,    82,    83,    84,
+      85,    49,    50,    15,     4,    58,   606,    92,    57,    94,
+     174,   175,     4,   177,   101,    15,   752,   130,    58,   569,
+      32,   185,    37,    15,   581,   110,    65,   763,    57,     4,
+       5,   116,    32,     4,   130,     4,     5,     4,     5,    57,
+      32,   205,     4,     5,    37,   144,   348,   144,   762,   146,
+       4,   106,     4,     5,    54,    55,    56,   142,   773,   215,
+     149,   775,    54,    55,   149,   150,   623,   146,   140,   141,
+     149,   146,   146,   144,   144,   147,   240,   146,   144,   243,
+     244,   146,   246,   247,    57,   144,   144,   251,   252,   253,
+     254,   255,   106,    37,   258,     6,   197,   198,   144,   263,
+     264,    37,   148,   267,   268,    16,    37,    99,   272,   273,
      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
-     140,   143,   443,   145,   140,   299,   300,     4,    57,   143,
-     127,   145,    37,   130,   131,   132,   127,    49,    50,   130,
-     131,   132,    37,   143,   127,   145,     4,   130,   131,   132,
-      37,   143,   320,   145,    37,   359,   360,    15,    37,    36,
-     127,    37,     4,   130,   131,   132,   136,   137,   138,    46,
-      47,    48,    37,    37,    32,    39,    37,   345,   143,   347,
-     145,   502,    37,    60,    61,    62,    63,    37,    65,    66,
-      67,    68,   143,    37,   145,   133,    54,    55,    75,    76,
-      77,    78,    37,    69,    70,    71,    72,    73,    37,    86,
-      87,    88,    89,    90,    91,    37,    58,     4,   331,    96,
-      97,    98,     4,    65,     4,     4,   103,   104,   549,   545,
-       4,    73,   143,   144,     4,    15,    78,     4,   115,   647,
-       4,    99,   650,   363,    30,    31,    32,    33,    34,     4,
-     127,     4,    32,     3,   428,    97,   430,   431,   432,     3,
-       4,   103,   104,     4,     4,   111,   674,   144,   676,     4,
-     123,   124,   125,   115,    54,    55,   144,     3,     4,   145,
-     454,   134,   140,   457,   458,    16,   460,    16,   144,   142,
-      58,     4,    58,   467,   468,     4,   704,     4,     4,   707,
-     474,     4,     4,     4,    30,    31,     4,     4,     4,    37,
-     421,    37,    38,    39,     4,    37,    37,     4,    28,    29,
-      30,    31,    32,    33,    34,    51,    52,    53,   143,    37,
-      57,     4,    37,    59,   143,   143,   143,    37,    64,    57,
-     144,    58,    37,    69,    70,    71,    72,    73,    74,    36,
-       4,    37,   526,    79,    80,    81,    82,    83,    84,    85,
-      37,    37,    37,    37,   145,    37,    92,    37,    94,    37,
-      37,   575,    37,    37,    37,    37,    37,    58,    65,   144,
-     143,    37,     6,   109,   145,    58,    73,   145,   145,   115,
-     564,    78,    65,   145,   145,     6,   570,   145,   572,   145,
-      73,     4,   145,   607,     4,    78,   517,   518,   145,   583,
-      97,     3,     4,     4,     6,   141,   103,   104,     4,   145,
-       4,     4,   148,   149,    97,     4,     4,   601,   115,     4,
-     103,   104,     4,     4,   608,     4,     4,     4,    30,    31,
-     144,     4,   115,    37,     4,    37,    38,    39,    37,     4,
-     144,   143,   145,    57,   145,   143,   661,   662,   663,    51,
-      52,    53,   778,   145,   669,   781,   145,    59,    16,   785,
-     638,    37,    64,     4,   145,     4,   680,    16,    37,   145,
-      16,   101,    74,    91,     4,   145,   145,    79,    80,    81,
-      82,    83,    84,    85,   145,   145,   701,   702,     3,     4,
-      92,     6,    94,   145,   144,     4,    36,    92,   713,   714,
-     145,   716,   145,   718,   719,    58,   145,   109,    16,    37,
-      57,    38,   696,   115,   729,    30,    31,    37,    37,   145,
-       6,   143,    37,    38,    39,   144,     3,     4,   743,   144,
-      37,   102,    94,    58,    37,     6,    51,    52,    53,   141,
-      37,   143,    16,   758,    59,    57,   148,   149,    37,    64,
-      16,    57,    37,    30,    31,    37,    37,    37,    37,    74,
-      37,    38,    39,    40,    79,    80,    81,    82,    83,    84,
-      85,    58,    37,    37,    51,    52,    53,    92,    37,    94,
-      37,    37,    59,     4,    37,    37,    37,    64,    57,    25,
-      37,    37,    37,   145,   109,   145,    37,    74,    37,     4,
-     115,   145,    79,    80,    81,    82,    83,    84,    85,     3,
-       4,   145,   145,   145,    36,    92,   145,    94,   101,   145,
-       4,    58,    16,    25,   145,     4,   141,   145,   143,   145,
-       4,   145,   109,   148,   149,   145,    30,    31,   115,     4,
-     145,   145,   245,    37,    38,    39,   145,     3,     4,   145,
-     145,   141,   213,   716,   654,   697,   765,    51,    52,    53,
-     496,   568,   735,   535,   141,    59,    26,   437,   336,   708,
-      64,   148,   149,    99,    30,    31,   431,   560,   242,    -1,
-      74,    37,    38,    39,    -1,    79,    80,    81,    82,    83,
-      84,    85,    -1,    -1,    -1,    51,    52,    53,    92,    -1,
-      94,    -1,    -1,    59,    -1,    -1,    -1,    -1,    64,    -1,
-      -1,     4,    -1,    -1,    -1,   109,    -1,    -1,    74,    -1,
-      -1,   115,    15,    79,    80,    81,    82,    83,    84,    85,
-      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    32,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,    41,    42,
-      43,    44,    45,   109,   148,   149,    -1,    -1,    -1,   115,
-      -1,    54,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    65,     6,     7,     8,     9,    10,    11,    12,
-      13,    14,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,
-      -1,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
-      93,     4,    95,    -1,    37,    -1,    99,    -1,    -1,    -1,
-     103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    15,   115,    17,    18,    19,    20,    21,    22,    23,
-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    -1,   135,    46,    47,    48,   139,   140,    -1,    -1,
-      -1,   144,    -1,   146,    -1,    -1,    -1,    60,    61,    62,
-      63,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
-      -1,    -1,    75,    76,    77,    78,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    86,    87,    88,    89,    90,    91,    -1,
-      -1,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
-     103,   104,     6,     7,     8,     9,    10,    11,    12,    13,
-      14,    -1,   115,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,   127,    -1,    -1,    -1,    -1,    -1,
-     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,
-      15,   145,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
-     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+     144,   106,   146,     4,    37,   299,   300,   106,   443,   106,
+     624,   141,   144,    37,   106,     4,   148,   147,     4,   141,
+     144,   145,     3,     4,   106,    37,   144,   128,   146,    15,
+     131,   132,   133,    37,   320,   359,   360,     3,     4,   144,
+     654,   146,   674,     4,   676,   144,    32,   146,   134,    30,
+      31,   144,   144,   146,   146,    37,    37,    38,    39,   345,
+      37,   347,   144,    37,   146,    39,     4,   502,    54,    55,
+      51,    52,    53,    37,   144,   707,   146,    15,    59,   693,
+      32,    33,    34,    64,   137,   138,   139,    37,    69,    70,
+      71,    72,    73,    74,    32,    37,   710,   331,    79,    80,
+      81,    82,    83,    84,    85,   144,    37,   146,    37,   545,
+      37,    92,     4,    94,   549,     4,    54,    55,    56,     4,
+       4,     4,     4,   363,     4,     4,     3,   128,     4,   110,
+     131,   132,   133,     4,   428,   116,   430,   431,   432,   128,
+       4,   112,   131,   132,   133,     4,    16,    16,     4,     3,
+       4,    58,     6,   145,    58,   141,     4,   145,     4,   647,
+     454,   142,   650,   457,   458,   146,   460,   128,   149,   150,
+     131,   132,   133,   467,   468,     4,    30,    31,     4,     4,
+     474,     4,     4,    37,    38,    39,   674,     4,   676,     4,
+     421,    69,    70,    71,    72,    73,     4,    51,    52,    53,
+       4,    37,    58,   141,     4,    59,     4,    15,    57,    65,
+      64,     4,   144,    36,   144,     4,   704,    73,    37,   707,
+      74,    37,    78,    37,    32,    79,    80,    81,    82,    83,
+      84,    85,   526,   124,   125,   126,    37,    57,    92,   144,
+      94,    97,    65,    37,   135,    37,    54,    55,   104,   105,
+      73,   575,   143,    37,    37,    78,   110,    37,    37,    37,
+     116,    37,   116,    37,    37,    58,    37,    37,   146,    37,
+     564,    37,    65,    37,    97,    37,   570,   144,   572,   145,
+      73,   104,   105,   607,   145,    78,   517,   518,   142,   583,
+     144,    58,    37,   116,   146,   149,   150,     3,     4,    58,
+       6,   144,   146,     6,    97,   146,   146,   601,   146,   146,
+       6,   104,   105,   146,   608,    28,    29,    30,    31,    32,
+      33,    34,   146,   116,    30,    31,    30,    31,    32,    33,
+      34,    37,    38,    39,   146,     3,     4,   146,     4,     4,
+       4,     4,     4,     4,     4,    51,    52,    53,    16,   785,
+     786,   787,   638,    59,     4,     4,   680,     4,    64,     4,
+       4,     4,    30,    31,   145,     4,     4,    37,    74,    37,
+      38,    39,     4,    79,    80,    81,    82,    83,    84,    85,
+     145,    37,     4,    51,    52,    53,    92,   144,    94,   144,
+     146,    59,   146,   146,   146,   146,    64,   146,   146,   146,
+      57,    16,   696,   146,   110,   146,    74,    37,   146,     4,
+     116,    79,    80,    81,    82,    83,    84,    85,     4,     3,
+       4,   145,    16,    37,    92,    16,    94,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,   142,    91,   144,     4,
+       4,    92,   110,   149,   150,   146,    30,    31,   116,   101,
+      58,    36,   146,    37,    38,    39,   146,    16,    37,    37,
+      57,    38,    37,    37,   146,     6,   144,    51,    52,    53,
+     145,    37,   103,   145,   142,    59,    94,    58,     4,    37,
+      64,   149,   150,     6,    37,    16,    57,    57,    37,    15,
+      74,    16,    37,    37,    37,    79,    80,    81,    82,    83,
+      84,    85,    37,    37,    37,    37,    32,    37,    92,    37,
+      94,    58,     4,    37,    25,    41,    42,    43,    44,    45,
+      37,    37,    37,    37,    37,   146,   110,    37,    54,    55,
+      56,    37,   116,   146,    37,    57,   146,   146,    15,    65,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,   142,   146,
+       4,   101,    36,   146,   146,   149,   150,    93,     4,    95,
+     146,    58,    25,    99,     4,     4,     4,   146,   104,   105,
+       4,     4,    25,   146,   146,   146,   146,   245,   213,    15,
+     116,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,   146,
+     136,   102,   141,   765,   140,   141,    46,    47,    48,   145,
+     716,   147,   697,   654,   437,   146,   146,   146,   146,   336,
+      60,    61,    62,    63,   496,    65,    66,    67,    68,   774,
+     735,   535,   568,   431,   708,    75,    76,    77,    78,     4,
+      26,    99,   242,    -1,   560,    -1,    86,    87,    88,    89,
+      90,    91,    -1,    -1,    -1,    -1,    96,    97,    98,   146,
+      -1,    -1,    -1,    -1,   104,   105,    -1,    -1,    -1,    -1,
+      -1,    36,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,
+      -1,    46,    47,    48,    -1,    -1,    -1,    -1,   128,    -1,
+      -1,    -1,    -1,    -1,   134,    60,    61,    62,    63,    -1,
+      65,    66,    67,    68,    -1,   145,    -1,    -1,   144,    -1,
+      75,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,
+      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,   104,
+     105,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      -1,   116,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,   128,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
-     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
-     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
-     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
-     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    15,   145,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,   145,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    15,   145,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    15,   145,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    15,   145,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    15,   145,    17,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
+     146,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,     4,    15,   144,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    15,   145,    17,
+      28,    29,    30,    31,    32,    33,    34,    -1,   144,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,
+      38,    -1,    -1,    -1,    -1,    -1,    -1,    15,   144,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    15,   143,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    15,   143,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    -1,   143,    -1,    -1,    -1,    -1,
-      -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   143,    38,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    -1,   143,    -1,    36,    -1,    38,
-      -1,    -1,    15,    65,    17,    18,    19,    20,    21,    22,
+      28,    29,    30,    31,    32,    33,    34,    65,   144,    36,
+      -1,    38,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,   144,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
+      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,   144,   107,
+     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
+     118,    -1,   120,   121,   122,    -1,   661,   662,   663,   127,
+     128,   129,    -1,   100,   669,    -1,   144,    -1,    -1,    -1,
+     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
+     117,   118,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,
+     127,   128,   129,    -1,    -1,    -1,   701,   702,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   713,   714,
+      -1,   716,    -1,   718,   719,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   729,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,   743,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    15,   758,    17,    18,    19,    20,    21,    22,
       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,   143,    -1,    37,    -1,    65,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
-      -1,    -1,   143,    -1,   106,   107,   108,   109,   110,   111,
-     112,   113,   114,    -1,   116,   117,    -1,   119,   120,   121,
-      -1,   100,    -1,    -1,   126,   127,   128,   106,   107,   108,
-     109,   110,    -1,   112,   113,   114,    -1,   116,   117,    -1,
-     119,   120,   121,    -1,    -1,    -1,    -1,   126,   127,   128,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    20,    21,    22,    23,
-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34
+      33,    34,    -1,    -1,    37,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
    symbol of state STATE-NUM.  */
 static const yytype_uint16 yystos[] =
 {
-       0,   123,   124,   125,   134,   142,   151,   167,   168,   155,
-     156,   153,   154,   266,   267,   261,   262,     0,   169,   157,
-       4,    57,   129,   270,   271,    57,   263,   264,     4,    46,
+       0,   124,   125,   126,   135,   143,   152,   168,   169,   156,
+     157,   154,   155,   268,   269,   263,   264,     0,   170,   158,
+       4,    57,   130,   272,   273,    57,   265,   266,     4,    46,
       47,    48,    60,    61,    62,    63,    65,    66,    67,    68,
       75,    76,    77,    78,    86,    87,    88,    89,    90,    91,
-      96,    97,    98,   103,   104,   115,   127,   144,   170,   177,
-     179,   200,   202,   213,   214,   216,   218,   253,   268,   269,
-       4,    38,    65,   100,   106,   107,   108,   109,   110,   112,
-     113,   114,   116,   117,   119,   120,   121,   126,   127,   128,
-     158,     6,     4,   127,   130,   131,   132,   273,   274,    57,
-     271,   131,   132,   265,   274,   264,     6,     7,     8,     9,
-      10,    11,    12,    13,    14,   198,    57,    57,    49,    50,
-      37,    37,     4,   152,    57,    37,    37,    37,    37,    37,
-      37,    37,    37,    37,    37,    37,   171,    37,    37,    37,
-     180,    37,   143,   144,   199,   133,     4,   152,     4,     3,
+      96,    97,    98,   104,   105,   116,   128,   145,   171,   178,
+     180,   201,   203,   214,   215,   217,   219,   255,   270,   271,
+       4,    38,    65,   100,   107,   108,   109,   110,   111,   113,
+     114,   115,   117,   118,   120,   121,   122,   127,   128,   129,
+     159,     6,     4,   128,   131,   132,   133,   275,   276,    57,
+     273,   132,   133,   267,   276,   266,     6,     7,     8,     9,
+      10,    11,    12,    13,    14,   199,    57,    57,    49,    50,
+      37,    37,     4,   153,    57,    37,    37,    37,    37,    37,
+      37,    37,    37,    37,    37,    37,   172,    37,    37,    37,
+     181,    37,   144,   145,   200,   134,     4,   153,     4,     3,
        4,    30,    31,    37,    38,    39,    51,    52,    53,    59,
       64,    74,    79,    80,    81,    82,    83,    84,    85,    92,
-      94,   109,   115,   141,   148,   149,   222,     4,     4,   162,
-       4,   161,   160,     4,     4,     4,   222,     4,     3,     4,
-     163,   164,   165,     4,   111,   222,     4,    16,    16,    58,
-     144,   273,    58,   144,   220,   221,   220,   178,   254,     4,
-       4,     4,     4,   172,     4,    65,   203,   204,   205,     4,
-       4,     4,   152,   152,     4,   152,   145,   152,   215,   217,
-       4,   219,     4,     5,   105,   173,    37,   152,     4,     4,
-      37,   164,    57,     6,   143,   159,     6,   143,   222,   222,
-     222,    37,    37,    37,    37,    37,    37,    37,    37,    37,
+      94,   110,   116,   142,   149,   150,   223,     4,     4,   163,
+       4,   162,   161,     4,     4,     4,   223,     4,     3,     4,
+     164,   165,   166,     4,   112,   223,     4,    16,    16,    58,
+     145,   275,    58,   145,   221,   222,   221,   179,   256,     4,
+       4,     4,     4,   173,     4,    65,   204,   205,   206,     4,
+       4,     4,   153,   153,     4,   153,   146,   153,   216,   218,
+       4,   220,     4,     5,   106,   174,    37,   153,     4,     4,
+      37,   165,    57,     6,   144,   160,     6,   144,   223,   223,
+     223,    37,    37,    37,    37,    37,    37,    37,    37,    37,
       37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
-     222,   222,    15,    17,    18,    19,    20,    21,    22,    23,
+     223,   223,    15,    17,    18,    19,    20,    21,    22,    23,
       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,   143,     6,   143,   222,   143,   143,     4,   143,     6,
-     143,   222,   143,   143,     4,   166,    57,   274,   274,   144,
-       4,   127,   130,   131,   132,    58,   144,   222,     4,    58,
-      65,    73,    97,   179,   228,     4,    58,   255,   143,   145,
-     145,   169,   206,   152,    58,   143,   201,   143,   145,   145,
-     145,   145,   145,   145,   145,   201,   145,   201,   143,   219,
-     145,    37,     4,     5,   105,   143,   145,   173,   145,     6,
-       6,   222,   145,   270,   222,   222,   157,   222,   222,   145,
-     222,   222,   222,   222,   222,     4,     4,   222,     4,     4,
-       4,     4,   222,   222,     4,     4,   222,   222,     4,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
-     222,     4,     4,     4,   222,   222,     3,     4,     4,     4,
-     143,   276,   144,   144,     4,   129,   144,   272,   229,   152,
-     234,   239,   256,     4,    36,    37,   210,   207,   205,     4,
-     152,   152,   219,   174,    37,     4,     5,   105,   145,   220,
-     220,   143,    58,    36,   143,   145,   145,   143,   143,   145,
-     143,   145,   145,   145,   145,   145,   145,   143,   143,   145,
-     145,   145,   143,   145,    16,     4,   274,   132,    57,   129,
-     144,    37,    40,   222,   243,   244,   241,    16,   222,   245,
-     244,   222,   258,   143,     4,   148,   211,   212,    16,   203,
-     145,   173,   176,    37,   145,   145,     4,   222,   222,   222,
-     222,   222,   222,     4,   222,   144,   277,    16,   275,    69,
-      70,    71,    72,    73,   145,   242,    37,    37,   243,    16,
-     101,   224,   178,    16,    91,   246,   240,     4,   101,   259,
-       4,     4,   145,   212,    92,   208,    36,   145,   173,   175,
-     145,   145,   145,   145,   145,   145,   145,   145,    58,   274,
-     274,   145,   222,    16,    37,    38,   225,    36,   224,    57,
-      37,   260,    37,   257,   145,     6,   201,   145,   173,   144,
-     277,   145,   222,    37,   102,   226,   226,   178,   222,   259,
-     222,   144,   220,    94,   209,   145,    58,    39,   243,   145,
-     222,    37,   230,   235,    58,   145,   145,     6,    37,    16,
-     145,   222,   136,   137,   138,   227,    57,   259,   220,   222,
-     145,    57,   236,   145,   231,   249,   243,     4,    15,    32,
+      34,   144,     6,   144,   223,   144,   144,     4,   144,     6,
+     144,   223,   144,   144,     4,   167,    57,   276,   276,   145,
+       4,   128,   131,   132,   133,    58,   145,   223,     4,    58,
+      65,    73,    97,   180,   230,     4,    58,   257,   144,   146,
+     146,   170,   207,   153,    58,   144,   202,   144,   146,   146,
+     146,   146,   146,   146,   146,   202,   146,   202,   144,   220,
+     146,    37,     4,     5,   106,   144,   146,   174,   146,     6,
+       6,   223,   146,   272,   223,   223,   158,   223,   223,   146,
+     223,   223,   223,   223,   223,     4,     4,   223,     4,     4,
+       4,     4,   223,   223,     4,     4,   223,   223,     4,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
+     223,     4,     4,     4,   223,   223,     3,     4,     4,     4,
+     144,   278,   145,   145,     4,   130,   145,   274,   231,   153,
+     236,   241,   258,     4,    36,    37,   211,   208,   206,     4,
+     153,   153,   220,   175,    37,     4,     5,   106,   146,   221,
+     221,   144,    58,    36,   144,   146,   146,   144,   144,   146,
+     144,   146,   146,   146,   146,   146,   146,   144,   144,   146,
+     146,   146,   144,   146,    16,     4,   276,   133,    57,   130,
+     145,    37,    40,   223,   245,   246,   243,    16,   223,   247,
+     246,   223,   260,   144,     4,   149,   212,   213,    16,   204,
+     146,   174,   177,    37,   146,   146,     4,   223,   223,   223,
+     223,   223,   223,     4,   223,   145,   279,    16,   277,    69,
+      70,    71,    72,    73,   146,   244,    37,    37,   245,    16,
+     101,   226,   179,    16,    91,   248,   242,     4,   101,   261,
+       4,     4,   146,   213,    92,   209,    36,   146,   174,   176,
+     146,   146,   146,   146,   146,   146,   146,   146,    58,   276,
+     276,   146,   223,    16,    37,    38,   227,    36,   226,    57,
+      37,   262,    37,   259,   146,     6,   202,   146,   174,   145,
+     279,   146,   223,    37,   103,   228,   228,   179,   223,   261,
+     223,   145,   221,    94,   210,   146,    58,    39,   245,   146,
+     223,    37,   232,   237,    58,   146,   146,     6,    37,    16,
+     146,   223,   137,   138,   139,   229,    57,   261,   221,   223,
+     146,    57,   238,   146,   233,   251,   245,     4,    15,    32,
       41,    42,    43,    44,    45,    54,    55,    56,    65,    93,
-      95,    99,   115,   135,   139,   140,   144,   146,   181,   182,
-     184,   187,   188,   190,   193,   194,   195,   200,     4,    58,
-      16,    37,    37,    37,   152,    37,   191,    37,    37,    37,
-       4,    54,   182,   186,    37,     4,   146,   182,   190,    58,
-      37,   199,   250,   237,    54,    55,    99,   140,   181,    54,
-      55,   181,   181,   192,   196,   220,    37,   189,     4,   183,
-     181,   185,    37,   147,   201,   186,   186,    37,   232,   220,
-      57,    25,   247,    37,    37,   145,    37,   145,    37,    37,
-     145,   145,   194,   145,   222,     4,   187,    21,   145,   145,
-     181,   182,   145,   147,   186,   247,   145,   194,     4,   101,
-     223,   181,   181,   185,   181,   181,    36,   143,   145,     4,
-     181,   145,   223,    58,    25,   248,   145,   145,   145,   145,
-     145,     4,   248,   251,     4,     6,    16,   197,   145,   145,
-     181,   145,   145,   145,   197,   248,   196,     4,   238,   145,
-     199,   233,   197,   201,   201,   252,   201
+      95,    99,   116,   136,   140,   141,   145,   147,   182,   183,
+     185,   188,   189,   191,   194,   195,   196,   201,     4,    58,
+      16,    37,    37,    37,   153,    37,   192,    37,    37,    37,
+       4,    54,   183,   187,    37,     4,   147,   183,   191,    58,
+      37,   200,   252,   239,    54,    55,    99,   141,   182,    54,
+      55,   182,   182,   193,   197,   221,    37,   190,     4,   184,
+     182,   186,    37,   148,   202,   187,   187,    37,   234,   221,
+      57,    25,   249,    37,    37,   146,    37,   146,    37,    37,
+     146,   146,   195,   146,   223,     4,   188,    21,   146,   146,
+     182,   183,   146,   148,   187,   249,   146,   195,     4,   101,
+     224,   182,   182,   186,   182,   182,    36,   144,   146,     4,
+     182,   146,   224,    58,    25,   250,   146,   146,   146,   146,
+     146,     4,   250,   253,     4,     6,    16,   198,   146,   146,
+     182,   146,   146,   146,   198,   250,   197,     4,   102,   225,
+     146,   200,   225,   198,    25,   240,   235,   254,     4,   202,
+     202,   202
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1785,9 +1801,18 @@ static const yytype_uint16 yystos[] =
 
 /* Like YYERROR except do call yyerror.  This remains here temporarily
    to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
 
 #define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
 
 #define YYRECOVERING()  (!!yyerrstatus)
 
@@ -1955,17 +1980,20 @@ yy_symbol_print (yyoutput, yytype, yyvaluep)
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static void
-yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
 #else
 static void
-yy_stack_print (bottom, top)
-    yytype_int16 *bottom;
-    yytype_int16 *top;
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
 #endif
 {
   YYFPRINTF (stderr, "Stack now");
-  for (; bottom <= top; ++bottom)
-    YYFPRINTF (stderr, " %d", *bottom);
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
   YYFPRINTF (stderr, "\n");
 }
 
@@ -1999,11 +2027,11 @@ yy_reduce_print (yyvsp, yyrule)
   /* The symbols being reduced.  */
   for (yyi = 0; yyi < yynrhs; yyi++)
     {
-      fprintf (stderr, "   $%d = ", yyi + 1);
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
 		       &(yyvsp[(yyi + 1) - (yynrhs)])
 		       		       );
-      fprintf (stderr, "\n");
+      YYFPRINTF (stderr, "\n");
     }
 }
 
@@ -2283,10 +2311,8 @@ yydestruct (yymsg, yytype, yyvaluep)
 	break;
     }
 }
-
 
 /* Prevent warnings from -Wmissing-prototypes.  */
-
 #ifdef YYPARSE_PARAM
 #if defined __STDC__ || defined __cplusplus
 int yyparse (void *YYPARSE_PARAM);
@@ -2302,11 +2328,10 @@ int yyparse ();
 #endif /* ! YYPARSE_PARAM */
 
 
-
-/* The look-ahead symbol.  */
+/* The lookahead symbol.  */
 int yychar;
 
-/* The semantic value of the look-ahead symbol.  */
+/* The semantic value of the lookahead symbol.  */
 YYSTYPE yylval;
 
 /* Number of syntax errors so far.  */
@@ -2314,9 +2339,9 @@ int yynerrs;
 
 
 
-/*----------.
-| yyparse.  |
-`----------*/
+/*-------------------------.
+| yyparse or yypush_parse.  |
+`-------------------------*/
 
 #ifdef YYPARSE_PARAM
 #if (defined __STDC__ || defined __C99__FUNC__ \
@@ -2340,66 +2365,68 @@ yyparse ()
 #endif
 #endif
 {
-  
-  int yystate;
-  int yyn;
-  int yyresult;
-  /* Number of tokens to shift before error messages enabled.  */
-  int yyerrstatus;
-  /* Look-ahead token as an internal (translated) token number.  */
-  int yytoken = 0;
-#if YYERROR_VERBOSE
-  /* Buffer for error messages, and its allocated size.  */
-  char yymsgbuf[128];
-  char *yymsg = yymsgbuf;
-  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
-#endif
-
-  /* Three stacks and their tools:
-     `yyss': related to states,
-     `yyvs': related to semantic values,
-     `yyls': related to locations.
 
-     Refer to the stacks thru separate pointers, to allow yyoverflow
-     to reallocate them elsewhere.  */
 
-  /* The state stack.  */
-  yytype_int16 yyssa[YYINITDEPTH];
-  yytype_int16 *yyss = yyssa;
-  yytype_int16 *yyssp;
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
 
-  /* The semantic value stack.  */
-  YYSTYPE yyvsa[YYINITDEPTH];
-  YYSTYPE *yyvs = yyvsa;
-  YYSTYPE *yyvsp;
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
 
+       Refer to the stacks thru separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
 
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
 
-#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
 
-  YYSIZE_T yystacksize = YYINITDEPTH;
+    YYSIZE_T yystacksize;
 
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken;
   /* The variables used to return semantic value and location from the
      action routines.  */
   YYSTYPE yyval;
 
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
 
   /* The number of symbols on the RHS of the reduced rule.
      Keep to zero when no symbol should be popped.  */
   int yylen = 0;
 
+  yytoken = 0;
+  yyss = yyssa;
+  yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
+  yychar = YYEMPTY; /* Cause a token to be read.  */
 
   /* Initialize stack pointers.
      Waste one element of value and location stack
      so that they stay on the same level as the state stack.
      The wasted elements are never initialized.  */
-
   yyssp = yyss;
   yyvsp = yyvs;
 
@@ -2429,7 +2456,6 @@ yyparse ()
 	YYSTYPE *yyvs1 = yyvs;
 	yytype_int16 *yyss1 = yyss;
 
-
 	/* Each stack pointer address is followed by the size of the
 	   data in use in that stack, in bytes.  This used to be a
 	   conditional around just the two extra args, but that might
@@ -2437,7 +2463,6 @@ yyparse ()
 	yyoverflow (YY_("memory exhausted"),
 		    &yyss1, yysize * sizeof (*yyssp),
 		    &yyvs1, yysize * sizeof (*yyvsp),
-
 		    &yystacksize);
 
 	yyss = yyss1;
@@ -2460,9 +2485,8 @@ yyparse ()
 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
 	if (! yyptr)
 	  goto yyexhaustedlab;
-	YYSTACK_RELOCATE (yyss);
-	YYSTACK_RELOCATE (yyvs);
-
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
 #  undef YYSTACK_RELOCATE
 	if (yyss1 != yyssa)
 	  YYSTACK_FREE (yyss1);
@@ -2473,7 +2497,6 @@ yyparse ()
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
 
-
       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
 		  (unsigned long int) yystacksize));
 
@@ -2483,6 +2506,9 @@ yyparse ()
 
   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
   goto yybackup;
 
 /*-----------.
@@ -2491,16 +2517,16 @@ yyparse ()
 yybackup:
 
   /* Do appropriate processing given the current state.  Read a
-     look-ahead token if we need one and don't already have one.  */
+     lookahead token if we need one and don't already have one.  */
 
-  /* First try to decide what to do without reference to look-ahead token.  */
+  /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
   if (yyn == YYPACT_NINF)
     goto yydefault;
 
-  /* Not known => get a look-ahead token if don't already have one.  */
+  /* Not known => get a lookahead token if don't already have one.  */
 
-  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
@@ -2532,20 +2558,16 @@ yybackup:
       goto yyreduce;
     }
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
   /* Count tokens shifted since error; after three, turn off error
      status.  */
   if (yyerrstatus)
     yyerrstatus--;
 
-  /* Shift the look-ahead token.  */
+  /* Shift the lookahead token.  */
   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-  /* Discard the shifted token unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
 
   yystate = yyn;
   *++yyvsp = yylval;
@@ -2585,12 +2607,16 @@ yyreduce:
   switch (yyn)
     {
         case 8:
-#line 180 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 184 "ldgram.y"
     { ldlex_defsym(); }
     break;
 
   case 9:
-#line 182 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 186 "ldgram.y"
     {
 		  ldlex_popstate();
 		  lang_add_assignment (exp_defsym ((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)));
@@ -2598,7 +2624,9 @@ yyreduce:
     break;
 
   case 10:
-#line 190 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 194 "ldgram.y"
     {
 		  ldlex_mri_script ();
 		  PUSH_ERROR (_("MRI style script"));
@@ -2606,7 +2634,9 @@ yyreduce:
     break;
 
   case 11:
-#line 195 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 199 "ldgram.y"
     {
 		  ldlex_popstate ();
 		  mri_draw_tree ();
@@ -2615,382 +2645,526 @@ yyreduce:
     break;
 
   case 16:
-#line 210 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 214 "ldgram.y"
     {
 			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[(1) - (1)].name));
 			}
     break;
 
   case 17:
-#line 213 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 217 "ldgram.y"
     {
 			config.map_filename = "-";
 			}
     break;
 
   case 20:
-#line 219 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 223 "ldgram.y"
     { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
     break;
 
   case 21:
-#line 221 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 225 "ldgram.y"
     { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
     break;
 
   case 22:
-#line 223 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 227 "ldgram.y"
     { mri_public((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 23:
-#line 225 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 229 "ldgram.y"
     { mri_format((yyvsp[(2) - (2)].name)); }
     break;
 
   case 24:
-#line 227 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 231 "ldgram.y"
     { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
     break;
 
   case 25:
-#line 229 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 233 "ldgram.y"
     { mri_output_section((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree));}
     break;
 
   case 26:
-#line 231 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 235 "ldgram.y"
     { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
     break;
 
   case 27:
-#line 233 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 237 "ldgram.y"
     { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
     break;
 
   case 28:
-#line 235 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 239 "ldgram.y"
     { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
     break;
 
   case 29:
-#line 237 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 241 "ldgram.y"
     { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
     break;
 
   case 30:
-#line 239 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 243 "ldgram.y"
     { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
     break;
 
   case 33:
-#line 243 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 247 "ldgram.y"
     { mri_name((yyvsp[(2) - (2)].name)); }
     break;
 
   case 34:
-#line 245 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 249 "ldgram.y"
     { mri_alias((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].name),0);}
     break;
 
   case 35:
-#line 247 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 251 "ldgram.y"
     { mri_alias ((yyvsp[(2) - (4)].name), 0, (int) (yyvsp[(4) - (4)].bigint).integer); }
     break;
 
   case 36:
-#line 249 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 253 "ldgram.y"
     { mri_base((yyvsp[(2) - (2)].etree)); }
     break;
 
   case 37:
-#line 251 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 255 "ldgram.y"
     { mri_truncate ((unsigned int) (yyvsp[(2) - (2)].bigint).integer); }
     break;
 
   case 40:
-#line 255 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 259 "ldgram.y"
     { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
     break;
 
   case 41:
-#line 257 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 261 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
   case 42:
-#line 259 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 263 "ldgram.y"
     { lang_add_entry ((yyvsp[(2) - (2)].name), FALSE); }
     break;
 
   case 44:
-#line 264 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 268 "ldgram.y"
     { mri_order((yyvsp[(3) - (3)].name)); }
     break;
 
   case 45:
-#line 265 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 269 "ldgram.y"
     { mri_order((yyvsp[(2) - (2)].name)); }
     break;
 
   case 47:
-#line 271 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 275 "ldgram.y"
     { mri_load((yyvsp[(1) - (1)].name)); }
     break;
 
   case 48:
-#line 272 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 276 "ldgram.y"
     { mri_load((yyvsp[(3) - (3)].name)); }
     break;
 
   case 49:
-#line 277 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 281 "ldgram.y"
     { mri_only_load((yyvsp[(1) - (1)].name)); }
     break;
 
   case 50:
-#line 279 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 283 "ldgram.y"
     { mri_only_load((yyvsp[(3) - (3)].name)); }
     break;
 
   case 51:
-#line 283 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 287 "ldgram.y"
     { (yyval.name) = NULL; }
     break;
 
   case 54:
-#line 290 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 294 "ldgram.y"
     { ldlex_expression (); }
     break;
 
   case 55:
-#line 292 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 296 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
   case 56:
-#line 296 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 300 "ldgram.y"
     { ldlang_add_undef ((yyvsp[(1) - (1)].name), FALSE); }
     break;
 
   case 57:
-#line 298 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 302 "ldgram.y"
     { ldlang_add_undef ((yyvsp[(2) - (2)].name), FALSE); }
     break;
 
   case 58:
-#line 300 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 304 "ldgram.y"
     { ldlang_add_undef ((yyvsp[(3) - (3)].name), FALSE); }
     break;
 
   case 59:
-#line 304 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 308 "ldgram.y"
     { ldlex_both(); }
     break;
 
   case 60:
-#line 306 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 310 "ldgram.y"
     { ldlex_popstate(); }
     break;
 
   case 73:
-#line 327 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 331 "ldgram.y"
     { lang_add_target((yyvsp[(3) - (4)].name)); }
     break;
 
   case 74:
-#line 329 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 333 "ldgram.y"
     { ldfile_add_library_path ((yyvsp[(3) - (4)].name), FALSE); }
     break;
 
   case 75:
-#line 331 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 335 "ldgram.y"
     { lang_add_output((yyvsp[(3) - (4)].name), 1); }
     break;
 
   case 76:
-#line 333 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 337 "ldgram.y"
     { lang_add_output_format ((yyvsp[(3) - (4)].name), (char *) NULL,
 					    (char *) NULL, 1); }
     break;
 
   case 77:
-#line 336 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 340 "ldgram.y"
     { lang_add_output_format ((yyvsp[(3) - (8)].name), (yyvsp[(5) - (8)].name), (yyvsp[(7) - (8)].name), 1); }
     break;
 
   case 78:
-#line 338 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 342 "ldgram.y"
     { ldfile_set_output_arch ((yyvsp[(3) - (4)].name), bfd_arch_unknown); }
     break;
 
   case 79:
-#line 340 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 344 "ldgram.y"
     { command_line.force_common_definition = TRUE ; }
     break;
 
   case 80:
-#line 342 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 346 "ldgram.y"
     { command_line.inhibit_common_definition = TRUE ; }
     break;
 
   case 82:
-#line 345 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 349 "ldgram.y"
     { lang_enter_group (); }
     break;
 
   case 83:
-#line 347 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 351 "ldgram.y"
     { lang_leave_group (); }
     break;
 
   case 84:
-#line 349 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 353 "ldgram.y"
     { lang_add_map((yyvsp[(3) - (4)].name)); }
     break;
 
   case 85:
-#line 351 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 355 "ldgram.y"
     { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
     break;
 
   case 86:
-#line 353 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 357 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
   case 87:
-#line 355 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 359 "ldgram.y"
     {
 		  lang_add_nocrossref ((yyvsp[(3) - (4)].nocrossref));
 		}
     break;
 
   case 89:
-#line 360 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 364 "ldgram.y"
     { lang_add_insert ((yyvsp[(3) - (3)].name), 0); }
     break;
 
   case 90:
-#line 362 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 366 "ldgram.y"
     { lang_add_insert ((yyvsp[(3) - (3)].name), 1); }
     break;
 
   case 91:
-#line 364 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 368 "ldgram.y"
     { lang_memory_region_alias ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].name)); }
     break;
 
   case 92:
-#line 366 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 370 "ldgram.y"
     { lang_ld_feature ((yyvsp[(3) - (4)].name)); }
     break;
 
   case 93:
-#line 371 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 375 "ldgram.y"
     { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_search_file_enum,
 				 (char *)NULL); }
     break;
 
   case 94:
-#line 374 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 378 "ldgram.y"
     { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_search_file_enum,
 				 (char *)NULL); }
     break;
 
   case 95:
-#line 377 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 381 "ldgram.y"
     { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_search_file_enum,
 				 (char *)NULL); }
     break;
 
   case 96:
-#line 380 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 384 "ldgram.y"
     { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_l_enum,
 				 (char *)NULL); }
     break;
 
   case 97:
-#line 383 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 387 "ldgram.y"
     { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_l_enum,
 				 (char *)NULL); }
     break;
 
   case 98:
-#line 386 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 390 "ldgram.y"
     { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_l_enum,
 				 (char *)NULL); }
     break;
 
   case 99:
-#line 389 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 393 "ldgram.y"
     { (yyval.integer) = add_DT_NEEDED_for_regular; add_DT_NEEDED_for_regular = TRUE; }
     break;
 
   case 100:
-#line 391 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 395 "ldgram.y"
     { add_DT_NEEDED_for_regular = (yyvsp[(3) - (5)].integer); }
     break;
 
   case 101:
-#line 393 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 397 "ldgram.y"
     { (yyval.integer) = add_DT_NEEDED_for_regular; add_DT_NEEDED_for_regular = TRUE; }
     break;
 
   case 102:
-#line 395 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 399 "ldgram.y"
     { add_DT_NEEDED_for_regular = (yyvsp[(5) - (7)].integer); }
     break;
 
   case 103:
-#line 397 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 401 "ldgram.y"
     { (yyval.integer) = add_DT_NEEDED_for_regular; add_DT_NEEDED_for_regular = TRUE; }
     break;
 
   case 104:
-#line 399 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 403 "ldgram.y"
     { add_DT_NEEDED_for_regular = (yyvsp[(4) - (6)].integer); }
     break;
 
   case 109:
-#line 414 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 418 "ldgram.y"
     { lang_add_entry ((yyvsp[(3) - (4)].name), FALSE); }
     break;
 
   case 111:
-#line 416 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 420 "ldgram.y"
     {ldlex_expression ();}
     break;
 
   case 112:
-#line 417 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 421 "ldgram.y"
     { ldlex_popstate ();
 		  lang_add_assignment (exp_assert ((yyvsp[(4) - (7)].etree), (yyvsp[(6) - (7)].name))); }
     break;
 
   case 113:
-#line 425 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 429 "ldgram.y"
     {
 			  (yyval.cname) = (yyvsp[(1) - (1)].name);
 			}
     break;
 
   case 114:
-#line 429 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 433 "ldgram.y"
     {
 			  (yyval.cname) = "*";
 			}
     break;
 
   case 115:
-#line 433 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 437 "ldgram.y"
     {
 			  (yyval.cname) = "?";
 			}
     break;
 
   case 116:
-#line 440 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 444 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(1) - (1)].cname);
 			  (yyval.wildcard).sorted = none;
@@ -3000,7 +3174,9 @@ yyreduce:
     break;
 
   case 117:
-#line 447 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 451 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(5) - (5)].cname);
 			  (yyval.wildcard).sorted = none;
@@ -3010,7 +3186,9 @@ yyreduce:
     break;
 
   case 118:
-#line 454 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 458 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
 			  (yyval.wildcard).sorted = by_name;
@@ -3020,7 +3198,9 @@ yyreduce:
     break;
 
   case 119:
-#line 461 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 465 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
 			  (yyval.wildcard).sorted = by_alignment;
@@ -3030,7 +3210,9 @@ yyreduce:
     break;
 
   case 120:
-#line 468 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 472 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
 			  (yyval.wildcard).sorted = by_name_alignment;
@@ -3040,7 +3222,9 @@ yyreduce:
     break;
 
   case 121:
-#line 475 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 479 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
 			  (yyval.wildcard).sorted = by_name;
@@ -3050,7 +3234,9 @@ yyreduce:
     break;
 
   case 122:
-#line 482 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 486 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
 			  (yyval.wildcard).sorted = by_alignment_name;
@@ -3060,7 +3246,9 @@ yyreduce:
     break;
 
   case 123:
-#line 489 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 493 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
 			  (yyval.wildcard).sorted = by_alignment;
@@ -3070,7 +3258,9 @@ yyreduce:
     break;
 
   case 124:
-#line 496 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 500 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(7) - (8)].cname);
 			  (yyval.wildcard).sorted = by_name;
@@ -3080,7 +3270,9 @@ yyreduce:
     break;
 
   case 125:
-#line 503 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 507 "ldgram.y"
     {
 			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
 			  (yyval.wildcard).sorted = by_init_priority;
@@ -3090,7 +3282,9 @@ yyreduce:
     break;
 
   case 126:
-#line 512 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 516 "ldgram.y"
     {
 			  struct flag_info_list *n;
 			  n = ((struct flag_info_list *) xmalloc (sizeof *n));
@@ -3111,7 +3305,9 @@ yyreduce:
     break;
 
   case 127:
-#line 530 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 534 "ldgram.y"
     {
 			  struct flag_info_list *n;
 			  n = ((struct flag_info_list *) xmalloc (sizeof *n));
@@ -3132,7 +3328,9 @@ yyreduce:
     break;
 
   case 128:
-#line 551 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 555 "ldgram.y"
     {
 			  struct flag_info *n;
 			  n = ((struct flag_info *) xmalloc (sizeof *n));
@@ -3145,7 +3343,9 @@ yyreduce:
     break;
 
   case 129:
-#line 564 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 568 "ldgram.y"
     {
 			  struct name_list *tmp;
 			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
@@ -3156,7 +3356,9 @@ yyreduce:
     break;
 
   case 130:
-#line 573 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 577 "ldgram.y"
     {
 			  struct name_list *tmp;
 			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
@@ -3167,7 +3369,9 @@ yyreduce:
     break;
 
   case 131:
-#line 584 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 588 "ldgram.y"
     {
 			  struct wildcard_list *tmp;
 			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
@@ -3178,7 +3382,9 @@ yyreduce:
     break;
 
   case 132:
-#line 593 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 597 "ldgram.y"
     {
 			  struct wildcard_list *tmp;
 			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
@@ -3189,7 +3395,9 @@ yyreduce:
     break;
 
   case 133:
-#line 604 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 608 "ldgram.y"
     {
 			  struct wildcard_spec tmp;
 			  tmp.name = (yyvsp[(1) - (1)].name);
@@ -3201,7 +3409,9 @@ yyreduce:
     break;
 
   case 134:
-#line 613 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 617 "ldgram.y"
     {
 			  struct wildcard_spec tmp;
 			  tmp.name = (yyvsp[(2) - (2)].name);
@@ -3213,14 +3423,18 @@ yyreduce:
     break;
 
   case 135:
-#line 622 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 626 "ldgram.y"
     {
 			  lang_add_wild (NULL, (yyvsp[(2) - (3)].wildcard_list), ldgram_had_keep);
 			}
     break;
 
   case 136:
-#line 626 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 630 "ldgram.y"
     {
 			  struct wildcard_spec tmp;
 			  tmp.name = NULL;
@@ -3232,14 +3446,18 @@ yyreduce:
     break;
 
   case 137:
-#line 635 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 639 "ldgram.y"
     {
 			  lang_add_wild (&(yyvsp[(1) - (4)].wildcard), (yyvsp[(3) - (4)].wildcard_list), ldgram_had_keep);
 			}
     break;
 
   case 138:
-#line 639 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 643 "ldgram.y"
     {
 			  (yyvsp[(2) - (5)].wildcard).section_flag_list = (yyvsp[(1) - (5)].flag_info);
 			  lang_add_wild (&(yyvsp[(2) - (5)].wildcard), (yyvsp[(4) - (5)].wildcard_list), ldgram_had_keep);
@@ -3247,24 +3465,32 @@ yyreduce:
     break;
 
   case 140:
-#line 648 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 652 "ldgram.y"
     { ldgram_had_keep = TRUE; }
     break;
 
   case 141:
-#line 650 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 654 "ldgram.y"
     { ldgram_had_keep = FALSE; }
     break;
 
   case 143:
-#line 656 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 660 "ldgram.y"
     {
  		lang_add_attribute(lang_object_symbols_statement_enum);
 	      	}
     break;
 
   case 145:
-#line 661 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 665 "ldgram.y"
     {
 
 		  lang_add_attribute(lang_constructors_statement_enum);
@@ -3272,7 +3498,9 @@ yyreduce:
     break;
 
   case 146:
-#line 666 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 670 "ldgram.y"
     {
 		  constructors_sorted = TRUE;
 		  lang_add_attribute (lang_constructors_statement_enum);
@@ -3280,131 +3508,179 @@ yyreduce:
     break;
 
   case 148:
-#line 672 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 676 "ldgram.y"
     {
 			  lang_add_data ((int) (yyvsp[(1) - (4)].integer), (yyvsp[(3) - (4)].etree));
 			}
     break;
 
   case 149:
-#line 677 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 681 "ldgram.y"
     {
 			  lang_add_fill ((yyvsp[(3) - (4)].fill));
 			}
     break;
 
   case 150:
-#line 680 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 684 "ldgram.y"
     {ldlex_expression ();}
     break;
 
   case 151:
-#line 681 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 685 "ldgram.y"
     { ldlex_popstate ();
 			  lang_add_assignment (exp_assert ((yyvsp[(4) - (8)].etree), (yyvsp[(6) - (8)].name))); }
     break;
 
   case 152:
-#line 684 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 688 "ldgram.y"
     { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
     break;
 
   case 153:
-#line 686 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 690 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
   case 158:
-#line 701 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 705 "ldgram.y"
     { (yyval.integer) = (yyvsp[(1) - (1)].token); }
     break;
 
   case 159:
-#line 703 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 707 "ldgram.y"
     { (yyval.integer) = (yyvsp[(1) - (1)].token); }
     break;
 
   case 160:
-#line 705 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 709 "ldgram.y"
     { (yyval.integer) = (yyvsp[(1) - (1)].token); }
     break;
 
   case 161:
-#line 707 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 711 "ldgram.y"
     { (yyval.integer) = (yyvsp[(1) - (1)].token); }
     break;
 
   case 162:
-#line 709 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 713 "ldgram.y"
     { (yyval.integer) = (yyvsp[(1) - (1)].token); }
     break;
 
   case 163:
-#line 714 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 718 "ldgram.y"
     {
 		  (yyval.fill) = exp_get_fill ((yyvsp[(1) - (1)].etree), 0, "fill value");
 		}
     break;
 
   case 164:
-#line 721 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 725 "ldgram.y"
     { (yyval.fill) = (yyvsp[(2) - (2)].fill); }
     break;
 
   case 165:
-#line 722 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 726 "ldgram.y"
     { (yyval.fill) = (fill_type *) 0; }
     break;
 
   case 166:
-#line 727 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 731 "ldgram.y"
     { (yyval.token) = '+'; }
     break;
 
   case 167:
-#line 729 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 733 "ldgram.y"
     { (yyval.token) = '-'; }
     break;
 
   case 168:
-#line 731 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 735 "ldgram.y"
     { (yyval.token) = '*'; }
     break;
 
   case 169:
-#line 733 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 737 "ldgram.y"
     { (yyval.token) = '/'; }
     break;
 
   case 170:
-#line 735 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 739 "ldgram.y"
     { (yyval.token) = LSHIFT; }
     break;
 
   case 171:
-#line 737 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 741 "ldgram.y"
     { (yyval.token) = RSHIFT; }
     break;
 
   case 172:
-#line 739 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 743 "ldgram.y"
     { (yyval.token) = '&'; }
     break;
 
   case 173:
-#line 741 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 745 "ldgram.y"
     { (yyval.token) = '|'; }
     break;
 
   case 176:
-#line 751 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 755 "ldgram.y"
     {
 		  lang_add_assignment (exp_assign ((yyvsp[(1) - (3)].name), (yyvsp[(3) - (3)].etree)));
 		}
     break;
 
   case 177:
-#line 755 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 759 "ldgram.y"
     {
 		  lang_add_assignment (exp_assign ((yyvsp[(1) - (3)].name),
 						   exp_binop ((yyvsp[(2) - (3)].token),
@@ -3415,41 +3691,55 @@ yyreduce:
     break;
 
   case 178:
-#line 763 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 767 "ldgram.y"
     {
 		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), FALSE));
 		}
     break;
 
   case 179:
-#line 767 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 771 "ldgram.y"
     {
 		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), TRUE));
 		}
     break;
 
   case 187:
-#line 790 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 794 "ldgram.y"
     { region = lang_memory_region_lookup ((yyvsp[(1) - (1)].name), TRUE); }
     break;
 
   case 188:
-#line 793 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 797 "ldgram.y"
     {}
     break;
 
   case 189:
-#line 795 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 799 "ldgram.y"
     { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
     break;
 
   case 190:
-#line 797 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 801 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
   case 191:
-#line 802 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 806 "ldgram.y"
     {
 		  region->origin = exp_get_vma ((yyvsp[(3) - (3)].etree), 0, "origin");
 		  region->current = region->origin;
@@ -3457,71 +3747,97 @@ yyreduce:
     break;
 
   case 192:
-#line 810 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 814 "ldgram.y"
     {
 		  region->length = exp_get_vma ((yyvsp[(3) - (3)].etree), -1, "length");
 		}
     break;
 
   case 193:
-#line 817 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 821 "ldgram.y"
     { /* dummy action to avoid bison 1.25 error message */ }
     break;
 
   case 197:
-#line 828 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 832 "ldgram.y"
     { lang_set_flags (region, (yyvsp[(1) - (1)].name), 0); }
     break;
 
   case 198:
-#line 830 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 834 "ldgram.y"
     { lang_set_flags (region, (yyvsp[(2) - (2)].name), 1); }
     break;
 
   case 199:
-#line 835 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 839 "ldgram.y"
     { lang_startup((yyvsp[(3) - (4)].name)); }
     break;
 
   case 201:
-#line 841 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 845 "ldgram.y"
     { ldemul_hll((char *)NULL); }
     break;
 
   case 202:
-#line 846 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 850 "ldgram.y"
     { ldemul_hll((yyvsp[(3) - (3)].name)); }
     break;
 
   case 203:
-#line 848 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 852 "ldgram.y"
     { ldemul_hll((yyvsp[(1) - (1)].name)); }
     break;
 
   case 205:
-#line 856 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 860 "ldgram.y"
     { ldemul_syslib((yyvsp[(3) - (3)].name)); }
     break;
 
   case 207:
-#line 862 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 866 "ldgram.y"
     { lang_float(TRUE); }
     break;
 
   case 208:
-#line 864 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 868 "ldgram.y"
     { lang_float(FALSE); }
     break;
 
   case 209:
-#line 869 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 873 "ldgram.y"
     {
 		  (yyval.nocrossref) = NULL;
 		}
     break;
 
   case 210:
-#line 873 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 877 "ldgram.y"
     {
 		  struct lang_nocrossref *n;
 
@@ -3533,7 +3849,9 @@ yyreduce:
     break;
 
   case 211:
-#line 882 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 886 "ldgram.y"
     {
 		  struct lang_nocrossref *n;
 
@@ -3545,212 +3863,296 @@ yyreduce:
     break;
 
   case 212:
-#line 892 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 896 "ldgram.y"
     { ldlex_expression (); }
     break;
 
   case 213:
-#line 894 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 898 "ldgram.y"
     { ldlex_popstate (); (yyval.etree)=(yyvsp[(2) - (2)].etree);}
     break;
 
   case 214:
-#line 899 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 903 "ldgram.y"
     { (yyval.etree) = exp_unop ('-', (yyvsp[(2) - (2)].etree)); }
     break;
 
   case 215:
-#line 901 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 905 "ldgram.y"
     { (yyval.etree) = (yyvsp[(2) - (3)].etree); }
     break;
 
   case 216:
-#line 903 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 907 "ldgram.y"
     { (yyval.etree) = exp_unop ((int) (yyvsp[(1) - (4)].integer),(yyvsp[(3) - (4)].etree)); }
     break;
 
   case 217:
-#line 905 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 909 "ldgram.y"
     { (yyval.etree) = exp_unop ('!', (yyvsp[(2) - (2)].etree)); }
     break;
 
   case 218:
-#line 907 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 911 "ldgram.y"
     { (yyval.etree) = (yyvsp[(2) - (2)].etree); }
     break;
 
   case 219:
-#line 909 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 913 "ldgram.y"
     { (yyval.etree) = exp_unop ('~', (yyvsp[(2) - (2)].etree));}
     break;
 
   case 220:
-#line 912 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 916 "ldgram.y"
     { (yyval.etree) = exp_binop ('*', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 221:
-#line 914 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 918 "ldgram.y"
     { (yyval.etree) = exp_binop ('/', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 222:
-#line 916 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 920 "ldgram.y"
     { (yyval.etree) = exp_binop ('%', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 223:
-#line 918 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 922 "ldgram.y"
     { (yyval.etree) = exp_binop ('+', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 224:
-#line 920 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 924 "ldgram.y"
     { (yyval.etree) = exp_binop ('-' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 225:
-#line 922 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 926 "ldgram.y"
     { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 226:
-#line 924 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 928 "ldgram.y"
     { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 227:
-#line 926 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 930 "ldgram.y"
     { (yyval.etree) = exp_binop (EQ , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 228:
-#line 928 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 932 "ldgram.y"
     { (yyval.etree) = exp_binop (NE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 229:
-#line 930 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 934 "ldgram.y"
     { (yyval.etree) = exp_binop (LE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 230:
-#line 932 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 936 "ldgram.y"
     { (yyval.etree) = exp_binop (GE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 231:
-#line 934 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 938 "ldgram.y"
     { (yyval.etree) = exp_binop ('<' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 232:
-#line 936 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 940 "ldgram.y"
     { (yyval.etree) = exp_binop ('>' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 233:
-#line 938 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 942 "ldgram.y"
     { (yyval.etree) = exp_binop ('&' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 234:
-#line 940 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 944 "ldgram.y"
     { (yyval.etree) = exp_binop ('^' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 235:
-#line 942 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 946 "ldgram.y"
     { (yyval.etree) = exp_binop ('|' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 236:
-#line 944 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 948 "ldgram.y"
     { (yyval.etree) = exp_trinop ('?' , (yyvsp[(1) - (5)].etree), (yyvsp[(3) - (5)].etree), (yyvsp[(5) - (5)].etree)); }
     break;
 
   case 237:
-#line 946 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 950 "ldgram.y"
     { (yyval.etree) = exp_binop (ANDAND , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 238:
-#line 948 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 952 "ldgram.y"
     { (yyval.etree) = exp_binop (OROR , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
     break;
 
   case 239:
-#line 950 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 954 "ldgram.y"
     { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[(3) - (4)].name)); }
     break;
 
   case 240:
-#line 952 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 956 "ldgram.y"
     { (yyval.etree) = exp_bigintop ((yyvsp[(1) - (1)].bigint).integer, (yyvsp[(1) - (1)].bigint).str); }
     break;
 
   case 241:
-#line 954 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 958 "ldgram.y"
     { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
     break;
 
   case 242:
-#line 957 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 961 "ldgram.y"
     { (yyval.etree) = exp_nameop (ALIGNOF,(yyvsp[(3) - (4)].name)); }
     break;
 
   case 243:
-#line 959 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 963 "ldgram.y"
     { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[(3) - (4)].name)); }
     break;
 
   case 244:
-#line 961 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 965 "ldgram.y"
     { (yyval.etree) = exp_nameop (ADDR,(yyvsp[(3) - (4)].name)); }
     break;
 
   case 245:
-#line 963 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 967 "ldgram.y"
     { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[(3) - (4)].name)); }
     break;
 
   case 246:
-#line 965 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 969 "ldgram.y"
     { (yyval.etree) = exp_nameop (CONSTANT,(yyvsp[(3) - (4)].name)); }
     break;
 
   case 247:
-#line 967 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 971 "ldgram.y"
     { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[(3) - (4)].etree)); }
     break;
 
   case 248:
-#line 969 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 973 "ldgram.y"
     { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
     break;
 
   case 249:
-#line 971 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 975 "ldgram.y"
     { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[(3) - (6)].etree),(yyvsp[(5) - (6)].etree)); }
     break;
 
   case 250:
-#line 973 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 977 "ldgram.y"
     { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree)); }
     break;
 
   case 251:
-#line 975 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 979 "ldgram.y"
     { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[(5) - (6)].etree), (yyvsp[(3) - (6)].etree)); }
     break;
 
   case 252:
-#line 977 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 981 "ldgram.y"
     { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[(3) - (4)].etree)); }
     break;
 
   case 253:
-#line 979 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 983 "ldgram.y"
     { /* The operands to the expression node are
 			     placed in the opposite order from the way
 			     in which they appear in the script as
@@ -3762,112 +4164,170 @@ yyreduce:
     break;
 
   case 254:
-#line 988 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 992 "ldgram.y"
     { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
     break;
 
   case 255:
-#line 990 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 994 "ldgram.y"
     { (yyval.etree) = exp_nameop (NAME,(yyvsp[(1) - (1)].name)); }
     break;
 
   case 256:
-#line 992 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 996 "ldgram.y"
     { (yyval.etree) = exp_binop (MAX_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
     break;
 
   case 257:
-#line 994 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 998 "ldgram.y"
     { (yyval.etree) = exp_binop (MIN_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
     break;
 
   case 258:
-#line 996 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1000 "ldgram.y"
     { (yyval.etree) = exp_assert ((yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].name)); }
     break;
 
   case 259:
-#line 998 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1002 "ldgram.y"
     { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[(3) - (4)].name)); }
     break;
 
   case 260:
-#line 1000 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1004 "ldgram.y"
     { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[(3) - (4)].name)); }
     break;
 
   case 261:
-#line 1005 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1009 "ldgram.y"
     { (yyval.name) = (yyvsp[(3) - (3)].name); }
     break;
 
   case 262:
-#line 1006 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1010 "ldgram.y"
     { (yyval.name) = 0; }
     break;
 
   case 263:
-#line 1010 "ldgram.y"
-    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
+
+/* Line 1464 of yacc.c  */
+#line 1014 "ldgram.y"
+    { (yyval.name) = (yyvsp[(3) - (3)].name); /* overflow method 1 */ }
     break;
 
   case 264:
-#line 1011 "ldgram.y"
-    { (yyval.etree) = 0; }
+
+/* Line 1464 of yacc.c  */
+#line 1015 "ldgram.y"
+    { (yyval.name) = 0; /* overflow method 2 */  }
     break;
 
   case 265:
-#line 1015 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1020 "ldgram.y"
     { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
     break;
 
   case 266:
-#line 1016 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1021 "ldgram.y"
     { (yyval.etree) = 0; }
     break;
 
   case 267:
-#line 1020 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1025 "ldgram.y"
     { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
     break;
 
   case 268:
-#line 1021 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1026 "ldgram.y"
     { (yyval.etree) = 0; }
     break;
 
   case 269:
-#line 1025 "ldgram.y"
-    { (yyval.token) = ONLY_IF_RO; }
+
+/* Line 1464 of yacc.c  */
+#line 1030 "ldgram.y"
+    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
     break;
 
   case 270:
-#line 1026 "ldgram.y"
-    { (yyval.token) = ONLY_IF_RW; }
+
+/* Line 1464 of yacc.c  */
+#line 1031 "ldgram.y"
+    { (yyval.etree) = 0; }
     break;
 
   case 271:
-#line 1027 "ldgram.y"
-    { (yyval.token) = SPECIAL; }
+
+/* Line 1464 of yacc.c  */
+#line 1035 "ldgram.y"
+    { (yyval.token) = ONLY_IF_RO; }
     break;
 
   case 272:
-#line 1028 "ldgram.y"
-    { (yyval.token) = 0; }
+
+/* Line 1464 of yacc.c  */
+#line 1036 "ldgram.y"
+    { (yyval.token) = ONLY_IF_RW; }
     break;
 
   case 273:
-#line 1031 "ldgram.y"
-    { ldlex_expression(); }
+
+/* Line 1464 of yacc.c  */
+#line 1037 "ldgram.y"
+    { (yyval.token) = SPECIAL; }
     break;
 
   case 274:
-#line 1035 "ldgram.y"
-    { ldlex_popstate (); ldlex_script (); }
+
+/* Line 1464 of yacc.c  */
+#line 1038 "ldgram.y"
+    { (yyval.token) = 0; }
     break;
 
   case 275:
-#line 1038 "ldgram.y"
+
+/* Line 1464 of yacc.c  */
+#line 1041 "ldgram.y"
+    { ldlex_expression(); }
+    break;
+
+  case 276:
+
+/* Line 1464 of yacc.c  */
+#line 1045 "ldgram.y"
+    { ldlex_popstate (); ldlex_script (); }
+    break;
+
+  case 277:
+
+/* Line 1464 of yacc.c  */
+#line 1048 "ldgram.y"
     {
 			  lang_enter_output_section_statement((yyvsp[(1) - (9)].name), (yyvsp[(3) - (9)].etree),
 							      sectype,
@@ -3875,172 +4335,234 @@ yyreduce:
 			}
     break;
 
-  case 276:
-#line 1044 "ldgram.y"
+  case 278:
+
+/* Line 1464 of yacc.c  */
+#line 1054 "ldgram.y"
     { ldlex_popstate (); ldlex_expression (); }
     break;
 
-  case 277:
-#line 1046 "ldgram.y"
+  case 279:
+
+/* Line 1464 of yacc.c  */
+#line 1056 "ldgram.y"
     {
 		  ldlex_popstate ();
-		  lang_leave_output_section_statement ((yyvsp[(17) - (17)].fill), (yyvsp[(14) - (17)].name), (yyvsp[(16) - (17)].section_phdr), (yyvsp[(15) - (17)].name));
+		  lang_leave_output_section_statement ((yyvsp[(17) - (18)].fill), (yyvsp[(14) - (18)].name), (yyvsp[(16) - (18)].section_phdr), (yyvsp[(15) - (18)].name), (yyvsp[(18) - (18)].name));
 		}
     break;
 
-  case 278:
-#line 1051 "ldgram.y"
+  case 280:
+
+/* Line 1464 of yacc.c  */
+#line 1061 "ldgram.y"
     {}
     break;
 
-  case 279:
-#line 1053 "ldgram.y"
+  case 281:
+
+/* Line 1464 of yacc.c  */
+#line 1063 "ldgram.y"
     { ldlex_expression (); }
     break;
 
-  case 280:
-#line 1055 "ldgram.y"
+  case 282:
+
+/* Line 1464 of yacc.c  */
+#line 1065 "ldgram.y"
     { ldlex_popstate (); ldlex_script (); }
     break;
 
-  case 281:
-#line 1057 "ldgram.y"
+  case 283:
+
+/* Line 1464 of yacc.c  */
+#line 1067 "ldgram.y"
     {
 			  lang_enter_overlay ((yyvsp[(3) - (8)].etree), (yyvsp[(6) - (8)].etree));
 			}
     break;
 
-  case 282:
-#line 1062 "ldgram.y"
+  case 284:
+
+/* Line 1464 of yacc.c  */
+#line 1072 "ldgram.y"
     { ldlex_popstate (); ldlex_expression (); }
     break;
 
-  case 283:
-#line 1064 "ldgram.y"
+  case 285:
+
+/* Line 1464 of yacc.c  */
+#line 1074 "ldgram.y"
     {
 			  ldlex_popstate ();
-			  lang_leave_overlay ((yyvsp[(5) - (16)].etree), (int) (yyvsp[(4) - (16)].integer),
-					      (yyvsp[(16) - (16)].fill), (yyvsp[(13) - (16)].name), (yyvsp[(15) - (16)].section_phdr), (yyvsp[(14) - (16)].name));
+			  lang_leave_overlay ((yyvsp[(5) - (17)].etree), (int) (yyvsp[(4) - (17)].integer),
+					      (yyvsp[(16) - (17)].fill), (yyvsp[(13) - (17)].name), (yyvsp[(15) - (17)].section_phdr), (yyvsp[(14) - (17)].name), (yyvsp[(17) - (17)].name));
 			}
     break;
 
-  case 285:
-#line 1074 "ldgram.y"
+  case 287:
+
+/* Line 1464 of yacc.c  */
+#line 1084 "ldgram.y"
     { ldlex_expression (); }
     break;
 
-  case 286:
-#line 1076 "ldgram.y"
+  case 288:
+
+/* Line 1464 of yacc.c  */
+#line 1086 "ldgram.y"
     {
 		  ldlex_popstate ();
 		  lang_add_assignment (exp_assign (".", (yyvsp[(3) - (3)].etree)));
 		}
     break;
 
-  case 288:
-#line 1082 "ldgram.y"
+  case 290:
+
+/* Line 1464 of yacc.c  */
+#line 1092 "ldgram.y"
     { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
     break;
 
-  case 289:
-#line 1084 "ldgram.y"
+  case 291:
+
+/* Line 1464 of yacc.c  */
+#line 1094 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
-  case 290:
-#line 1088 "ldgram.y"
+  case 292:
+
+/* Line 1464 of yacc.c  */
+#line 1098 "ldgram.y"
     { sectype = noload_section; }
     break;
 
-  case 291:
-#line 1089 "ldgram.y"
+  case 293:
+
+/* Line 1464 of yacc.c  */
+#line 1099 "ldgram.y"
     { sectype = noalloc_section; }
     break;
 
-  case 292:
-#line 1090 "ldgram.y"
+  case 294:
+
+/* Line 1464 of yacc.c  */
+#line 1100 "ldgram.y"
     { sectype = noalloc_section; }
     break;
 
-  case 293:
-#line 1091 "ldgram.y"
+  case 295:
+
+/* Line 1464 of yacc.c  */
+#line 1101 "ldgram.y"
     { sectype = noalloc_section; }
     break;
 
-  case 294:
-#line 1092 "ldgram.y"
+  case 296:
+
+/* Line 1464 of yacc.c  */
+#line 1102 "ldgram.y"
     { sectype = noalloc_section; }
     break;
 
-  case 296:
-#line 1097 "ldgram.y"
+  case 298:
+
+/* Line 1464 of yacc.c  */
+#line 1107 "ldgram.y"
     { sectype = normal_section; }
     break;
 
-  case 297:
-#line 1098 "ldgram.y"
+  case 299:
+
+/* Line 1464 of yacc.c  */
+#line 1108 "ldgram.y"
     { sectype = normal_section; }
     break;
 
-  case 298:
-#line 1102 "ldgram.y"
+  case 300:
+
+/* Line 1464 of yacc.c  */
+#line 1112 "ldgram.y"
     { (yyval.etree) = (yyvsp[(1) - (3)].etree); }
     break;
 
-  case 299:
-#line 1103 "ldgram.y"
+  case 301:
+
+/* Line 1464 of yacc.c  */
+#line 1113 "ldgram.y"
     { (yyval.etree) = (etree_type *)NULL;  }
     break;
 
-  case 300:
-#line 1108 "ldgram.y"
+  case 302:
+
+/* Line 1464 of yacc.c  */
+#line 1118 "ldgram.y"
     { (yyval.etree) = (yyvsp[(3) - (6)].etree); }
     break;
 
-  case 301:
-#line 1110 "ldgram.y"
+  case 303:
+
+/* Line 1464 of yacc.c  */
+#line 1120 "ldgram.y"
     { (yyval.etree) = (yyvsp[(3) - (10)].etree); }
     break;
 
-  case 302:
-#line 1114 "ldgram.y"
+  case 304:
+
+/* Line 1464 of yacc.c  */
+#line 1124 "ldgram.y"
     { (yyval.etree) = (yyvsp[(1) - (2)].etree); }
     break;
 
-  case 303:
-#line 1115 "ldgram.y"
+  case 305:
+
+/* Line 1464 of yacc.c  */
+#line 1125 "ldgram.y"
     { (yyval.etree) = (etree_type *) NULL;  }
     break;
 
-  case 304:
-#line 1120 "ldgram.y"
+  case 306:
+
+/* Line 1464 of yacc.c  */
+#line 1130 "ldgram.y"
     { (yyval.integer) = 0; }
     break;
 
-  case 305:
-#line 1122 "ldgram.y"
+  case 307:
+
+/* Line 1464 of yacc.c  */
+#line 1132 "ldgram.y"
     { (yyval.integer) = 1; }
     break;
 
-  case 306:
-#line 1127 "ldgram.y"
+  case 308:
+
+/* Line 1464 of yacc.c  */
+#line 1137 "ldgram.y"
     { (yyval.name) = (yyvsp[(2) - (2)].name); }
     break;
 
-  case 307:
-#line 1128 "ldgram.y"
+  case 309:
+
+/* Line 1464 of yacc.c  */
+#line 1138 "ldgram.y"
     { (yyval.name) = DEFAULT_MEMORY_REGION; }
     break;
 
-  case 308:
-#line 1133 "ldgram.y"
+  case 310:
+
+/* Line 1464 of yacc.c  */
+#line 1143 "ldgram.y"
     {
 		  (yyval.section_phdr) = NULL;
 		}
     break;
 
-  case 309:
-#line 1137 "ldgram.y"
+  case 311:
+
+/* Line 1464 of yacc.c  */
+#line 1147 "ldgram.y"
     {
 		  struct lang_output_section_phdr_list *n;
 
@@ -4053,47 +4575,61 @@ yyreduce:
 		}
     break;
 
-  case 311:
-#line 1153 "ldgram.y"
+  case 313:
+
+/* Line 1464 of yacc.c  */
+#line 1163 "ldgram.y"
     {
 			  ldlex_script ();
 			  lang_enter_overlay_section ((yyvsp[(2) - (2)].name));
 			}
     break;
 
-  case 312:
-#line 1158 "ldgram.y"
+  case 314:
+
+/* Line 1464 of yacc.c  */
+#line 1168 "ldgram.y"
     { ldlex_popstate (); ldlex_expression (); }
     break;
 
-  case 313:
-#line 1160 "ldgram.y"
+  case 315:
+
+/* Line 1464 of yacc.c  */
+#line 1170 "ldgram.y"
     {
 			  ldlex_popstate ();
 			  lang_leave_overlay_section ((yyvsp[(9) - (9)].fill), (yyvsp[(8) - (9)].section_phdr));
 			}
     break;
 
-  case 318:
-#line 1177 "ldgram.y"
+  case 320:
+
+/* Line 1464 of yacc.c  */
+#line 1187 "ldgram.y"
     { ldlex_expression (); }
     break;
 
-  case 319:
-#line 1178 "ldgram.y"
+  case 321:
+
+/* Line 1464 of yacc.c  */
+#line 1188 "ldgram.y"
     { ldlex_popstate (); }
     break;
 
-  case 320:
-#line 1180 "ldgram.y"
+  case 322:
+
+/* Line 1464 of yacc.c  */
+#line 1190 "ldgram.y"
     {
 		  lang_new_phdr ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].etree), (yyvsp[(4) - (6)].phdr).filehdr, (yyvsp[(4) - (6)].phdr).phdrs, (yyvsp[(4) - (6)].phdr).at,
 				 (yyvsp[(4) - (6)].phdr).flags);
 		}
     break;
 
-  case 321:
-#line 1188 "ldgram.y"
+  case 323:
+
+/* Line 1464 of yacc.c  */
+#line 1198 "ldgram.y"
     {
 		  (yyval.etree) = (yyvsp[(1) - (1)].etree);
 
@@ -4136,15 +4672,19 @@ yyreduce:
 		}
     break;
 
-  case 322:
-#line 1232 "ldgram.y"
+  case 324:
+
+/* Line 1464 of yacc.c  */
+#line 1242 "ldgram.y"
     {
 		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
 		}
     break;
 
-  case 323:
-#line 1236 "ldgram.y"
+  case 325:
+
+/* Line 1464 of yacc.c  */
+#line 1246 "ldgram.y"
     {
 		  (yyval.phdr) = (yyvsp[(3) - (3)].phdr);
 		  if (strcmp ((yyvsp[(1) - (3)].name), "FILEHDR") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
@@ -4158,189 +4698,241 @@ yyreduce:
 		}
     break;
 
-  case 324:
-#line 1248 "ldgram.y"
+  case 326:
+
+/* Line 1464 of yacc.c  */
+#line 1258 "ldgram.y"
     {
 		  (yyval.phdr) = (yyvsp[(5) - (5)].phdr);
 		  (yyval.phdr).at = (yyvsp[(3) - (5)].etree);
 		}
     break;
 
-  case 325:
-#line 1256 "ldgram.y"
+  case 327:
+
+/* Line 1464 of yacc.c  */
+#line 1266 "ldgram.y"
     {
 		  (yyval.etree) = NULL;
 		}
     break;
 
-  case 326:
-#line 1260 "ldgram.y"
+  case 328:
+
+/* Line 1464 of yacc.c  */
+#line 1270 "ldgram.y"
     {
 		  (yyval.etree) = (yyvsp[(2) - (3)].etree);
 		}
     break;
 
-  case 327:
-#line 1266 "ldgram.y"
+  case 329:
+
+/* Line 1464 of yacc.c  */
+#line 1276 "ldgram.y"
     {
 		  ldlex_version_file ();
 		  PUSH_ERROR (_("dynamic list"));
 		}
     break;
 
-  case 328:
-#line 1271 "ldgram.y"
+  case 330:
+
+/* Line 1464 of yacc.c  */
+#line 1281 "ldgram.y"
     {
 		  ldlex_popstate ();
 		  POP_ERROR ();
 		}
     break;
 
-  case 332:
-#line 1288 "ldgram.y"
+  case 334:
+
+/* Line 1464 of yacc.c  */
+#line 1298 "ldgram.y"
     {
 		  lang_append_dynamic_list ((yyvsp[(1) - (2)].versyms));
 		}
     break;
 
-  case 333:
-#line 1296 "ldgram.y"
+  case 335:
+
+/* Line 1464 of yacc.c  */
+#line 1306 "ldgram.y"
     {
 		  ldlex_version_file ();
 		  PUSH_ERROR (_("VERSION script"));
 		}
     break;
 
-  case 334:
-#line 1301 "ldgram.y"
+  case 336:
+
+/* Line 1464 of yacc.c  */
+#line 1311 "ldgram.y"
     {
 		  ldlex_popstate ();
 		  POP_ERROR ();
 		}
     break;
 
-  case 335:
-#line 1310 "ldgram.y"
+  case 337:
+
+/* Line 1464 of yacc.c  */
+#line 1320 "ldgram.y"
     {
 		  ldlex_version_script ();
 		}
     break;
 
-  case 336:
-#line 1314 "ldgram.y"
+  case 338:
+
+/* Line 1464 of yacc.c  */
+#line 1324 "ldgram.y"
     {
 		  ldlex_popstate ();
 		}
     break;
 
-  case 339:
-#line 1326 "ldgram.y"
+  case 341:
+
+/* Line 1464 of yacc.c  */
+#line 1336 "ldgram.y"
     {
 		  lang_register_vers_node (NULL, (yyvsp[(2) - (4)].versnode), NULL);
 		}
     break;
 
-  case 340:
-#line 1330 "ldgram.y"
+  case 342:
+
+/* Line 1464 of yacc.c  */
+#line 1340 "ldgram.y"
     {
 		  lang_register_vers_node ((yyvsp[(1) - (5)].name), (yyvsp[(3) - (5)].versnode), NULL);
 		}
     break;
 
-  case 341:
-#line 1334 "ldgram.y"
+  case 343:
+
+/* Line 1464 of yacc.c  */
+#line 1344 "ldgram.y"
     {
 		  lang_register_vers_node ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].versnode), (yyvsp[(5) - (6)].deflist));
 		}
     break;
 
-  case 342:
-#line 1341 "ldgram.y"
+  case 344:
+
+/* Line 1464 of yacc.c  */
+#line 1351 "ldgram.y"
     {
 		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[(1) - (1)].name));
 		}
     break;
 
-  case 343:
-#line 1345 "ldgram.y"
+  case 345:
+
+/* Line 1464 of yacc.c  */
+#line 1355 "ldgram.y"
     {
 		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[(1) - (2)].deflist), (yyvsp[(2) - (2)].name));
 		}
     break;
 
-  case 344:
-#line 1352 "ldgram.y"
+  case 346:
+
+/* Line 1464 of yacc.c  */
+#line 1362 "ldgram.y"
     {
 		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
 		}
     break;
 
-  case 345:
-#line 1356 "ldgram.y"
+  case 347:
+
+/* Line 1464 of yacc.c  */
+#line 1366 "ldgram.y"
     {
 		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(1) - (2)].versyms), NULL);
 		}
     break;
 
-  case 346:
-#line 1360 "ldgram.y"
+  case 348:
+
+/* Line 1464 of yacc.c  */
+#line 1370 "ldgram.y"
     {
 		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (4)].versyms), NULL);
 		}
     break;
 
-  case 347:
-#line 1364 "ldgram.y"
+  case 349:
+
+/* Line 1464 of yacc.c  */
+#line 1374 "ldgram.y"
     {
 		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[(3) - (4)].versyms));
 		}
     break;
 
-  case 348:
-#line 1368 "ldgram.y"
+  case 350:
+
+/* Line 1464 of yacc.c  */
+#line 1378 "ldgram.y"
     {
 		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (8)].versyms), (yyvsp[(7) - (8)].versyms));
 		}
     break;
 
-  case 349:
-#line 1375 "ldgram.y"
+  case 351:
+
+/* Line 1464 of yacc.c  */
+#line 1385 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 350:
-#line 1379 "ldgram.y"
+  case 352:
+
+/* Line 1464 of yacc.c  */
+#line 1389 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, TRUE);
 		}
     break;
 
-  case 351:
-#line 1383 "ldgram.y"
+  case 353:
+
+/* Line 1464 of yacc.c  */
+#line 1393 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 352:
-#line 1387 "ldgram.y"
+  case 354:
+
+/* Line 1464 of yacc.c  */
+#line 1397 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, TRUE);
 		}
     break;
 
-  case 353:
-#line 1391 "ldgram.y"
+  case 355:
+
+/* Line 1464 of yacc.c  */
+#line 1401 "ldgram.y"
     {
 			  (yyval.name) = ldgram_vers_current_lang;
 			  ldgram_vers_current_lang = (yyvsp[(4) - (5)].name);
 			}
     break;
 
-  case 354:
-#line 1396 "ldgram.y"
+  case 356:
+
+/* Line 1464 of yacc.c  */
+#line 1406 "ldgram.y"
     {
 			  struct bfd_elf_version_expr *pat;
 			  for (pat = (yyvsp[(7) - (9)].versyms); pat->next != NULL; pat = pat->next);
@@ -4350,67 +4942,84 @@ yyreduce:
 			}
     break;
 
-  case 355:
-#line 1404 "ldgram.y"
+  case 357:
+
+/* Line 1464 of yacc.c  */
+#line 1414 "ldgram.y"
     {
 			  (yyval.name) = ldgram_vers_current_lang;
 			  ldgram_vers_current_lang = (yyvsp[(2) - (3)].name);
 			}
     break;
 
-  case 356:
-#line 1409 "ldgram.y"
+  case 358:
+
+/* Line 1464 of yacc.c  */
+#line 1419 "ldgram.y"
     {
 			  (yyval.versyms) = (yyvsp[(5) - (7)].versyms);
 			  ldgram_vers_current_lang = (yyvsp[(4) - (7)].name);
 			}
     break;
 
-  case 357:
-#line 1414 "ldgram.y"
+  case 359:
+
+/* Line 1464 of yacc.c  */
+#line 1424 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 358:
-#line 1418 "ldgram.y"
+  case 360:
+
+/* Line 1464 of yacc.c  */
+#line 1428 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "global", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 359:
-#line 1422 "ldgram.y"
+  case 361:
+
+/* Line 1464 of yacc.c  */
+#line 1432 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 360:
-#line 1426 "ldgram.y"
+  case 362:
+
+/* Line 1464 of yacc.c  */
+#line 1436 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "local", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 361:
-#line 1430 "ldgram.y"
+  case 363:
+
+/* Line 1464 of yacc.c  */
+#line 1440 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
-  case 362:
-#line 1434 "ldgram.y"
+  case 364:
+
+/* Line 1464 of yacc.c  */
+#line 1444 "ldgram.y"
     {
 		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "extern", ldgram_vers_current_lang, FALSE);
 		}
     break;
 
 
-/* Line 1267 of yacc.c.  */
-#line 4414 "ldgram.c"
+
+/* Line 1464 of yacc.c  */
+#line 5023 "ldgram.c"
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
@@ -4421,7 +5030,6 @@ yyreduce:
 
   *++yyvsp = yyval;
 
-
   /* Now `shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
@@ -4486,7 +5094,7 @@ yyerrlab:
 
   if (yyerrstatus == 3)
     {
-      /* If just tried and failed to reuse look-ahead token after an
+      /* If just tried and failed to reuse lookahead token after an
 	 error, discard it.  */
 
       if (yychar <= YYEOF)
@@ -4503,7 +5111,7 @@ yyerrlab:
 	}
     }
 
-  /* Else will try to reuse look-ahead token after shifting the error
+  /* Else will try to reuse lookahead token after shifting the error
      token.  */
   goto yyerrlab1;
 
@@ -4560,9 +5168,6 @@ yyerrlab1:
       YY_STACK_PRINT (yyss, yyssp);
     }
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
   *++yyvsp = yylval;
 
 
@@ -4587,7 +5192,7 @@ yyabortlab:
   yyresult = 1;
   goto yyreturn;
 
-#ifndef yyoverflow
+#if !defined(yyoverflow) || YYERROR_VERBOSE
 /*-------------------------------------------------.
 | yyexhaustedlab -- memory exhaustion comes here.  |
 `-------------------------------------------------*/
@@ -4598,7 +5203,7 @@ yyexhaustedlab:
 #endif
 
 yyreturn:
-  if (yychar != YYEOF && yychar != YYEMPTY)
+  if (yychar != YYEMPTY)
      yydestruct ("Cleanup: discarding lookahead",
 		 yytoken, &yylval);
   /* Do not reclaim the symbols of the rule which action triggered
@@ -4624,7 +5229,9 @@ yyreturn:
 }
 
 
-#line 1444 "ldgram.y"
+
+/* Line 1684 of yacc.c  */
+#line 1454 "ldgram.y"
 
 void
 yyerror(arg)
@@ -4639,3 +5246,4 @@ yyerror(arg)
      einfo ("%P%F:%S: %s\n", arg);
 }
 
+
diff --git a/ld/ldgram.h b/ld/ldgram.h
index 688128e..03fc6e4 100644
--- a/ld/ldgram.h
+++ b/ld/ldgram.h
@@ -1,24 +1,22 @@
-/* A Bison parser, made by GNU Bison 2.3.  */
+/* A Bison parser, made by GNU Bison 2.4.2.  */
 
 /* Skeleton interface for Bison's Yacc-like parsers in C
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
-   Free Software Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
+   
+      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
+   Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-
+   
    You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 51 Franklin Street, Fifth Floor,
-   Boston, MA 02110-1301, USA.  */
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -29,10 +27,11 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-
+   
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
+
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -122,47 +121,48 @@
      CONSTRUCTORS = 338,
      ALIGNMOD = 339,
      AT = 340,
-     SUBALIGN = 341,
-     PROVIDE = 342,
-     PROVIDE_HIDDEN = 343,
-     AS_NEEDED = 344,
-     CHIP = 345,
-     LIST = 346,
-     SECT = 347,
-     ABSOLUTE = 348,
-     LOAD = 349,
-     NEWLINE = 350,
-     ENDWORD = 351,
-     ORDER = 352,
-     NAMEWORD = 353,
-     ASSERT_K = 354,
-     FORMAT = 355,
-     PUBLIC = 356,
-     DEFSYMEND = 357,
-     BASE = 358,
-     ALIAS = 359,
-     TRUNCATE = 360,
-     REL = 361,
-     INPUT_SCRIPT = 362,
-     INPUT_MRI_SCRIPT = 363,
-     INPUT_DEFSYM = 364,
-     CASE = 365,
-     EXTERN = 366,
-     START = 367,
-     VERS_TAG = 368,
-     VERS_IDENTIFIER = 369,
-     GLOBAL = 370,
-     LOCAL = 371,
-     VERSIONK = 372,
-     INPUT_VERSION_SCRIPT = 373,
-     KEEP = 374,
-     ONLY_IF_RO = 375,
-     ONLY_IF_RW = 376,
-     SPECIAL = 377,
-     INPUT_SECTION_FLAGS = 378,
-     EXCLUDE_FILE = 379,
-     CONSTANT = 380,
-     INPUT_DYNAMIC_LIST = 381
+     OVERFLOW_INTO = 341,
+     SUBALIGN = 342,
+     PROVIDE = 343,
+     PROVIDE_HIDDEN = 344,
+     AS_NEEDED = 345,
+     CHIP = 346,
+     LIST = 347,
+     SECT = 348,
+     ABSOLUTE = 349,
+     LOAD = 350,
+     NEWLINE = 351,
+     ENDWORD = 352,
+     ORDER = 353,
+     NAMEWORD = 354,
+     ASSERT_K = 355,
+     FORMAT = 356,
+     PUBLIC = 357,
+     DEFSYMEND = 358,
+     BASE = 359,
+     ALIAS = 360,
+     TRUNCATE = 361,
+     REL = 362,
+     INPUT_SCRIPT = 363,
+     INPUT_MRI_SCRIPT = 364,
+     INPUT_DEFSYM = 365,
+     CASE = 366,
+     EXTERN = 367,
+     START = 368,
+     VERS_TAG = 369,
+     VERS_IDENTIFIER = 370,
+     GLOBAL = 371,
+     LOCAL = 372,
+     VERSIONK = 373,
+     INPUT_VERSION_SCRIPT = 374,
+     KEEP = 375,
+     ONLY_IF_RO = 376,
+     ONLY_IF_RW = 377,
+     SPECIAL = 378,
+     INPUT_SECTION_FLAGS = 379,
+     EXCLUDE_FILE = 380,
+     CONSTANT = 381,
+     INPUT_DYNAMIC_LIST = 382
    };
 #endif
 /* Tokens.  */
@@ -249,55 +249,59 @@
 #define CONSTRUCTORS 338
 #define ALIGNMOD 339
 #define AT 340
-#define SUBALIGN 341
-#define PROVIDE 342
-#define PROVIDE_HIDDEN 343
-#define AS_NEEDED 344
-#define CHIP 345
-#define LIST 346
-#define SECT 347
-#define ABSOLUTE 348
-#define LOAD 349
-#define NEWLINE 350
-#define ENDWORD 351
-#define ORDER 352
-#define NAMEWORD 353
-#define ASSERT_K 354
-#define FORMAT 355
-#define PUBLIC 356
-#define DEFSYMEND 357
-#define BASE 358
-#define ALIAS 359
-#define TRUNCATE 360
-#define REL 361
-#define INPUT_SCRIPT 362
-#define INPUT_MRI_SCRIPT 363
-#define INPUT_DEFSYM 364
-#define CASE 365
-#define EXTERN 366
-#define START 367
-#define VERS_TAG 368
-#define VERS_IDENTIFIER 369
-#define GLOBAL 370
-#define LOCAL 371
-#define VERSIONK 372
-#define INPUT_VERSION_SCRIPT 373
-#define KEEP 374
-#define ONLY_IF_RO 375
-#define ONLY_IF_RW 376
-#define SPECIAL 377
-#define INPUT_SECTION_FLAGS 378
-#define EXCLUDE_FILE 379
-#define CONSTANT 380
-#define INPUT_DYNAMIC_LIST 381
+#define OVERFLOW_INTO 341
+#define SUBALIGN 342
+#define PROVIDE 343
+#define PROVIDE_HIDDEN 344
+#define AS_NEEDED 345
+#define CHIP 346
+#define LIST 347
+#define SECT 348
+#define ABSOLUTE 349
+#define LOAD 350
+#define NEWLINE 351
+#define ENDWORD 352
+#define ORDER 353
+#define NAMEWORD 354
+#define ASSERT_K 355
+#define FORMAT 356
+#define PUBLIC 357
+#define DEFSYMEND 358
+#define BASE 359
+#define ALIAS 360
+#define TRUNCATE 361
+#define REL 362
+#define INPUT_SCRIPT 363
+#define INPUT_MRI_SCRIPT 364
+#define INPUT_DEFSYM 365
+#define CASE 366
+#define EXTERN 367
+#define START 368
+#define VERS_TAG 369
+#define VERS_IDENTIFIER 370
+#define GLOBAL 371
+#define LOCAL 372
+#define VERSIONK 373
+#define INPUT_VERSION_SCRIPT 374
+#define KEEP 375
+#define ONLY_IF_RO 376
+#define ONLY_IF_RW 377
+#define SPECIAL 378
+#define INPUT_SECTION_FLAGS 379
+#define EXCLUDE_FILE 380
+#define CONSTANT 381
+#define INPUT_DYNAMIC_LIST 382
 
 
 
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 62 "ldgram.y"
 {
+
+/* Line 1685 of yacc.c  */
+#line 65 "ldgram.y"
+
   bfd_vma integer;
   struct big_int
     {
@@ -326,14 +330,18 @@ typedef union YYSTYPE
   struct bfd_elf_version_deps *deflist;
   struct bfd_elf_version_expr *versyms;
   struct bfd_elf_version_tree *versnode;
-}
-/* Line 1529 of yacc.c.  */
-#line 332 "ldgram.h"
-	YYSTYPE;
+
+
+
+/* Line 1685 of yacc.c  */
+#line 338 "ldgram.h"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
-# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 extern YYSTYPE yylval;
 
+
+
diff --git a/ld/ldgram.y b/ld/ldgram.y
index 36ccb5b..12ef466 100644
--- a/ld/ldgram.y
+++ b/ld/ldgram.y
@@ -43,6 +43,9 @@
 #include "ldctor.h"
 #include "ldlex.h"
 
+#define YYDEBUG 1
+#define YYERROR_VERBOSE 1
+
 #ifndef YYDEBUG
 #define YYDEBUG 1
 #endif
@@ -99,6 +102,7 @@ static int error_index;
 %type <flag_info> sect_flags
 %type <name> memspec_opt casesymlist
 %type <name> memspec_at_opt
+%type <name> memspec_ovfl_opt
 %type <cname> wildcard_name
 %type <wildcard> wildcard_spec
 %token <bigint> INT
@@ -146,7 +150,7 @@ static int error_index;
 %token STARTUP HLL SYSLIB FLOAT NOFLOAT NOCROSSREFS
 %token ORIGIN FILL
 %token LENGTH CREATE_OBJECT_SYMBOLS INPUT GROUP OUTPUT CONSTRUCTORS
-%token ALIGNMOD AT SUBALIGN PROVIDE PROVIDE_HIDDEN AS_NEEDED
+%token ALIGNMOD AT OVERFLOW_INTO SUBALIGN PROVIDE PROVIDE_HIDDEN AS_NEEDED 
 %type <token> assign_op atype attributes_opt sect_constraint
 %type <name>  filename
 %token CHIP LIST SECT ABSOLUTE  LOAD NEWLINE ENDWORD ORDER NAMEWORD ASSERT_K
@@ -1006,6 +1010,12 @@ memspec_at_opt:
         |       { $$ = 0; }
         ;
 
+memspec_ovfl_opt:
+                OVERFLOW_INTO '>' NAME { $$ = $3; /* overflow method 1 */ }
+        |       { $$ = 0; /* overflow method 2 */  }
+        ;
+
+
 opt_at:
 		AT '(' exp ')' { $$ = $3; }
 	|	{ $$ = 0; }
@@ -1042,10 +1052,10 @@ section:	NAME 		{ ldlex_expression(); }
 			}
 		statement_list_opt
  		'}' { ldlex_popstate (); ldlex_expression (); }
-		memspec_opt memspec_at_opt phdr_opt fill_opt
+		memspec_opt memspec_at_opt phdr_opt fill_opt memspec_ovfl_opt
 		{
 		  ldlex_popstate ();
-		  lang_leave_output_section_statement ($17, $14, $16, $15);
+		  lang_leave_output_section_statement ($17, $14, $16, $15, $18);
 		}
 		opt_comma
 		{}
@@ -1060,11 +1070,11 @@ section:	NAME 		{ ldlex_expression(); }
 		overlay_section
 		'}'
 			{ ldlex_popstate (); ldlex_expression (); }
-		memspec_opt memspec_at_opt phdr_opt fill_opt
+		memspec_opt memspec_at_opt phdr_opt fill_opt memspec_ovfl_opt
 			{
 			  ldlex_popstate ();
 			  lang_leave_overlay ($5, (int) $4,
-					      $16, $13, $15, $14);
+					      $16, $13, $15, $14, $17);
 			}
 		opt_comma
 	|	/* The GROUP case is just enough to support the gcc
diff --git a/ld/ldlang.c b/ld/ldlang.c
index 2c56b56..2b09d34 100644
--- a/ld/ldlang.c
+++ b/ld/ldlang.c
@@ -70,6 +70,15 @@ static lang_statement_list_type *stat_save[10];
 static lang_statement_list_type **stat_save_ptr = &stat_save[0];
 static struct unique_sections *unique_section_list;
 static bfd_boolean ldlang_sysrooted_script = FALSE;
+static bfd_vma
+lang_size_sections_1
+  (lang_statement_union_type **head_ptr,
+   lang_statement_union_type ***tail_ptr,
+   lang_output_section_statement_type *output_section_statement,
+   fill_type *fill,
+   bfd_vma dot,
+   bfd_boolean *relax,
+   bfd_boolean check_regions);
 
 /* Forward declarations.  */
 static void exp_init_os (etree_type *);
@@ -950,8 +959,11 @@ lang_for_each_statement_worker (void (*func) (lang_statement_union_type *),
 	  break;
 	case lang_output_section_statement_enum:
 	  if (s->output_section_statement.constraint != -1)
+	  {
+//		  printf("\nprocessing output section %s\n\n", s->output_section_statement.name);
 	    lang_for_each_statement_worker
 	      (func, s->output_section_statement.children.head);
+	  }
 	  break;
 	case lang_wild_statement_enum:
 	  lang_for_each_statement_worker (func,
@@ -1844,11 +1856,11 @@ lang_insert_orphan (asection *s,
 				? after->lma_region->name_list.name
 				: NULL);
       lang_leave_output_section_statement (NULL, region, after->phdrs,
-					   lma_region);
+					   lma_region, NULL);
     }
   else
     lang_leave_output_section_statement (NULL, DEFAULT_MEMORY_REGION, NULL,
-					 NULL);
+					 NULL, NULL);
 
   if (ps != NULL && *ps == '\0')
     {
@@ -3734,6 +3746,7 @@ process_insert_statements (void)
 	     statement in the sequence we may be about to move.  */
 	  os = &(*s)->output_section_statement;
 
+//	  printf("process_insert_statements: os = %s last_os = %s, last_os->next = %s\n", os->name, (last_os)?last_os->name:"Null", (last_os && last_os->next)?last_os->next->name:"Null");
 	  ASSERT (last_os == NULL || last_os->next == os);
 	  last_os = os;
 
@@ -4840,11 +4853,337 @@ os_region_check (lang_output_section_statement_type *os,
     }
 }
 
+char * statement_types[] = {
+	"output_section",
+	"assignment_",
+	"input",
+	"address",
+	"wild",
+	"input_section",
+	"object_symbols",
+	"fill",
+	"data",
+	"reloc",
+	"target",
+	"output",
+	"padding",
+	"group",
+	"insert",
+	"constructors",
+};
+
+static void print_chain( lang_statement_union_type* sect_list, char* prefix )
+{
+	lang_statement_union_type *s;
+	for (s = sect_list; s != NULL; s = s->header.next)
+	{
+		printf("%sstatement: %s", prefix, statement_types[s->header.type] );
+		if ( s->header.type == lang_input_section_enum )
+		{
+			printf( " %s", ((lang_input_section_type*)s)->section->name );
+		}
+		else if ( s->header.type == lang_output_section_statement_enum )
+		{
+			printf( " %s", ((lang_output_section_statement_type*)s)->name );
+			printf("\n");
+			print_chain( ((lang_output_section_statement_type*)s)->children.head, "  " );
+		}
+		printf("\n");
+    }
+}
+
+static void
+verify_chain
+  (lang_statement_union_type **orig_list_head_ptr,
+		  lang_output_section_statement_type * output_section,
+		  asection * prev_input_section)
+{
+	if ( orig_list_head_ptr == NULL )
+	{
+		printf( "list head address is null\n");
+		ASSERT(0);
+	}
+
+	lang_statement_union_type * curr_statement = *orig_list_head_ptr;
+	lang_statement_union_type * prev_statement = NULL;
+
+	while ( curr_statement != NULL )
+	{
+		if ( ( prev_statement ) && ( prev_statement->header.next != curr_statement ) )
+		{
+			printf( "previous item next pointer not as expected" );
+			ASSERT(0);
+		}
+
+		switch  ( curr_statement->header.type )
+		{
+			case lang_input_section_enum:
+			{
+//				printf("input section %s\n",curr_statement->input_section.section->name );
+//				if ( curr_statement->input_section.section->prev != prev_input_section )
+//				{
+//					printf( "input section %s prev pointer not as expected\n", curr_statement->input_section.section->name );
+//					printf( "expected %s but got %s\n", prev_input_section->name, curr_statement->input_section.section->prev->name );
+//					ASSERT(0);
+//				}
+
+				asection * tmp = curr_statement->input_section.section;
+				while ( tmp != NULL )
+				{
+//					printf("is %s\n", tmp->name);
+					tmp = tmp->next;
+				}
+
+
+//				if ( (prev_input_section) && (prev_input_section->next != curr_statement->input_section.section ) )
+//				{
+//					printf( "previous input section %s next pointer not as expected\n", prev_input_section->name );
+//					printf( "expected %s but got %s\n", curr_statement->input_section.section->name, prev_input_section->next->name );
+//					ASSERT(0);
+//				}
+
+				if ( curr_statement->input_section.section->output_section != output_section->bfd_section )
+				{
+					printf( "wrong output section\n" );
+					printf( "expecting %s got %s\n", output_section->bfd_section->name, curr_statement->input_section.section->output_section->name );
+					ASSERT(0);
+				}
+
+				prev_input_section = curr_statement->input_section.section;
+			}
+			break;
+			case lang_assignment_statement_enum:
+			break;
+			case lang_padding_statement_enum:
+			break;
+			case lang_wild_statement_enum:
+			{
+//				verify_chain( &curr_statement->wild_statement.children.head, output_section, prev_input_section );
+			}
+			break;
+			default:
+			{
+				printf("unhandled header type %d\n", curr_statement->header.type);
+				ASSERT(0);
+			}
+			break;
+		}
+		prev_statement = curr_statement;
+		curr_statement = curr_statement->header.next;
+	}
+//	printf("successfully verified output section %s\n", output_section->name);
+}
+//lang_output_section_statement_enum,
+//lang_assignment_statement_enum,
+//lang_input_statement_enum,
+//lang_address_statement_enum,
+//lang_wild_statement_enum,
+//lang_input_section_enum,
+//lang_object_symbols_statement_enum,
+//lang_fill_statement_enum,
+//lang_data_statement_enum,
+//lang_reloc_statement_enum,
+//lang_target_statement_enum,
+//lang_output_statement_enum,
+//lang_padding_statement_enum,
+//lang_group_statement_enum,
+//lang_insert_statement_enum,
+//lang_constructors_statement_enum
+
+
+static int
+size_input_section_overflow_if_required
+  (lang_statement_union_type **orig_list_head_ptr,
+   lang_statement_union_type ***orig_list_tail_ptr,
+   lang_output_section_statement_type *_orig_output_section_statement,
+   lang_statement_union_type ** orig_current_statement_in,
+//   fill_type *fill,
+   bfd_vma dot,
+   bfd_vma newdot,
+   bfd_boolean *relax,
+   bfd_boolean check_regions)
+{
+	if ( ( _orig_output_section_statement->ovfl_section ) &&
+         ( ( ( newdot < _orig_output_section_statement->region->origin ) ||
+		     ( newdot - _orig_output_section_statement->region->origin > _orig_output_section_statement->region->length)
+		   ) &&
+		   ( (newdot != _orig_output_section_statement->region->origin + _orig_output_section_statement->region->length) ||
+			 (_orig_output_section_statement->bfd_section->vma == 0)
+		   )
+		 )
+	   )
+	  {
+
+		  lang_output_section_statement_type* ovfl_section = lang_output_section_statement_lookup (_orig_output_section_statement->ovfl_section, 0, FALSE);
+
+		  if ( ovfl_section == NULL )
+		  {
+			  einfo (_("%F%P: Unknown Overflow section %s\n"), _orig_output_section_statement->ovfl_section);
+			  return 0;
+		  }
+
+
+//		  verify_chain ( &_orig_output_section_statement->children.head, _orig_output_section_statement, NULL );
+//		  verify_chain ( &ovfl_section->children.head, ovfl_section, NULL );
+
+		  lang_statement_union_type * orig_current_statement = *orig_current_statement_in;
+			/* Advance 'current' item pointer to end of chain since chain has been truncated. */
+			while ( (*orig_current_statement_in)->header.next != NULL )
+			{
+				*orig_current_statement_in = (*orig_current_statement_in)->header.next;
+			}
+
+		  printf ("Region %s overflowed as requested from %s into %s - current size %d, size limit %d, tried to add %d bytes\n",
+							   _orig_output_section_statement->region->name_list.name,
+							   _orig_output_section_statement->name,
+							   _orig_output_section_statement->ovfl_section,
+							   (int)(dot - _orig_output_section_statement->region->origin),
+							   (int)_orig_output_section_statement->region->length,
+							   (int)(newdot - dot) );
+
+
+
+
+//		  printf ("list at start:\n");
+//		  print_chain( *head_ptr, "" );
+
+
+		  /* Initialise the overflow output section if it has not been done already */
+		  if (ovfl_section->bfd_section == NULL)
+		    init_os (ovfl_section, _orig_output_section_statement->bfd_section->flags);
+
+
+		  /* Find previous statement in original list */
+		  lang_statement_union_type * orig_list_prev_statement = *orig_list_head_ptr;
+		  while ( (orig_list_prev_statement != orig_current_statement ) && ( orig_list_prev_statement->header.next != orig_current_statement ) )
+		  {
+			  orig_list_prev_statement = orig_list_prev_statement->header.next;
+		  }
+
+		  int curr_is_only_in_orig_list = ( orig_list_prev_statement == orig_current_statement );
+
+		  /* Find the last statement in ovfl_section */
+		  lang_statement_union_type * ovfl_last_statement = ovfl_section->children.head;
+		  int ovfl_list_is_empty = ( ovfl_last_statement == NULL );
+		  while ( ( ovfl_last_statement != NULL ) && ( ovfl_last_statement->header.next != NULL ) )
+		  {
+			  ovfl_last_statement = ovfl_last_statement->header.next;
+		  }
+
+		  /* Truncate the current output section to prevent region overflow */
+		  if ( curr_is_only_in_orig_list )
+		  {
+			  /* current statement is the only one in the output section
+			   * Wipe this ouptut section as the statement will be moved */
+			  *orig_list_head_ptr = NULL;
+			  *orig_list_tail_ptr = NULL;
+		  }
+		  else
+		  {
+			  /* Cut the linked list before current statement */
+			  orig_list_prev_statement->header.next = NULL;
+			  *orig_list_tail_ptr = &orig_list_prev_statement->header.next;
+		  }
+
+
+		  if ( ovfl_list_is_empty )
+		  {
+			  /* Initialise the list to the grafted item */
+			  ovfl_section->children.head = orig_current_statement;
+
+			  /* Point the overflow section tail to the statement being grafted */
+			  ovfl_section->children.tail = &orig_current_statement->header.next;
+
+			  /* Cut the BFD forward link to the grafted statement from the original previous statement */
+//  			  if ( (*orig_current_statement)->input_section.section->prev )
+//  			  {
+//  				  (*orig_current_statement)->input_section.section->prev->next = NULL;
+//  			  }
+
+			  /* Zero the BFD backward link of the grafted statement */
+//			  (*orig_current_statement)->input_section.section->prev = NULL;
+
+		  }
+		  else
+		  {
+			  /* Point the overflow section tail to the statement being grafted */
+			  *ovfl_section->children.tail = orig_current_statement;
+			  ovfl_section->children.tail = &orig_current_statement->header.next;
+
+			  /* Cut the BFD forward link to the grafted statement from the original previous statement */
+//			  if ( (*orig_current_statement)->input_section.section->prev )
+//			  {
+//				  (*orig_current_statement)->input_section.section->prev->next = NULL;
+//			  }
+
+			  /* Point the BFD backward link of the grafted statement to the last item in the overflow section */
+//			  (*orig_current_statement)->input_section.section->prev = ovfl_last_statement->input_section.section;
+
+		  }
+
+
+		  /* Graft remaining part of output section onto the specified overflow section */
+//				  lang_statement_union_type * orig_tail = *output_section_statement->ovfl_section->children.tail;
+
+//		  printf ("list after graft start:\n");
+//		  print_chain( *head_ptr, "" );
+
+
+
+
+		  /* The items that have been moved to the overflow list still point to their old BFD output section. Change these pointers to the overflow section */
+		  lang_statement_union_type * overflowed_list_curr_statement = ovfl_section->children.head;
+		  while ( overflowed_list_curr_statement->header.next != NULL )
+		  {
+			  if (overflowed_list_curr_statement->header.type == lang_input_section_enum)
+			  {
+				  overflowed_list_curr_statement->input_section.section->output_section =  ovfl_section->bfd_section;
+//				  printf("%s\n", overflowed_list_curr_statement->input_section.section->name);
+			  }
+			  overflowed_list_curr_statement = overflowed_list_curr_statement->header.next;
+		  }
+		  if (overflowed_list_curr_statement->header.type == lang_input_section_enum)
+		  {
+			  overflowed_list_curr_statement->input_section.section->output_section =  ovfl_section->bfd_section;
+		  }
+
+		  /* Update the overflow section tail pointer to the new end of list */
+		  ovfl_section->children.tail = &orig_list_prev_statement->header.next;
+
+//		  printf ("overflowed chain:\n");
+//		  print_chain( ovfl_section->children.head, "" );
+
+		  /* The output section that had statements added may have already been sized - resize it */
+//		  if (ovfl_section->bfd_section != NULL)
+//		  {
+//			lang_size_sections_1 (&ovfl_section, NULL, abs_output_section,
+//					ovfl_section->fill, 0, relax, check_regions);
+//		  }
+
+//		*s = NULL;
+
+		return 1;
+	}
+	return 0;
+}
+
+//static void move_input_sections( sect_list )
+//{
+//	lang_statement_union_type *s;
+//	for (s = sect_list; s != NULL; s = s->header.next)
+//	{
+//
+//	}
+//}
+
 /* Set the sizes for all the output sections.  */
 
+static int indent = 0;
+
 static bfd_vma
 lang_size_sections_1
-  (lang_statement_union_type **prev,
+  (lang_statement_union_type **head_ptr,
+   lang_statement_union_type ***tail_ptr,
    lang_output_section_statement_type *output_section_statement,
    fill_type *fill,
    bfd_vma dot,
@@ -4853,8 +5192,15 @@ lang_size_sections_1
 {
   lang_statement_union_type *s;
 
+  lang_statement_union_type **start = head_ptr;
+
+  bfd_vma new_dot = dot;
+  char bfd_section_size_needs_update = 0;
+
+  indent++;
+
   /* Size up the sections from their constituent parts.  */
-  for (s = *prev; s != NULL; s = s->header.next)
+  for (s = *head_ptr; s != NULL; s = s->header.next)
     {
       switch (s->header.type)
 	{
@@ -5008,7 +5354,7 @@ lang_size_sections_1
 		os->bfd_section->output_offset = 0;
 	      }
 
-	    lang_size_sections_1 (&os->children.head, os,
+	    lang_size_sections_1 (&os->children.head, &os->children.tail, os,
 				  os->fill, newdot, relax, check_regions);
 
 	    os->processed_vma = TRUE;
@@ -5137,6 +5483,21 @@ lang_size_sections_1
 	    if (os->region != NULL
 		&& (os->bfd_section->flags & (SEC_ALLOC | SEC_LOAD)))
 	      {
+
+//		if ( os->ovfl_section)
+//		{
+//			  if ( ( ( dot < os->region->origin ) ||
+//			         ( dot - os->region->origin > os->region->length)
+//			       ) &&
+//			       ( (dot != os->region->origin + os->region->length) ||
+//			         (os->bfd_section->vma == 0)
+//			       )
+//			     )
+//			  {
+//				  printf ("overflowing %s - size %d, containing %d\n",);
+//			  }
+//		}
+
 		os->region->current = dot;
 
 		if (check_regions)
@@ -5155,11 +5516,12 @@ lang_size_sections_1
 				       os->bfd_section->lma);
 		  }
 	      }
+//	    printf( "finished output section %s size:%d\n", os->name, (int)os->bfd_section->size );
 	  }
 	  break;
 
 	case lang_constructors_statement_enum:
-	  dot = lang_size_sections_1 (&constructor_list.head,
+		new_dot = lang_size_sections_1 (&constructor_list.head, &constructor_list.tail,
 				      output_section_statement,
 				      fill, dot, relax, check_regions);
 	  break;
@@ -5197,8 +5559,8 @@ lang_size_sections_1
 	      }
 	    if (size < TO_SIZE ((unsigned) 1))
 	      size = TO_SIZE ((unsigned) 1);
-	    dot += TO_ADDR (size);
-	    output_section_statement->bfd_section->size += size;
+	    new_dot = dot + TO_ADDR (size);
+	    bfd_section_size_needs_update = 1;
 	  }
 	  break;
 
@@ -5211,13 +5573,13 @@ lang_size_sections_1
 	    s->reloc_statement.output_section =
 	      output_section_statement->bfd_section;
 	    size = bfd_get_reloc_size (s->reloc_statement.howto);
-	    dot += TO_ADDR (size);
-	    output_section_statement->bfd_section->size += size;
+	    new_dot = dot + TO_ADDR (size);
+	    bfd_section_size_needs_update = 1;
 	  }
 	  break;
 
 	case lang_wild_statement_enum:
-	  dot = lang_size_sections_1 (&s->wild_statement.children.head,
+	  dot = lang_size_sections_1 (&s->wild_statement.children.head, &s->wild_statement.children.tail,
 				      output_section_statement,
 				      fill, dot, relax, check_regions);
 	  break;
@@ -5245,7 +5607,9 @@ lang_size_sections_1
 		if (again)
 		  *relax = TRUE;
 	      }
-	    dot = size_input_section (prev, output_section_statement,
+
+
+	    new_dot = size_input_section (head_ptr, output_section_statement,
 				      output_section_statement->fill, dot);
 	  }
 	  break;
@@ -5328,7 +5692,7 @@ lang_size_sections_1
 				== bfd_target_elf_flavour)))
 		      output_section_statement->bfd_section->flags |= SEC_ALLOC;
 		  }
-		dot = newdot;
+		new_dot = newdot;
 	      }
 	  }
 	  break;
@@ -5351,7 +5715,7 @@ lang_size_sections_1
 	  break;
 
 	case lang_group_statement_enum:
-	  dot = lang_size_sections_1 (&s->group_statement.children.head,
+		new_dot = lang_size_sections_1 (&s->group_statement.children.head, &s->group_statement.children.tail,
 				      output_section_statement,
 				      fill, dot, relax, check_regions);
 	  break;
@@ -5367,8 +5731,89 @@ lang_size_sections_1
 	  FAIL ();
 	  break;
 	}
-      prev = &s->header.next;
+
+     if( new_dot > dot )
+     {
+#if 0
+    	 int i;
+    	 for (i=0; i<indent; i++)
+    	 {
+    		 printf("  ");
+    	 }
+	    	switch ( s->header.type )
+	    	{
+
+	    	  case lang_output_section_statement_enum:
+	    		  printf("output section %s", s->output_section_statement.name );
+	    		  break;
+	    	  case lang_assignment_statement_enum:
+	    		  printf("assignment");
+				  break;
+	    	  case lang_input_statement_enum:
+	    	  	  printf("input %s", s->input_statement.local_sym_name );
+				  break;
+	    	  case lang_address_statement_enum:
+	    	  	  printf("address %s", s->address_statement.section_name );
+	    		  break;
+	    	  case lang_wild_statement_enum:
+	    	  	  printf("wild %s", s->wild_statement.filename );
+	    		  break;
+	    	  case lang_input_section_enum:
+	    	  	  printf("input section %s", s->input_section.section->name );
+	    		  break;
+	    	  case lang_object_symbols_statement_enum:
+	    	  	  printf("object symbols" );
+	    		  break;
+	    	  case lang_fill_statement_enum:
+	    	  	  printf("fill %d", s->fill_statement.size );
+	    		  break;
+	    	  case lang_data_statement_enum:
+	    	  	  printf("data");
+	    		  break;
+	    	  case lang_reloc_statement_enum:
+	    	  	  printf("reloc %s", s->reloc_statement.name );
+	    		  break;
+	    	  case lang_target_statement_enum:
+	    	  	  printf("target %s", s->target_statement.target );
+	    		  break;
+	    	  case lang_output_statement_enum:
+	    	  	  printf("output %s", s->output_statement.name );
+	    		  break;
+	    	  case lang_padding_statement_enum:
+	    	  	  printf("padding %d", s->padding_statement.size );
+	    		  break;
+	    	  case lang_group_statement_enum:
+	    	  	  printf("group");
+	    		  break;
+	    	  case lang_insert_statement_enum:
+	    	  	  printf("insert %s", s->insert_statement.where );
+	    		  break;
+	    	  case lang_constructors_statement_enum:
+	    	  	  printf("constructors" );
+	    		  break;
+	    	  default:
+	    		  printf("unknown");
+	    		  break;
+	    	}
+   	 	 printf(" output: %s dot:0x%08x newdot:0x%08x\n", output_section_statement->name, dot, new_dot );
+#endif
+
+	    if ( 0 == size_input_section_overflow_if_required( start, tail_ptr, output_section_statement, &s, dot, new_dot, relax, check_regions) )
+	    {
+
+			if ( bfd_section_size_needs_update == 1 )
+			{
+				output_section_statement->bfd_section->size += (new_dot - dot);
+				bfd_section_size_needs_update = 0;
+			}
+			dot = new_dot;
+	    }
+     }
+
+      head_ptr = &s->header.next;
     }
+
+  indent--;
   return dot;
 }
 
@@ -5418,7 +5863,7 @@ void
 one_lang_size_sections_pass (bfd_boolean *relax, bfd_boolean check_regions)
 {
   lang_statement_iteration++;
-  lang_size_sections_1 (&statement_list.head, abs_output_section,
+  lang_size_sections_1 (&statement_list.head, &statement_list.tail, abs_output_section,
 			0, 0, relax, check_regions);
 }
 
@@ -6954,7 +7399,8 @@ lang_get_regions (lang_memory_region_type **region,
 void
 lang_leave_output_section_statement (fill_type *fill, const char *memspec,
 				     lang_output_section_phdr_list *phdrs,
-				     const char *lma_memspec)
+				     const char *lma_memspec,
+				     const char *ovfl_memspec)
 {
   lang_get_regions (&current_section->region,
 		    &current_section->lma_region,
@@ -6962,6 +7408,8 @@ lang_leave_output_section_statement (fill_type *fill, const char *memspec,
 		    current_section->load_base != NULL,
 		    current_section->addr_tree != NULL);
 
+  current_section->ovfl_section = ovfl_memspec;
+
   /* If this section has no load region or base, but uses the same
      region as the previous section, then propagate the previous
      section's load region.  */
@@ -7371,7 +7819,7 @@ lang_leave_overlay_section (fill_type *fill,
      region and that no load-time region has been specified.  It doesn't
      really matter what we say here, since lang_leave_overlay will
      override it.  */
-  lang_leave_output_section_statement (fill, DEFAULT_MEMORY_REGION, phdrs, 0);
+  lang_leave_output_section_statement (fill, DEFAULT_MEMORY_REGION, phdrs, 0, NULL);
 
   /* Define the magic symbols.  */
 
@@ -7408,7 +7856,8 @@ lang_leave_overlay (etree_type *lma_expr,
 		    fill_type *fill,
 		    const char *memspec,
 		    lang_output_section_phdr_list *phdrs,
-		    const char *lma_memspec)
+		    const char *lma_memspec,
+		    const char *ovfl_memspec)
 {
   lang_memory_region_type *region;
   lang_memory_region_type *lma_region;
@@ -7419,6 +7868,7 @@ lang_leave_overlay (etree_type *lma_expr,
 		    memspec, lma_memspec,
 		    lma_expr != NULL, FALSE);
 
+  (void)ovfl_memspec;
   nocrossref = NULL;
 
   /* After setting the size of the last section, set '.' to end of the
diff --git a/ld/ldlang.h b/ld/ldlang.h
index 95f9412..472fc06 100644
--- a/ld/ldlang.h
+++ b/ld/ldlang.h
@@ -130,7 +130,9 @@ typedef struct lang_output_section_phdr_list
   bfd_boolean used;
 } lang_output_section_phdr_list;
 
-typedef struct lang_output_section_statement_struct
+typedef struct lang_output_section_statement_struct lang_output_section_statement_type;
+
+struct lang_output_section_statement_struct
 {
   lang_statement_header_type header;
   lang_statement_list_type children;
@@ -140,6 +142,7 @@ typedef struct lang_output_section_statement_struct
   asection *bfd_section;
   lang_memory_region_type *region;
   lang_memory_region_type *lma_region;
+  const char *ovfl_section;
   fill_type *fill;
   union etree_union *addr_tree;
   union etree_union *load_base;
@@ -162,10 +165,10 @@ typedef struct lang_output_section_statement_struct
   unsigned int processed_lma : 1;
   unsigned int all_input_readonly : 1;
   /* If this section should be ignored.  */
-  unsigned int ignored : 1; 
+  unsigned int ignored : 1;
   /* If there is a symbol relative to this section.  */
-  unsigned int section_relative_symbol : 1; 
-} lang_output_section_statement_type;
+  unsigned int section_relative_symbol : 1;
+};
 
 typedef struct
 {
@@ -535,7 +538,7 @@ extern void lang_float
   (bfd_boolean);
 extern void lang_leave_output_section_statement
   (fill_type *, const char *, lang_output_section_phdr_list *,
-   const char *);
+   const char *, const char *);
 extern void lang_abs_symbol_at_end_of
   (const char *, const char *);
 extern void lang_abs_symbol_at_beginning_of
@@ -630,7 +633,7 @@ extern void lang_leave_overlay_section
   (fill_type *, lang_output_section_phdr_list *);
 extern void lang_leave_overlay
   (etree_type *, int, fill_type *, const char *,
-   lang_output_section_phdr_list *, const char *);
+   lang_output_section_phdr_list *, const char *, const char *);
 
 extern struct bfd_elf_version_expr *lang_new_vers_pattern
   (struct bfd_elf_version_expr *, const char *, const char *, bfd_boolean);
diff --git a/ld/ldlex.c b/ld/ldlex.c
index 09bd771..ba83b93 100644
--- a/ld/ldlex.c
+++ b/ld/ldlex.c
@@ -53,7 +53,6 @@ typedef int flex_int32_t;
 typedef unsigned char flex_uint8_t; 
 typedef unsigned short int flex_uint16_t;
 typedef unsigned int flex_uint32_t;
-#endif /* ! C99 */
 
 /* Limits of integral types. */
 #ifndef INT8_MIN
@@ -84,6 +83,8 @@ typedef unsigned int flex_uint32_t;
 #define UINT32_MAX             (4294967295U)
 #endif
 
+#endif /* ! C99 */
+
 #endif /* ! FLEXINT_H */
 
 #ifdef __cplusplus
@@ -140,7 +141,15 @@ typedef unsigned int flex_uint32_t;
 
 /* Size of default input buffer. */
 #ifndef YY_BUF_SIZE
+#ifdef __ia64__
+/* On IA-64, the buffer size is 16k, not 8k.
+ * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
+ * Ditto for the __ia64__ case accordingly.
+ */
+#define YY_BUF_SIZE 32768
+#else
 #define YY_BUF_SIZE 16384
+#endif /* __ia64__ */
 #endif
 
 /* The state buf must be large enough to hold one state per character in the main buffer.
@@ -152,12 +161,7 @@ typedef unsigned int flex_uint32_t;
 typedef struct yy_buffer_state *YY_BUFFER_STATE;
 #endif
 
-#ifndef YY_TYPEDEF_YY_SIZE_T
-#define YY_TYPEDEF_YY_SIZE_T
-typedef size_t yy_size_t;
-#endif
-
-extern yy_size_t yyleng;
+extern int yyleng;
 
 extern FILE *yyin, *yyout;
 
@@ -183,6 +187,11 @@ extern FILE *yyin, *yyout;
 
 #define unput(c) yyunput( c, (yytext_ptr)  )
 
+#ifndef YY_TYPEDEF_YY_SIZE_T
+#define YY_TYPEDEF_YY_SIZE_T
+typedef size_t yy_size_t;
+#endif
+
 #ifndef YY_STRUCT_YY_BUFFER_STATE
 #define YY_STRUCT_YY_BUFFER_STATE
 struct yy_buffer_state
@@ -200,7 +209,7 @@ struct yy_buffer_state
 	/* Number of characters read into yy_ch_buf, not including EOB
 	 * characters.
 	 */
-	yy_size_t yy_n_chars;
+	int yy_n_chars;
 
 	/* Whether we "own" the buffer - i.e., we know we created it,
 	 * and can realloc() it to grow it, and should free() it to
@@ -270,8 +279,8 @@ static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
 
 /* yy_hold_char holds the character lost when yytext is formed. */
 static char yy_hold_char;
-static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
-yy_size_t yyleng;
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+int yyleng;
 
 /* Points to current character in buffer. */
 static char *yy_c_buf_p = (char *) 0;
@@ -299,7 +308,7 @@ static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
 
 YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
 YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
-YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );
+YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
 
 void *yyalloc (yy_size_t  );
 void *yyrealloc (void *,yy_size_t  );
@@ -359,8 +368,8 @@ static void yy_fatal_error (yyconst char msg[]  );
 	*yy_cp = '\0'; \
 	(yy_c_buf_p) = yy_cp;
 
-#define YY_NUM_RULES 193
-#define YY_END_OF_BUFFER 194
+#define YY_NUM_RULES 194
+#define YY_END_OF_BUFFER 195
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -368,193 +377,196 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static yyconst flex_int16_t yy_accept[1682] =
+static yyconst flex_int16_t yy_accept[1709] =
     {   0,
-        0,    0,  173,  173,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,  194,  193,
-      191,  176,  175,   32,  191,  173,   38,   29,   44,   43,
-       34,   35,   28,   36,  173,   37,    8,    8,   45,   46,
-       39,   40,   27,   33,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,   10,    9,  173,  117,  115,  173,
-       42,   30,   41,   31,  192,  176,   32,  192,  171,   38,
-       29,   44,   43,   34,   35,   28,   36,  171,   37,    8,
-        8,   45,   46,   39,   40,   27,   33,  171,  171,  171,
-
-      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
-      171,  171,   10,    9,  171,  171,   42,   30,   41,   31,
-      169,   36,  169,   37,    8,    8,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  117,  115,  169,
-       31,    4,    3,    2,    4,    5,  130,   32,  129,  168,
-       34,   35,   28,   36,  168,   37,    8,    8,   45,   46,
-       40,   33,  168,  168,  168,  168,  168,  168,  168,  168,
-      168,  168,  168,  168,   10,    9,  168,  168,  168,  168,
-      168,  168,  168,  168,  168,  168,  168,   31,  190,  188,
-
-      189,  191,  183,  182,  177,  184,  185,  181,  181,  181,
-      181,  186,  187,  176,  173,   15,    0,  174,    8,   26,
-       24,   22,   20,   21,    1,   23,    8,    8,  173,   18,
-       17,   14,   16,   19,  173,  173,  173,  173,  173,  122,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,   25,   13,
-       15,  171,    6,   22,   20,   21,    0,    1,   23,    8,
-
-        0,    7,    7,    8,    7,   14,  171,    7,    7,    7,
-      171,  171,  122,    7,  171,  171,    7,  171,  171,  171,
-        7,  171,  171,  171,  171,  171,  171,  171,  171,  171,
-      171,  171,  171,  171,  171,  171,  171,  171,    7,  171,
-      169,    8,    0,   23,    8,    0,  169,  169,  169,  169,
-      169,  122,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
+        0,    0,  174,  174,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,  195,  194,
+      192,  177,  176,   32,  192,  174,   38,   29,   44,   43,
+       34,   35,   28,   36,  174,   37,    8,    8,   45,   46,
+       39,   40,   27,   33,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,   10,    9,  174,  117,  115,  174,
+       42,   30,   41,   31,  193,  177,   32,  193,  172,   38,
+       29,   44,   43,   34,   35,   28,   36,  172,   37,    8,
+        8,   45,   46,   39,   40,   27,   33,  172,  172,  172,
+
+      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
+      172,  172,   10,    9,  172,  172,   42,   30,   41,   31,
+      170,   36,  170,   37,    8,    8,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  117,  115,  170,
+       31,    4,    3,    2,    4,    5,  131,   32,  130,  169,
+       34,   35,   28,   36,  169,   37,    8,    8,   45,   46,
+       40,   33,  169,  169,  169,  169,  169,  169,  169,  169,
+      169,  169,  169,  169,   10,    9,  169,  169,  169,  169,
+      169,  169,  169,  169,  169,  169,  169,   31,  191,  189,
+
+      190,  192,  184,  183,  178,  185,  186,  182,  182,  182,
+      182,  187,  188,  177,  174,   15,    0,  175,    8,   26,
+       24,   22,   20,   21,    1,   23,    8,    8,  174,   18,
+       17,   14,   16,   19,  174,  174,  174,  174,  174,  122,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,   25,   13,
+       15,  172,    6,   22,   20,   21,    0,    1,   23,    8,
+
+        0,    7,    7,    8,    7,   14,  172,    7,    7,    7,
+      172,  172,  122,    7,  172,  172,    7,  172,  172,  172,
+        7,  172,  172,  172,  172,  172,  172,  172,  172,  172,
+      172,  172,  172,  172,  172,  172,  172,  172,    7,  172,
+      170,    8,    0,   23,    8,    0,  170,  170,  170,  170,
+      170,  122,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+
+      170,    4,    4,  130,  130,  169,    6,  132,   22,  133,
+      169,    7,    7,    7,  169,  169,  169,    7,  169,    7,
+        7,  169,  169,  169,  169,  169,  169,  169,  169,    7,
+      169,  169,  169,    7,  169,    7,    7,  169,  169,  169,
+      169,  169,  169,  169,  169,  191,  190,  183,  182,    0,
+      182,  182,  182,   11,   12,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,   92,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,   71,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  118,  116,  174,
+        8,  173,    8,  172,    7,  172,  172,  172,  172,  172,
+      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
+      172,  172,  172,   62,   63,  172,  172,  172,  172,  172,
+      172,  172,  172,  172,  172,  172,  172,  172,    8,  171,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,   92,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,   71,   62,  170,   63,  170,  170,
+
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  118,  116,  170,    4,    8,  169,
+      169,  169,  169,  169,  134,  169,  169,  169,  169,  169,
       169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-
-      169,    4,    4,  129,  129,  168,    6,  131,   22,  132,
-      168,    7,    7,    7,  168,  168,  168,    7,  168,    7,
-        7,  168,  168,  168,  168,  168,  168,  168,  168,    7,
-      168,  168,  168,    7,  168,    7,    7,  168,  168,  168,
-      168,  168,  168,  168,  168,  190,  189,  182,  181,    0,
-      181,  181,  181,   11,   12,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,   92,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,   71,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  118,  116,  173,
-        8,  172,    8,  171,    7,  171,  171,  171,  171,  171,
-      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
-      171,  171,  171,   62,   63,  171,  171,  171,  171,  171,
-      171,  171,  171,  171,  171,  171,  171,  171,    8,  170,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,   92,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,   71,   62,  169,   63,  169,  169,
-
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  118,  116,  169,    4,    8,  168,
-      168,  168,  168,  168,  133,  168,  168,  168,  168,  168,
-      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
-      150,  168,  168,  168,  168,  168,  168,  168,  168,  168,
-      168,  181,  181,  181,  173,   59,  173,  173,  173,  173,
-      173,   53,  173,   99,  173,  109,  173,  173,  173,  173,
-      173,  173,  173,   88,  173,  173,  173,  173,  110,  173,
-      173,  173,  126,  173,  173,  173,   97,  173,   67,  173,
-
-      173,  173,  173,  173,  173,  173,  173,  173,   95,  173,
-      173,  173,  173,  173,  173,  105,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  171,   59,  171,  171,  171,
-       53,  171,  171,  109,  171,  171,  171,  171,  171,  171,
-      110,  171,  126,  171,  171,   67,  171,  171,  171,  171,
-      171,  171,  171,  171,  171,  171,  171,  171,  169,   59,
-      169,  169,  169,  169,  169,   53,  169,   99,  169,  109,
-      169,  169,  169,  169,  169,  169,  169,   88,  169,  169,
-      169,  169,  110,  169,  169,  169,  126,  169,  169,  169,
-       97,  169,   67,  169,  169,  169,  169,  169,  169,  169,
-
-      169,  169,   95,  169,  169,  169,  169,  169,  169,  105,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  168,
-      168,  168,  137,  145,  136,  168,  168,  147,  140,  143,
-      168,  168,  148,  168,  168,  168,  168,  168,  154,  162,
-      153,  168,  168,  165,  157,  160,  168,  168,  166,  168,
-      168,  181,  181,  181,  173,   86,   55,  173,  173,  173,
-       52,  173,  173,  173,  173,  108,   65,  173,  173,   94,
-      173,   77,  173,  173,   76,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  121,  173,  173,
-      173,  173,  173,   98,  173,  173,  173,   96,  173,  173,
-
-      173,  173,  173,  173,  173,  171,   55,  171,  171,   52,
-      171,  171,  171,  108,  171,   77,  171,  171,  171,  171,
-      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
-      171,  171,  169,   86,   55,  169,  169,  169,   52,  169,
-      169,  169,  169,  108,   65,  169,  169,   94,  169,   77,
-      169,  169,   76,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  121,  169,  169,  169,  169,
-      169,   98,  169,  169,  169,   96,  169,  169,  169,  169,
-      169,  169,  169,  168,  138,  135,  168,  168,  147,  147,
-      142,  168,  146,  168,  168,  155,  152,  168,  168,  165,
-
-      165,  159,  168,  164,  168,  181,  181,  179,  173,  173,
-       64,  173,   87,  173,  173,  173,  173,  173,  173,   66,
-      173,  173,  173,  173,   85,  173,   54,  173,   47,  173,
-      173,  107,  173,   50,   75,  173,  173,  173,  173,  173,
-      173,   72,  173,  173,  173,  173,   93,   73,  173,  173,
-      173,  171,  171,   64,  171,  171,  171,  171,  171,  171,
-      171,   54,  171,  171,  107,  171,   50,  171,  171,  171,
-       72,  171,  171,  171,  171,  169,  169,   64,  169,   87,
-      169,  169,  169,  169,  169,  169,   66,  169,  169,  169,
-      169,   85,  169,   54,  169,   47,  169,  169,  107,  169,
-
-       50,   75,  169,  169,  169,  169,  169,  169,   72,  169,
-      169,  169,  169,   93,   73,  169,  169,  169,  168,  168,
-       66,  144,  141,  168,  168,  168,  163,  161,  158,  168,
-      180,  178,  173,   61,  173,  173,  173,  173,  173,   79,
-      173,  173,  120,  173,  173,  173,  173,  173,  100,  173,
-      173,  102,  124,  173,  173,  173,  173,  173,  173,  114,
-       89,  173,   51,  173,  173,  171,   61,  171,  171,  171,
-       79,  171,  120,  171,  171,  171,  171,  111,  124,  171,
-      171,  114,  171,  171,  171,  169,   61,  169,  169,  169,
-      169,  169,   79,  169,  169,  120,  169,  169,  169,  169,
-
-      169,  100,  169,  169,  102,  124,  169,  169,  169,  169,
-      169,  169,  114,   89,  169,   51,  169,  169,  168,  168,
-      168,  168,  168,  168,  149,  173,  128,  173,  173,  173,
-      173,  173,  173,  173,  173,   60,  173,  173,  173,  173,
-      173,  173,  173,   84,  173,  173,  173,  123,  167,  173,
-      149,  171,  128,  171,  171,  171,   60,  171,  171,  171,
-      171,  171,  123,  167,  171,  149,  169,  128,  169,  169,
-      169,  169,  169,  169,  169,  169,   60,  169,  169,  169,
-      169,  169,  169,  169,   84,  169,  169,  169,  123,  167,
-      169,  149,  134,  139,  167,  151,  156,   78,  173,  173,
-
-      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  173,   78,
-      171,  171,  171,  171,  171,  171,  171,  171,  171,   78,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  173,  173,  173,  173,  173,  173,  173,   49,  173,
-      112,  113,  173,  173,  173,  173,   74,  173,  173,  173,
-      173,  173,  173,  171,  171,  171,  171,  112,  113,  171,
-      171,  171,  171,  169,  169,  169,  169,  169,  169,  169,
-       49,  169,  112,  113,  169,  169,  169,  169,   74,  169,
-
-      169,  169,  169,  169,  169,  173,  173,  173,  173,  173,
-      173,  173,  101,   91,  173,  173,  173,  173,  173,  173,
-      173,  173,  173,  171,  171,  171,  101,  171,  171,  171,
-      171,  169,  169,  169,  169,  169,  169,  169,  101,   91,
-      169,  169,  169,  169,  169,  169,  169,  169,  169,   81,
-      173,  173,  127,  173,  173,  173,  173,  173,   48,  173,
-      173,  173,  173,  103,  173,  171,  127,  171,  171,  171,
-      171,  171,   81,  169,  169,  127,  169,  169,  169,  169,
-      169,   48,  169,  169,  169,  169,  103,  169,  173,  173,
-      173,  173,  173,   90,  173,   70,  173,  173,  173,  173,
-
-      171,  171,  171,   70,  171,  171,  169,  169,  169,  169,
-      169,   90,  169,   70,  169,  169,  169,  169,  173,  173,
-      173,  173,  173,  173,  173,  125,   69,  173,  173,   68,
-      171,  171,  171,  171,  125,   69,   68,  169,  169,  169,
-      169,  169,  169,  169,  125,   69,  169,  169,   68,  173,
-      173,  173,  173,  173,  173,  173,  173,  173,  171,  171,
-      171,  171,  169,  169,  169,  169,  169,  169,  169,  169,
-      169,  173,  173,   58,  173,  173,  173,  173,  173,  173,
-      171,   58,  171,  171,  169,  169,   58,  169,  169,  169,
-      169,  169,  169,  173,  173,  173,  173,  173,  173,  104,
-
-      173,  171,  171,  171,  169,  169,  169,  169,  169,  169,
-      104,  169,  173,   56,  173,  173,  173,  173,  173,   56,
-      171,  171,  169,   56,  169,  169,  169,  169,  169,  173,
-      173,  173,  173,  119,  173,  171,  119,  169,  169,  169,
-      169,  119,  169,  173,  173,  173,  173,  173,  171,  169,
-      169,  169,  169,  169,   80,  173,  173,  173,  106,  171,
-       80,  169,  169,  169,  106,   57,  173,  173,   57,   57,
-      169,  169,   82,  173,   82,  169,  173,  169,   83,   83,
-        0
+      151,  169,  169,  169,  169,  169,  169,  169,  169,  169,
+      169,  182,  182,  182,  174,   59,  174,  174,  174,  174,
+      174,   53,  174,   99,  174,  109,  174,  174,  174,  174,
+      174,  174,  174,   88,  174,  174,  174,  174,  110,  174,
+      174,  174,  127,  174,  174,  174,   97,  174,   67,  174,
+
+      174,  174,  174,  174,  174,  174,  174,  174,   95,  174,
+      174,  174,  174,  174,  174,  105,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  172,   59,  172,  172,  172,
+       53,  172,  172,  109,  172,  172,  172,  172,  172,  172,
+      110,  172,  127,  172,  172,   67,  172,  172,  172,  172,
+      172,  172,  172,  172,  172,  172,  172,  172,  170,   59,
+      170,  170,  170,  170,  170,   53,  170,   99,  170,  109,
+      170,  170,  170,  170,  170,  170,  170,   88,  170,  170,
+      170,  170,  110,  170,  170,  170,  127,  170,  170,  170,
+       97,  170,   67,  170,  170,  170,  170,  170,  170,  170,
+
+      170,  170,   95,  170,  170,  170,  170,  170,  170,  105,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  169,
+      169,  169,  138,  146,  137,  169,  169,  148,  141,  144,
+      169,  169,  149,  169,  169,  169,  169,  169,  155,  163,
+      154,  169,  169,  166,  158,  161,  169,  169,  167,  169,
+      169,  182,  182,  182,  174,   86,   55,  174,  174,  174,
+       52,  174,  174,  174,  174,  108,   65,  174,  174,   94,
+      174,   77,  174,  174,   76,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  121,  174,
+      174,  174,  174,  174,   98,  174,  174,  174,   96,  174,
+
+      174,  174,  174,  174,  174,  174,  172,   55,  172,  172,
+       52,  172,  172,  172,  108,  172,   77,  172,  172,  172,
+      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
+      172,  172,  172,  172,  170,   86,   55,  170,  170,  170,
+       52,  170,  170,  170,  170,  108,   65,  170,  170,   94,
+      170,   77,  170,  170,   76,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  121,  170,
+      170,  170,  170,  170,   98,  170,  170,  170,   96,  170,
+      170,  170,  170,  170,  170,  170,  169,  139,  136,  169,
+      169,  148,  148,  143,  169,  147,  169,  169,  156,  153,
+
+      169,  169,  166,  166,  160,  169,  165,  169,  182,  182,
+      180,  174,  174,   64,  174,   87,  174,  174,  174,  174,
+      174,  174,   66,  174,  174,  174,  174,   85,  174,   54,
+      174,   47,  174,  174,  107,  174,   50,   75,  174,  174,
+      174,  174,  174,  174,  174,   72,  174,  174,  174,  174,
+       93,   73,  174,  174,  174,  172,  172,   64,  172,  172,
+      172,  172,  172,  172,  172,   54,  172,  172,  107,  172,
+       50,  172,  172,  172,  172,   72,  172,  172,  172,  172,
+      170,  170,   64,  170,   87,  170,  170,  170,  170,  170,
+      170,   66,  170,  170,  170,  170,   85,  170,   54,  170,
+
+       47,  170,  170,  107,  170,   50,   75,  170,  170,  170,
+      170,  170,  170,  170,   72,  170,  170,  170,  170,   93,
+       73,  170,  170,  170,  169,  169,   66,  145,  142,  169,
+      169,  169,  164,  162,  159,  169,  181,  179,  174,   61,
+      174,  174,  174,  174,  174,   79,  174,  174,  120,  174,
+      174,  174,  174,  174,  100,  174,  174,  174,  102,  125,
+      174,  174,  174,  174,  174,  174,  114,   89,  174,   51,
+      174,  174,  172,   61,  172,  172,  172,   79,  172,  120,
+      172,  172,  172,  172,  172,  111,  125,  172,  172,  114,
+      172,  172,  172,  170,   61,  170,  170,  170,  170,  170,
+
+       79,  170,  170,  120,  170,  170,  170,  170,  170,  100,
+      170,  170,  170,  102,  125,  170,  170,  170,  170,  170,
+      170,  114,   89,  170,   51,  170,  170,  169,  169,  169,
+      169,  169,  169,  150,  174,  129,  174,  174,  174,  174,
+      174,  174,  174,  174,   60,  174,  174,  174,  174,  174,
+      174,  174,  174,   84,  174,  174,  174,  124,  168,  174,
+      150,  172,  129,  172,  172,  172,   60,  172,  172,  172,
+      172,  172,  172,  124,  168,  172,  150,  170,  129,  170,
+      170,  170,  170,  170,  170,  170,  170,   60,  170,  170,
+      170,  170,  170,  170,  170,  170,   84,  170,  170,  170,
+
+      124,  168,  170,  150,  135,  140,  168,  152,  157,   78,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,   78,  172,  172,  172,  172,  172,  172,  172,
+      172,  172,  172,   78,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  174,  174,  174,  174,
+      174,  174,  174,   49,  174,  112,  113,  174,  174,  174,
+      174,  174,   74,  174,  174,  174,  174,  174,  174,  172,
+      172,  172,  172,  112,  113,  172,  172,  172,  172,  172,
+
+      170,  170,  170,  170,  170,  170,  170,   49,  170,  112,
+      113,  170,  170,  170,  170,  170,   74,  170,  170,  170,
+      170,  170,  170,  174,  174,  174,  174,  174,  174,  174,
+      101,   91,  174,  174,  174,  174,  174,  174,  174,  174,
+      174,  174,  172,  172,  172,  101,  172,  172,  172,  172,
+      172,  170,  170,  170,  170,  170,  170,  170,  101,   91,
+      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
+       81,  174,  174,  128,  174,  174,  174,  174,  174,  174,
+       48,  174,  174,  174,  174,  103,  174,  172,  128,  172,
+      172,  172,  172,  172,  172,   81,  170,  170,  128,  170,
+
+      170,  170,  170,  170,  170,   48,  170,  170,  170,  170,
+      103,  170,  174,  174,  174,  174,  174,   90,  123,  174,
+       70,  174,  174,  174,  174,  172,  172,  123,  172,   70,
+      172,  172,  170,  170,  170,  170,  170,   90,  123,  170,
+       70,  170,  170,  170,  170,  174,  174,  174,  174,  174,
+      174,  174,  126,   69,  174,  174,   68,  172,  172,  172,
+      172,  126,   69,   68,  170,  170,  170,  170,  170,  170,
+      170,  126,   69,  170,  170,   68,  174,  174,  174,  174,
+      174,  174,  174,  174,  174,  172,  172,  172,  172,  170,
+      170,  170,  170,  170,  170,  170,  170,  170,  174,  174,
+
+       58,  174,  174,  174,  174,  174,  174,  172,   58,  172,
+      172,  170,  170,   58,  170,  170,  170,  170,  170,  170,
+      174,  174,  174,  174,  174,  174,  104,  174,  172,  172,
+      172,  170,  170,  170,  170,  170,  170,  104,  170,  174,
+       56,  174,  174,  174,  174,  174,   56,  172,  172,  170,
+       56,  170,  170,  170,  170,  170,  174,  174,  174,  174,
+      119,  174,  172,  119,  170,  170,  170,  170,  119,  170,
+      174,  174,  174,  174,  174,  172,  170,  170,  170,  170,
+      170,   80,  174,  174,  174,  106,  172,   80,  170,  170,
+      170,  106,   57,  174,  174,   57,   57,  170,  170,   82,
+
+      174,   82,  170,  174,  170,   83,   83,    0
     } ;
 
 static yyconst flex_int32_t yy_ec[256] =
@@ -602,391 +614,397 @@ static yyconst flex_int32_t yy_meta[82] =
         9
     } ;
 
-static yyconst flex_int16_t yy_base[1706] =
+static yyconst flex_int16_t yy_base[1733] =
     {   0,
         0,    0,    0,    0,   81,    0,  162,    0,  243,  323,
-      403,    0,  271,  273,  484,  565,  646,  727, 2606, 2607,
-     2607, 2603, 2607, 2581, 2598,  791, 2607,  260, 2607, 2607,
-     2579, 2578,    0, 2577,    0,  247,  321,  492,    0, 2607,
-      249, 2576,  257,    0,  255,  257,  253,  259,  262,  268,
-     2555, 2560, 2557, 2565,  280,  286,  274,  315,  317, 2548,
-     2563,  350, 2566, 2561,    0,    0, 2532, 2528, 2516, 2522,
-     2607,  290, 2607,    0, 2607, 2584, 2562, 2579,  836, 2607,
-      343, 2607, 2607, 2560, 2559, 2607,  296,    0,  294,  881,
-      306, 2607, 2607,  342, 2558,  344, 2607,  940,  487,  506,
-
-      565,  577,  571, 2537, 2540, 2548,  341,  359,  346,  476,
-     2534,  488, 2607, 2607,  644, 2511, 2607,  295, 2607,    0,
+      403,    0,  271,  273,  484,  565,  646,  727, 2633, 2634,
+     2634, 2630, 2634, 2608, 2625,  791, 2634,  260, 2634, 2634,
+     2606, 2605,    0, 2604,    0,  247,  321,  492,    0, 2634,
+      249, 2603,  257,    0,  255,  257,  253,  259,  262,  268,
+     2582, 2587, 2584, 2592,  280,  286,  274,  315,  317, 2575,
+     2590,  350, 2593, 2588,    0,    0, 2559, 2555, 2543, 2549,
+     2634,  290, 2634,    0, 2634, 2611, 2589, 2606,  836, 2634,
+      343, 2634, 2634, 2587, 2586, 2634,  296,    0,  294,  881,
+      306, 2634, 2634,  342, 2585,  344, 2634,  940,  487,  506,
+
+      565,  577,  571, 2564, 2567, 2575,  341,  359,  346,  476,
+     2561,  488, 2634, 2634,  644, 2538, 2634,  295, 2634,    0,
       999,  477,    0,  376,  735,  747,  596,  511,  313,  567,
-      478,  515, 2532, 2537, 2534, 2542,  599,  573,  517,  591,
-      599, 2525, 2540,  645, 2543, 2538, 2509, 2505, 2493, 2499,
-        0, 1044, 2607, 2607,    0, 2607, 2607, 2540, 2559, 1089,
-     2538, 2537, 2607, 2536,    0, 2535,    0,  464, 2607,    0,
-     2534, 2607, 1134,  635,  666,  647,  667,  671,  339, 2530,
-     2512, 2508,  551, 2510, 2607, 2607,  685,  730,  732,  694,
-      754,  455, 2495, 2479, 2475,  498, 2477,    0, 2546, 2607,
-
-        0, 2535, 2607,    0, 2607, 2607, 2607, 2526,  536,  534,
-      630, 2607, 2607, 2543,    0,    0, 2539, 2607,  736, 2607,
-     2607,    0,    0,    0,    0,    0,  757,    0,    0, 2520,
-     2607,    0, 2607, 2519, 2497, 2511, 2494, 2504,  580,    0,
-     2506, 2497, 2495, 2489,  641, 2503, 2487, 2500, 2500, 2484,
-      669, 2491, 2487, 2483, 2485, 2487,  798, 2493, 2466, 2482,
-      657, 2479, 2481, 2469,  727, 2480, 2482, 2470, 2484, 2484,
-     2472, 2485, 2478,  691, 2469, 2457, 2464, 2476, 2459, 2478,
-     2476, 2458, 2458, 2457, 2426, 2429, 2434, 2419, 2607, 2607,
-     2607,    0, 1193, 2607, 2607, 2607,    0, 2607, 2607,  477,
-
-      809,    0, 2607, 2607,    0, 2607,  842,  845,  889,    0,
-     2461,  712,    0,  917, 2455, 2453,  679,  949,  976, 2462,
-     2463, 2450,  751, 2459, 2449, 2461, 2437, 2446, 2435,  673,
-     2446, 2448, 2451, 2440, 2447, 2427, 2447, 2449,  995, 2398,
-        0, 1244,    0,    0,  884,    0, 2430, 2444, 2427, 2437,
-      742,    0, 2439, 2430, 2428, 2422,  721, 2436, 2420, 2433,
-     2433, 2417,  733, 2424, 2420, 2416, 2418, 2420,  802, 2426,
-     2399, 2415,  773,  564, 2415, 2413, 2402,  900, 2413, 2415,
-     2403, 2417, 2417, 2405, 2418, 2411,  806, 2402, 2390, 2397,
-     2409, 2392, 2411, 2409, 2391, 2391, 2390, 2359, 2362, 2367,
-
-     2352,    0, 1295, 2425, 2607,    0, 1346,    0,    0,    0,
-      678,  888,  833,    0, 2393,  928,  937, 2392, 2396, 2379,
-     2380, 2378, 2395, 2382, 2390, 2391, 2389, 2390, 2369,  851,
-     2349,  854,  969, 2348, 2352, 2337, 2338, 2336, 2351, 2339,
-     2346, 2347, 2345, 2346, 2327, 2399,    0,    0, 2380, 2379,
-      794,  836,  757, 2607, 2607, 2358, 2354, 2366, 2363, 2364,
-     2354, 2352, 2362, 2362, 2359, 2344, 2337, 2360, 2359, 2350,
-     2355, 2339, 2344, 2350, 2342, 2352, 2349, 2330,    0, 2338,
-     2334, 2339, 2326, 2341, 2329, 2338, 2336, 2338, 2334,    0,
-     2325, 2319, 2320, 2325, 2321, 2310, 2327, 2317, 2314, 2313,
-
-     2308, 2325, 2319, 2309, 2306, 2312, 2306, 2318, 2302, 2318,
-     2319, 2301, 2317, 2305, 2309, 2296, 2269,    0,    0, 2277,
-        0,    0,  998, 2297, 1004, 2304, 2305, 2295, 2304, 2304,
-     2287, 2280, 2303, 1049, 2300, 2290, 2280, 2288, 2284, 2277,
-     2281, 2289, 2291,    0,    0, 2274, 2275, 2277, 2266, 2283,
-     2271, 2266, 2274, 2281, 2282, 2283, 2238, 2246,    0,    0,
-     2266, 2262, 2274, 2271, 2272, 2262, 2260, 2270, 2270, 2267,
-     2252, 2245, 2268, 2267, 2258, 2263, 2247, 2252, 2258, 2250,
-     2260, 2257, 2238,    0, 2246, 2242, 2247, 2234, 2249, 2237,
-     2246, 2244, 2246, 2242,    0,    0, 2233,    0, 2227, 2228,
-
-     2233, 2229, 2218, 2235, 2225, 2222, 2221, 2216, 2233, 2227,
-     2217, 2214, 2220, 2214, 2226, 2210, 2226, 2227, 2209, 2225,
-     2213, 2217, 2204, 2177,    0,    0, 2185,    0,    0, 2205,
-      897, 2214, 2213, 2201,    0, 2211, 2202, 2194, 2209, 2207,
-     2206, 2198, 2189, 2190, 2193, 2161,  925, 2169, 2168, 2157,
-        0, 2166, 2158, 2151, 2164, 2162, 2161, 2154, 2146, 2147,
-     2149,  615,  722,  258, 2180,    0, 2173, 2176, 2171, 2183,
-     2169,    0, 2175,    0, 2165,    0, 2164, 2152, 2168, 2161,
-     2155, 2158, 2160,    0, 2157, 2171, 2159, 2153,    0, 2171,
-     2152, 2153,    0, 2165, 2149, 2167,    0, 2149,    0, 2151,
-
-     2150, 2163, 2132, 2153, 2140, 2148, 2140, 2149,    0, 2142,
-     2153, 2146, 2149, 2133, 2137, 2120, 2141, 2145, 2128, 2135,
-     2137, 2140, 2135, 2101, 2097, 2129,    0, 2126, 2121, 2133,
-        0, 2126, 2116,    0, 2104, 2120, 2113, 2111, 2115, 2109,
-        0, 2109,    0, 2108, 2126,    0, 2111, 2124, 2093, 2114,
-     2110, 2112, 2115, 2104, 2109, 2105, 2074, 2070, 2102,    0,
-     2095, 2098, 2093, 2105, 2091,    0, 2097,    0, 2087,    0,
-     2086, 2074, 2090, 2083, 2077, 2080, 2082,    0, 2079, 2085,
-     2064, 2049,    0, 2058, 2027, 2025,    0, 2035, 2019, 2034,
-        0, 2007,    0, 2000, 1990, 1998, 1952, 1973, 1960,  223,
-
-      328,  360,    0,  358,  463,  478,  512,  586,  613,  602,
-      643,  705,  694,  760,  766,  806,  803,  773,  771,  807,
-      813,  820,    0,    0,    0,  818,  847, 1414,    0,    0,
-      833,  846,    0,  838,  856,  825,  828,  835,    0,    0,
-        0,  833,  856, 1494,    0,    0,  863,  871,    0,  874,
-      894,  936,  955,  970,  914,    0,  923,  934,  953,  957,
-        0,  966,  961,  951,  981,    0,    0,  985,  976,    0,
-      963,    0,  994, 1001,  982,  998, 1018, 1012, 1017, 1000,
-     1007, 1026, 1024, 1020, 1016, 1020, 1041,    0, 1040, 1038,
-     1046, 1040, 1042,    0, 1051, 1057, 1059,    0, 1041, 1054,
-
-     1062, 1045, 1051, 1017, 1033, 1050, 1057, 1053, 1069,    0,
-     1074, 1065, 1080,    0, 1082,    0, 1083, 1057, 1081, 1092,
-     1078, 1094, 1090, 1086, 1100, 1098, 1089, 1098, 1104, 1097,
-     1057, 1071, 1088,    0, 1095, 1091, 1107, 1108,    0, 1113,
-     1110, 1097, 1112,    0,    0, 1114, 1105,    0, 1089,    0,
-     1125, 1121, 1101, 1113, 1133, 1133, 1139, 1119, 1126, 1146,
-     1144, 1141, 1137, 1132, 1152,    0, 1150, 1141, 1148, 1142,
-     1145,    0, 1154, 1159, 1161,    0, 1142, 1155, 1163, 1152,
-     1159, 1125, 1139, 1156,    0, 1165, 1166, 1161,    0, 1574,
-        0, 1179,    0, 1182, 1134,    0, 1145, 1145, 1141,    0,
-
-     1654,    0, 1157,    0, 1160, 1198, 1210, 1205, 1181, 1196,
-        0, 1199,    0, 1193, 1187, 1178, 1205, 1207, 1207,    0,
-     1210, 1209, 1195, 1197,    0, 1197,    0, 1214,    0, 1200,
-     1200,    0, 1215,    0, 1191, 1198, 1219, 1200, 1201, 1219,
-     1215, 1208, 1215, 1229, 1227, 1237,    0,    0, 1237, 1204,
-     1223, 1236, 1252,    0, 1255, 1246, 1256, 1258, 1258, 1259,
-     1246,    0, 1262, 1248,    0, 1262,    0, 1244, 1265, 1251,
-     1241, 1261, 1267, 1226, 1251, 1263, 1278,    0, 1282,    0,
-     1276, 1270, 1261, 1288, 1290, 1290,    0, 1299, 1298, 1284,
-     1286,    0, 1287,    0, 1305,    0, 1291, 1291,    0, 1306,
-
-        0, 1282, 1289, 1310, 1285, 1286, 1304, 1299, 1289, 1296,
-     1310, 1307, 1317,    0,    0, 1311, 1277, 1302, 1314, 1320,
-        0,    0,    0, 1317, 1292, 1297,    0,    0,    0, 1294,
-     1349, 1350, 1341,    0, 1348, 1334, 1352, 1341, 1351,    0,
-     1329, 1346,    0, 1331, 1358, 1343, 1347, 1348,    0, 1336,
-     1367,    0, 1338, 1369, 1367, 1353, 1343, 1367, 1345,    0,
-        0, 1363,    0, 1348, 1346, 1381,    0, 1383, 1372, 1389,
-        0, 1371,    0, 1399, 1387, 1388, 1376,    0, 1377, 1378,
-     1407,    0, 1402, 1381, 1379, 1414,    0, 1415, 1401, 1419,
-     1408, 1417,    0, 1394, 1411,    0, 1396, 1423, 1408, 1412,
-
-     1413,    0, 1401, 1432,    0, 1403, 1434, 1432, 1418, 1408,
-     1432, 1410,    0,    0, 1428,    0, 1407, 1406, 1441, 1443,
-     1443, 1413, 1415, 1415,    0, 1448,    0, 1433, 1452, 1442,
-     1450, 1444, 1455, 1456, 1442,    0, 1456, 1444, 1445, 1449,
-     1457, 1454, 1463,    0, 1457, 1477, 1486,    0,    0, 1448,
-        0, 1481,    0, 1473, 1482, 1486,    0, 1491, 1479, 1490,
-     1480, 1496,    0,    0, 1466,    0, 1499,    0, 1484, 1503,
-     1493, 1501, 1495, 1506, 1507, 1493,    0, 1507, 1495, 1496,
-     1500, 1508, 1505, 1509,    0, 1500, 1515, 1520,    0,    0,
-     1486,    0,    0,    0,    0,    0,    0,    0, 1508, 1515,
-
-     1521, 1518, 1515, 1515, 1511, 1527, 1527, 1520, 1533, 1519,
-     1529, 1530, 1522, 1521, 1541, 1532, 1531, 1545, 1520,    0,
-     1551, 1553, 1544, 1559, 1552, 1557, 1548, 1568, 1544,    0,
-     1562, 1568, 1574, 1571, 1568, 1567, 1563, 1579, 1579, 1571,
-     1584, 1570, 1580, 1581, 1573, 1572, 1592, 1583, 1582, 1596,
-     1566, 1581, 1595, 1587, 1590, 1588, 1592, 1597,    0, 1588,
-        0,    0, 1600, 1596, 1606, 1610,    0, 1611, 1609, 1605,
-     1606, 1603, 1582, 1604, 1607, 1611, 1602,    0,    0, 1618,
-     1622, 1620, 1590, 1608, 1627, 1622, 1630, 1629, 1632, 1637,
-        0, 1628,    0,    0, 1640, 1636, 1651, 1655,    0, 1656,
-
-     1654, 1650, 1651, 1648, 1627, 1644, 1661, 1645, 1661, 1653,
-     1655, 1654,    0,    0, 1669, 1667, 1653, 1655, 1669, 1668,
-     1656, 1672, 1642, 1659, 1675, 1666,    0, 1678, 1665, 1680,
-     1650, 1668, 1685, 1669, 1685, 1677, 1679, 1678,    0,    0,
-     1693, 1691, 1677, 1679, 1693, 1692, 1680, 1696, 1666,    0,
-     1683, 1673,    0, 1674, 1691, 1696, 1691, 1707,    0, 1693,
-     1696, 1701, 1685,    0, 1670, 1687,    0, 1705, 1715, 1701,
-     1704, 1676,    0, 1704, 1694,    0, 1695, 1712, 1714, 1709,
-     1725,    0, 1711, 1714, 1719, 1703,    0, 1688, 1705, 1736,
-     1737, 1725, 1709,    0, 1728,    0, 1724, 1731, 1729, 1698,
-
-     1746, 1717, 1735,    0, 1731, 1704, 1722, 1754, 1755, 1743,
-     1727,    0, 1746,    0, 1742, 1749, 1747, 1717, 1747, 1755,
-     1754, 1764, 1758, 1740, 1767,    0,    0, 1769, 1757,    0,
-     1764, 1763, 1773, 1773,    0,    0,    0, 1761, 1769, 1768,
-     1778, 1772, 1754, 1780,    0,    0, 1782, 1770,    0, 1764,
-     1781, 1787, 1780, 1781, 1793, 1783, 1782, 1788, 1789, 1795,
-     1788, 1789, 1777, 1794, 1800, 1793, 1794, 1806, 1796, 1795,
-     1801, 1798, 1805,    0, 1795, 1799, 1803, 1815, 1797, 1803,
-     1812,    0, 1802, 1820, 1809, 1816,    0, 1806, 1810, 1814,
-     1826, 1808, 1814, 1828, 1817, 1817, 1830, 1822, 1828,    0,
-
-     1818, 1823, 1823, 1832, 1838, 1827, 1827, 1840, 1832, 1838,
-        0, 1828, 1832,    0, 1817, 1848, 1835, 1832, 1843,    0,
-     1822, 1835, 1840,    0, 1825, 1856, 1843, 1840, 1851, 1849,
-     1857, 1843, 1861,    0, 1845, 1861,    0, 1855, 1863, 1849,
-     1867,    0, 1851, 1853, 1859, 1865, 1874, 1851, 1863, 1859,
-     1865, 1871, 1880, 1857,    0, 1879, 1869, 1865,    0, 1882,
-        0, 1883, 1873, 1869,    0,    0, 1876, 1882,    0,    0,
-     1878, 1884,    0, 1879,    0, 1880, 1882, 1883,    0,    0,
-     2607, 1922, 1932, 1942, 1952, 1962, 1970, 1980, 1987, 1994,
-     2001, 2011, 2018, 2028, 2038, 2048, 2051, 2059, 2066, 1983,
-
-     2073, 2083, 2093, 2103, 2113
+      478,  515, 2559, 2564, 2561, 2569,  599,  573,  517,  591,
+      599, 2552, 2567,  645, 2570, 2565, 2536, 2532, 2520, 2526,
+        0, 1044, 2634, 2634,    0, 2634, 2634, 2567, 2586, 1089,
+     2565, 2564, 2634, 2563,    0, 2562,    0,  464, 2634,    0,
+     2561, 2634, 1134,  635,  666,  647,  667,  671,  339, 2557,
+     2539, 2535,  551, 2537, 2634, 2634,  685,  730,  732,  694,
+      754,  455, 2522, 2506, 2502,  498, 2504,    0, 2573, 2634,
+
+        0, 2562, 2634,    0, 2634, 2634, 2634, 2553,  536,  534,
+      630, 2634, 2634, 2570,    0,    0, 2566, 2634,  736, 2634,
+     2634,    0,    0,    0,    0,    0,  757,    0,    0, 2547,
+     2634,    0, 2634, 2546, 2524, 2538, 2521, 2531,  580,    0,
+     2533, 2524, 2522, 2516,  641, 2530, 2514, 2527, 2527, 2511,
+      669, 2518, 2514, 2510, 2512, 2514,  798, 2520, 2493, 2509,
+      657, 2506, 2508, 2496,  727, 2507, 2509, 2497, 2511, 2511,
+     2499, 2512, 2505,  691, 2496, 2484, 2491, 2503, 2486, 2505,
+     2503, 2485, 2485, 2484, 2453, 2456, 2461, 2446, 2634, 2634,
+     2634,    0, 1193, 2634, 2634, 2634,    0, 2634, 2634,  477,
+
+      809,    0, 2634, 2634,    0, 2634,  842,  845,  889,    0,
+     2488,  712,    0,  917, 2482, 2480,  679,  949,  976, 2489,
+     2490, 2477,  751, 2486, 2476, 2488, 2464, 2473, 2462,  673,
+     2473, 2475, 2478, 2467, 2474, 2454, 2474, 2476,  995, 2425,
+        0, 1244,    0,    0,  884,    0, 2457, 2471, 2454, 2464,
+      742,    0, 2466, 2457, 2455, 2449,  721, 2463, 2447, 2460,
+     2460, 2444,  733, 2451, 2447, 2443, 2445, 2447,  802, 2453,
+     2426, 2442,  773,  564, 2442, 2440, 2429,  900, 2440, 2442,
+     2430, 2444, 2444, 2432, 2445, 2438,  806, 2429, 2417, 2424,
+     2436, 2419, 2438, 2436, 2418, 2418, 2417, 2386, 2389, 2394,
+
+     2379,    0, 1295, 2452, 2634,    0, 1346,    0,    0,    0,
+      678,  888,  833,    0, 2420,  928,  937, 2419, 2423, 2406,
+     2407, 2405, 2422, 2409, 2417, 2418, 2416, 2417, 2396,  851,
+     2376,  854,  969, 2375, 2379, 2364, 2365, 2363, 2378, 2366,
+     2373, 2374, 2372, 2373, 2354, 2426,    0,    0, 2407, 2406,
+      794,  836,  757, 2634, 2634, 2385, 2381, 2393, 2390, 2391,
+     2381, 2379, 2389, 2389, 2386, 2371, 2364, 2387, 2386, 2377,
+     2382, 2366, 2371, 2377, 2369, 2379, 2376, 2357,    0, 2365,
+     2361, 2366, 2353, 2368, 2356, 2365, 2363, 2365, 2361,    0,
+     2352, 2346, 2347, 2352, 2348, 2337, 2354, 2344, 2341, 2340,
+
+     2335, 2352, 2346, 2336, 2333, 2339, 2333, 2345, 2329, 2345,
+     2346, 2328, 2344, 2332, 2336, 2323, 2296,    0,    0, 2304,
+        0,    0,  998, 2324, 1004, 2331, 2332, 2322, 2331, 2331,
+     2314, 2307, 2330, 1049, 2327, 2317, 2307, 2315, 2311, 2304,
+     2308, 2316, 2318,    0,    0, 2301, 2302, 2304, 2293, 2310,
+     2298, 2293, 2301, 2308, 2309, 2310, 2265, 2273,    0,    0,
+     2293, 2289, 2301, 2298, 2299, 2289, 2287, 2297, 2297, 2294,
+     2279, 2272, 2295, 2294, 2285, 2290, 2274, 2279, 2285, 2277,
+     2287, 2284, 2265,    0, 2273, 2269, 2274, 2261, 2276, 2264,
+     2273, 2271, 2273, 2269,    0,    0, 2260,    0, 2254, 2255,
+
+     2260, 2256, 2245, 2262, 2252, 2249, 2248, 2243, 2260, 2254,
+     2244, 2241, 2247, 2241, 2253, 2237, 2253, 2254, 2236, 2252,
+     2240, 2244, 2231, 2204,    0,    0, 2212,    0,    0, 2232,
+      897, 2241, 2240, 2228,    0, 2238, 2229, 2221, 2236, 2234,
+     2233, 2225, 2216, 2217, 2220, 2188,  925, 2196, 2195, 2184,
+        0, 2193, 2185, 2178, 2191, 2189, 2188, 2181, 2173, 2174,
+     2176,  615,  722,  258, 2207,    0, 2200, 2203, 2198, 2210,
+     2196,    0, 2202,    0, 2192,    0, 2191, 2179, 2195, 2188,
+     2182, 2185, 2187,    0, 2184, 2198, 2186, 2180,    0, 2198,
+     2179, 2180,    0, 2192, 2176, 2194,    0, 2176,    0, 2178,
+
+     2177, 2190, 2159, 2180, 2167,  977, 2168, 2177,    0, 2170,
+     2181, 2174, 2177, 2161, 2165, 2148, 2169, 2173, 2156, 2163,
+     2165, 2168, 2163, 2129, 2125, 2157,    0, 2154, 2149, 2161,
+        0, 2154, 2144,    0, 2132, 2148, 2141, 2139, 2143, 2137,
+        0, 2137,    0, 2136, 2154,    0, 2139, 2152, 2121, 2142,
+      978, 2141, 2144, 2133, 2138, 2134, 2103, 2099, 2131,    0,
+     2124, 2127, 2122, 2134, 2120,    0, 2126,    0, 2116,    0,
+     2115, 2103, 2119, 2112, 2106, 2109, 2111,    0, 2108, 2122,
+     2110, 2096,    0, 2105, 2077, 2069,    0, 2069, 2050, 2066,
+        0, 2048,    0, 2047, 2037, 2041, 2001, 2017, 1989, 1006,
+
+     1990, 1999,    0,  220,  344,  360,  368,  446,  472,  486,
+      597,  624,  613,  640,  700,  709,  763,  733,  766,  800,
+      796,  802,    0,    0,    0,  801,  831, 1414,    0,    0,
+      816,  827,    0,  828,  848,  813,  810,  815,    0,    0,
+        0,  820,  844, 1494,    0,    0,  832,  840,    0,  839,
+      876,  940,  933,  916,  902,    0,  916,  918,  945,  949,
+        0, 1009,  957,  947,  962,    0,    0,  966,  972,    0,
+      963,    0,  994, 1004,  988, 1000, 1020, 1017, 1022, 1003,
+     1010, 1029, 1036, 1033, 1030, 1032, 1042, 1054,    0, 1052,
+     1043, 1051, 1045, 1048,    0, 1057, 1062, 1064,    0, 1045,
+
+     1058, 1068, 1051, 1057, 1023, 1037, 1054, 1069, 1065, 1081,
+        0, 1086, 1069, 1084,    0, 1092,    0, 1093, 1067, 1091,
+     1096, 1082, 1098, 1094, 1090, 1093, 1105, 1103, 1094, 1103,
+     1109, 1102, 1062, 1076, 1093,    0, 1100, 1096, 1112, 1113,
+        0, 1129, 1114, 1101, 1124,    0,    0, 1127, 1118,    0,
+     1102,    0, 1130, 1132, 1112, 1124, 1144, 1140, 1146, 1126,
+     1133, 1152, 1150, 1146, 1142, 1137, 1147, 1159,    0, 1157,
+     1148, 1155, 1149, 1151,    0, 1166, 1172, 1174,    0, 1155,
+     1168, 1176, 1160, 1166, 1132, 1146, 1163,    0, 1175, 1175,
+     1170,    0, 1574,    0, 1188,    0, 1191, 1143,    0, 1157,
+
+     1157, 1153,    0, 1654,    0, 1169,    0, 1173, 1212, 1216,
+     1213, 1189, 1204,    0, 1208,    0, 1199, 1193, 1184, 1211,
+     1213, 1213,    0, 1216, 1215, 1201, 1203,    0, 1203,    0,
+     1220,    0, 1212, 1212,    0, 1227,    0, 1204, 1224, 1215,
+     1236, 1211, 1212, 1230, 1231, 1221, 1228, 1242, 1243, 1253,
+        0,    0, 1247, 1213, 1232, 1244, 1259,    0, 1262, 1253,
+     1263, 1265, 1265, 1266, 1253,    0, 1269, 1255,    0, 1269,
+        0, 1267, 1258, 1279, 1266, 1259, 1279, 1285, 1244, 1263,
+     1275, 1296,    0, 1299,    0, 1290, 1284, 1276, 1304, 1306,
+     1306,    0, 1309, 1308, 1294, 1296,    0, 1296,    0, 1313,
+
+        0, 1299, 1299,    0, 1314,    0, 1290, 1307, 1298, 1319,
+     1294, 1295, 1319, 1314, 1304, 1312, 1329, 1326, 1336,    0,
+        0, 1330, 1296, 1315, 1333, 1339,    0,    0,    0, 1335,
+     1307, 1313,    0,    0,    0, 1311, 1366, 1367, 1358,    0,
+     1359, 1345, 1363, 1352, 1361,    0, 1338, 1355,    0, 1340,
+     1367, 1352, 1356, 1357,    0, 1345, 1401, 1354,    0, 1353,
+     1384, 1382, 1369, 1361, 1388, 1373,    0,    0, 1391,    0,
+     1370, 1369, 1404,    0, 1410, 1396, 1410,    0, 1387,    0,
+     1414, 1402, 1403, 1391, 1400,    0, 1393, 1394, 1418,    0,
+     1413, 1392, 1390, 1425,    0, 1426, 1412, 1430, 1419, 1428,
+
+        0, 1405, 1422,    0, 1407, 1434, 1419, 1423, 1424,    0,
+     1412, 1444, 1423,    0, 1416, 1447, 1445, 1432, 1421, 1445,
+     1423,    0,    0, 1441,    0, 1420, 1418, 1453, 1455, 1455,
+     1425, 1427, 1427,    0, 1460,    0, 1445, 1464, 1459, 1470,
+     1469, 1481, 1482, 1468,    0, 1482, 1470, 1471, 1480, 1465,
+     1489, 1486, 1490,    0, 1481, 1496, 1501,    0,    0, 1467,
+        0, 1500,    0, 1492, 1500, 1504,    0, 1503, 1491, 1480,
+     1504, 1494, 1509,    0,    0, 1480,    0, 1513,    0, 1498,
+     1517, 1507, 1515, 1509, 1520, 1522, 1508,    0, 1522, 1510,
+     1511, 1515, 1500, 1524, 1521, 1525,    0, 1516, 1531, 1555,
+
+        0,    0, 1501,    0,    0,    0,    0,    0,    0,    0,
+     1523, 1529, 1535, 1532, 1529, 1528, 1524, 1540, 1540, 1552,
+     1549, 1544, 1556, 1557, 1559, 1558, 1557, 1577, 1567, 1566,
+     1580, 1550,    0, 1578, 1575, 1565, 1580, 1572, 1579, 1580,
+     1570, 1590, 1560,    0, 1578, 1584, 1591, 1588, 1585, 1584,
+     1580, 1596, 1596, 1588, 1602, 1588, 1598, 1599, 1600, 1592,
+     1592, 1612, 1602, 1601, 1615, 1585, 1600, 1614, 1606, 1609,
+     1607, 1610, 1615,    0, 1606,    0,    0, 1618, 1619, 1622,
+     1638, 1643,    0, 1644, 1642, 1638, 1639, 1636, 1620, 1642,
+     1645, 1649, 1640,    0,    0, 1646, 1657, 1661, 1659, 1629,
+
+     1647, 1661, 1653, 1656, 1654, 1657, 1662,    0, 1653,    0,
+        0, 1665, 1661, 1661, 1672, 1676,    0, 1677, 1675, 1671,
+     1672, 1669, 1648, 1666, 1683, 1667, 1683, 1675, 1677, 1676,
+        0,    0, 1691, 1673, 1690, 1676, 1678, 1692, 1691, 1679,
+     1695, 1665, 1682, 1698, 1689,    0, 1685, 1702, 1692, 1706,
+     1676, 1694, 1711, 1695, 1711, 1703, 1705, 1704,    0,    0,
+     1719, 1701, 1718, 1704, 1706, 1720, 1719, 1707, 1723, 1693,
+        0, 1710, 1700,    0, 1701, 1718, 1720, 1715, 1721, 1732,
+        0, 1718, 1721, 1726, 1710,    0, 1695, 1712,    0, 1730,
+     1730, 1741, 1727, 1730, 1702,    0, 1730, 1720,    0, 1721,
+
+     1738, 1740, 1735, 1741, 1752,    0, 1738, 1741, 1746, 1730,
+        0, 1715, 1732, 1763, 1764, 1752, 1736,    0,    0, 1755,
+        0, 1751, 1758, 1756, 1725, 1773, 1744,    0, 1762,    0,
+     1758, 1731, 1749, 1781, 1782, 1770, 1754,    0,    0, 1773,
+        0, 1769, 1776, 1774, 1744, 1774, 1782, 1781, 1791, 1785,
+     1767, 1794,    0,    0, 1796, 1784,    0, 1791, 1790, 1800,
+     1800,    0,    0,    0, 1788, 1796, 1795, 1805, 1799, 1781,
+     1807,    0,    0, 1809, 1797,    0, 1791, 1808, 1814, 1807,
+     1808, 1820, 1810, 1809, 1815, 1816, 1822, 1815, 1816, 1804,
+     1821, 1827, 1820, 1821, 1833, 1823, 1822, 1828, 1825, 1832,
+
+        0, 1822, 1826, 1830, 1842, 1824, 1830, 1839,    0, 1829,
+     1847, 1836, 1843,    0, 1833, 1837, 1841, 1853, 1835, 1841,
+     1855, 1844, 1844, 1857, 1849, 1855,    0, 1845, 1850, 1850,
+     1859, 1865, 1854, 1854, 1867, 1859, 1865,    0, 1855, 1859,
+        0, 1844, 1875, 1862, 1859, 1870,    0, 1849, 1862, 1867,
+        0, 1852, 1883, 1870, 1867, 1878, 1876, 1884, 1870, 1888,
+        0, 1872, 1888,    0, 1882, 1890, 1876, 1894,    0, 1878,
+     1880, 1886, 1892, 1901, 1878, 1890, 1886, 1892, 1898, 1907,
+     1884,    0, 1906, 1896, 1892,    0, 1909,    0, 1910, 1900,
+     1896,    0,    0, 1903, 1909,    0,    0, 1905, 1911,    0,
+
+     1906,    0, 1907, 1909, 1910,    0,    0, 2634, 1949, 1959,
+     1969, 1979, 1989, 1997, 2007, 2014, 2021, 2028, 2038, 2045,
+     2055, 2065, 2075, 2078, 2086, 2093, 2010, 2100, 2110, 2120,
+     2130, 2140
     } ;
 
-static yyconst flex_int16_t yy_def[1706] =
+static yyconst flex_int16_t yy_def[1733] =
     {   0,
-     1682, 1682, 1681,    3, 1681,    5, 1681,    7, 1683, 1683,
-     1681,   11, 1684, 1684, 1685, 1685, 1686, 1686, 1681, 1681,
-     1681, 1681, 1681, 1687, 1688, 1687, 1681, 1681, 1681, 1681,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1681,
-     1681, 1687, 1681, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1681, 1681, 1681, 1687, 1681, 1681, 1681, 1688, 1689, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1689, 1689, 1681,
-       90, 1681, 1681, 1681, 1681, 1681, 1681, 1689,   98,   98,
-
-       98,   98,   98, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1681, 1681,   98, 1689, 1681, 1681, 1681, 1689,
-     1690, 1681, 1690, 1690, 1681, 1681, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1691, 1681, 1681, 1691, 1681, 1681, 1681, 1692, 1693,
-     1694, 1681, 1681, 1681, 1693, 1693,   90,   90, 1681, 1695,
-     1681, 1681, 1693,  173,  173,  173,  173,  173, 1693, 1693,
-     1693, 1693, 1693, 1693, 1681, 1681,  173,  173,  173,  173,
-      173, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1681, 1681,
-
-     1696, 1681, 1681, 1697, 1681, 1681, 1681, 1698, 1698, 1698,
-     1698, 1681, 1681, 1681, 1687, 1687, 1688, 1681,   26, 1681,
-     1681, 1687, 1687, 1687, 1687, 1687, 1687, 1687,   26, 1681,
-     1681, 1687, 1681, 1681, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1681, 1681,
-     1681, 1689, 1689, 1681, 1681, 1681, 1699, 1681, 1681,   90,
-
-       90,  301, 1681, 1681, 1700, 1681,   98,   98,   98, 1689,
-     1689, 1689, 1689,   98, 1689, 1689, 1689,   98,   98, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,   98, 1689,
-     1690, 1690, 1701, 1690, 1681, 1700, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1691, 1691, 1692, 1681, 1693, 1693, 1694, 1694, 1695,
-      173,  173,  173, 1693, 1693,  173,  173, 1693, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,  173,
-     1693,  173,  173, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1681, 1696, 1697, 1698, 1681,
-     1698, 1698, 1698, 1681, 1681, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1689, 1699, 1700, 1689,   98, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689,   98, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1690, 1701,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1691, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1698, 1698, 1698, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1702, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1693, 1693, 1703, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1698, 1698, 1698, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1687, 1687, 1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1693, 1693, 1693, 1693, 1693, 1704, 1702,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1705,
-
-     1703, 1693, 1693, 1693, 1693, 1698, 1698, 1698, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1693, 1693,
-     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1698, 1698, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1693, 1693,
-     1693, 1693, 1693, 1693, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1693, 1693, 1693, 1693, 1693, 1693, 1687, 1687, 1687,
-
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1689,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1690, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1687, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1689, 1689,
-     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1687, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1689,
-     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1687,
-     1687, 1687, 1687, 1687, 1687, 1689, 1689, 1690, 1690, 1690,
-     1690, 1690, 1690, 1687, 1687, 1687, 1687, 1687, 1689, 1690,
-     1690, 1690, 1690, 1690, 1687, 1687, 1687, 1687, 1687, 1689,
-     1690, 1690, 1690, 1690, 1690, 1687, 1687, 1687, 1689, 1690,
-     1690, 1690, 1687, 1687, 1690, 1690, 1687, 1690, 1687, 1690,
-        0, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-
-     1681, 1681, 1681, 1681, 1681
+     1709, 1709, 1708,    3, 1708,    5, 1708,    7, 1710, 1710,
+     1708,   11, 1711, 1711, 1712, 1712, 1713, 1713, 1708, 1708,
+     1708, 1708, 1708, 1714, 1715, 1714, 1708, 1708, 1708, 1708,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1708,
+     1708, 1714, 1708, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1708, 1708, 1708, 1714, 1708, 1708, 1708, 1715, 1716, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1716, 1716, 1708,
+       90, 1708, 1708, 1708, 1708, 1708, 1708, 1716,   98,   98,
+
+       98,   98,   98, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1708, 1708,   98, 1716, 1708, 1708, 1708, 1716,
+     1717, 1708, 1717, 1717, 1708, 1708, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1718, 1708, 1708, 1718, 1708, 1708, 1708, 1719, 1720,
+     1721, 1708, 1708, 1708, 1720, 1720,   90,   90, 1708, 1722,
+     1708, 1708, 1720,  173,  173,  173,  173,  173, 1720, 1720,
+     1720, 1720, 1720, 1720, 1708, 1708,  173,  173,  173,  173,
+      173, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1708, 1708,
+
+     1723, 1708, 1708, 1724, 1708, 1708, 1708, 1725, 1725, 1725,
+     1725, 1708, 1708, 1708, 1714, 1714, 1715, 1708,   26, 1708,
+     1708, 1714, 1714, 1714, 1714, 1714, 1714, 1714,   26, 1708,
+     1708, 1714, 1708, 1708, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1708, 1708,
+     1708, 1716, 1716, 1708, 1708, 1708, 1726, 1708, 1708,   90,
+
+       90,  301, 1708, 1708, 1727, 1708,   98,   98,   98, 1716,
+     1716, 1716, 1716,   98, 1716, 1716, 1716,   98,   98, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,   98, 1716,
+     1717, 1717, 1728, 1717, 1708, 1727, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1718, 1718, 1719, 1708, 1720, 1720, 1721, 1721, 1722,
+      173,  173,  173, 1720, 1720,  173,  173, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,  173,
+     1720,  173,  173, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1708, 1723, 1724, 1725, 1708,
+     1725, 1725, 1725, 1708, 1708, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1716, 1726, 1727, 1716,   98, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716,   98, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717, 1728,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1718, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1725, 1725, 1725, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1729, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1730, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1725, 1725, 1725, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+
+     1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1720, 1720, 1720, 1720,
+     1720, 1731, 1729, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
+
+     1720, 1720, 1732, 1730, 1720, 1720, 1720, 1720, 1725, 1725,
+     1725, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1720, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1725, 1725, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1720, 1720, 1720,
+     1720, 1720, 1720, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1720, 1720, 1720, 1720, 1720, 1720, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+     1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717,
+
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1716, 1716,
+     1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1716, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1714, 1714,
+
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716,
+     1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716,
+     1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1716, 1716, 1716, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1714, 1714, 1714, 1714,
+     1714, 1714, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717,
+     1714, 1714, 1714, 1714, 1714, 1716, 1717, 1717, 1717, 1717,
+     1717, 1714, 1714, 1714, 1714, 1714, 1716, 1717, 1717, 1717,
+     1717, 1717, 1714, 1714, 1714, 1716, 1717, 1717, 1717, 1714,
+
+     1714, 1717, 1717, 1714, 1717, 1714, 1717,    0, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708
     } ;
 
-static yyconst flex_int16_t yy_nxt[2689] =
+static yyconst flex_int16_t yy_nxt[2716] =
     {   0,
        21,   22,   23,   24,   25,   21,   26,   27,   28,   29,
        30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
@@ -1015,7 +1033,7 @@ static yyconst flex_int16_t yy_nxt[2689] =
       123,  123,  123,  123,  123,  123,  123,  123,  148,  123,
       123,  149,  123,  123,  150,  123,  123,  123,  123,  117,
       118,  119,  151,   75,   75,   20,   75,   75,   75,  152,
-       75,   75,   75,   75,   75,  153,   75,  154,  225,  965,
+       75,   75,   75,   75,   75,  153,   75,  154,  225,  971,
       125,  126,   75,   75,   75,  156,   75,   75,  220,  226,
       230,  231,  199,  200,  199,  200,  201,  450,  201,  233,
       234,  235,  221,  236,  247,  237,  241,  202,  248,  202,
@@ -1028,9 +1046,9 @@ static yyconst flex_int16_t yy_nxt[2689] =
       125,  126,   75,   75,   75,  156,   75,   75,  203,  270,
       203,  220,  357,  266,  303,  358,  228,  267,  228,  271,
       268,  269,  297,  230,  231,  221,  233,  234,  290,  229,
-      325,  966,  422,  290,   75,  329,   75,   75,  423,  274,
+      325,  972,  422,  290,   75,  329,   75,   75,  423,  274,
       326,  303,  275,  276,  327,  330,  228,  298,  228,  277,
-      278,  279,  328,  967,  280,  281,  229,  968,  344,  282,
+      278,  279,  328,  973,  280,  281,  229,  974,  344,  282,
 
        75,   75,   75,   21,   22,  157,  158,   21,  159,  160,
        27,   28,   29,   30,  161,  162,  163,  164,  165,  166,
@@ -1041,13 +1059,13 @@ static yyconst flex_int16_t yy_nxt[2689] =
       188,  189,  176,  190,  191,  165,  165,  165,  165,  192,
       165,  193,  194,  195,  165,  196,  197,  165,  165,  165,
        71,   72,   73,  198,   21,  199,  200,   21,   21,  201,
-      969,   21,   21,   21,   21,   21,   21,  205,   21,  296,
+      975,   21,   21,   21,   21,   21,   21,  205,   21,  296,
 
       202,   21,   21,  205,  205,   21,   21,   21,   21,  227,
-      227,  970,  303,  314,  331,  314,  362,  335,  332,  438,
+      227,  976,  303,  314,  331,  314,  362,  335,  332,  438,
       315,  336,  333,  316,  439,  303,  363,  228,  337,  228,
       292,  292,  314,  338,  314,   21,   21,   21,   21,  303,
-      353,  971,  292,  343,  354,  317,  377,  355,  364,  292,
+      353,  977,  292,  343,  354,  317,  377,  355,  364,  292,
       292,  365,  303,  450,  366,  450,  378,  228,  443,  228,
       356,  206,   21,  207,   21,   21,  199,  200,   21,   21,
       201,  444,   21,   21,   21,   21,   21,   21,  205,   21,
@@ -1057,53 +1075,53 @@ static yyconst flex_int16_t yy_nxt[2689] =
       452,  292,  375,  314,  595,  314,  376,  292,  320,  292,
       361,  451,  596,  292,  292,  292,   21,   21,   21,   21,
       292,  292,  347,  460,  348,  321,  349,  371,  372,  379,
-      972,  383,  350,  380,  450,  461,  381,  382,  373,  351,
+      978,  383,  350,  380,  450,  461,  381,  382,  373,  351,
       352,  384,  206,   21,  207,   21,   21,  199,  200,  450,
-       25,  201,  973,   21,   21,   21,   21,  974,   21,  205,
+       25,  201,  979,   21,   21,   21,   21,  980,   21,  205,
       416,  413,  202,   21,   21,  205,  205,   21,   21,   21,
-      314,  406,  314,  413,  387,  852,  975,  388,  389,  466,
+      314,  406,  314,  413,  387,  852,  981,  388,  389,  466,
       292,  467,  488,  406,  390,  391,  392,  292,  292,  393,
       394,  417,  413,  413,  395,  489,  473,  413,  418,  453,
 
       547,  339,  406,  406,  413,  419,  209,  406,  210,  548,
       421,  413,  211,  474,  406,  420,  504,  531,  505,  532,
       413,  406,  506,  212,   21,  213,   21,   21,  199,  200,
-      406,   25,  201,  976,   21,   21,   21,   21,  977,   21,
+      406,   25,  201,  982,   21,   21,   21,   21,  983,   21,
       205,  450,  430,  202,   21,   21,  205,  205,   21,   21,
        21,  431,  345,  345,  493,  527,  413,  494,  413,  571,
       578,  572,  435,  495,  345,  345,  406,  528,  406,  436,
       304,  228,  304,  228,  227,  227,  450,  579,  538,  853,
       413,  539,  304,  346,  304,  565,  432,  209,  433,  210,
-      406,  540,  228,  211,  228,  434,  978,  566,  593,  979,
+      406,  540,  228,  211,  228,  434,  984,  566,  593,  985,
 
       304,  228,  304,  228,  212,   21,  213,   21,  219,  219,
       346,  594,  304,  450,  304,  664,  219,  219,  219,  219,
       219,  219,  228,  437,  228,  480,  301,  301,  481,  585,
-      482,  611,  586,  612,  587,  980,  981,  613,  483,  982,
-      983,  484,  588,  984, 1681,  589, 1681,  219,  219,  219,
-      219,  219,  219,  293,  293,  450,  985,  303,  986,  413,
-      987,  293,  293,  293,  293,  293,  293,  662,  314,  406,
-      314,  314,  988,  314, 1681,  991, 1681,  413,  292,  992,
-      413,  292,  993,  994,  303,  292,  292,  406,  524,  292,
-      406,  995,  293,  293,  293,  293,  293,  293,  300,  300,
-
-      996,  345,  345,  997,  998,  663,  301,  302,  301,  302,
-      301,  301,  999,  303,  413,  314,  304,  525,  304,  304,
+      482,  611,  586,  612,  587,  986,  987,  613,  483,  988,
+      989,  484,  588,  990, 1708,  589, 1708,  219,  219,  219,
+      219,  219,  219,  293,  293,  450,  991,  303,  994,  413,
+      995,  293,  293,  293,  293,  293,  293,  662,  314,  406,
+      314,  314,  996,  314, 1708,  997, 1708,  413,  292,  998,
+      413,  292,  999, 1000,  303,  292,  292,  406,  524,  292,
+      406, 1001,  293,  293,  293,  293,  293,  293,  300,  300,
+
+     1002,  345,  345, 1005, 1006,  663,  301,  302,  301,  302,
+      301,  301, 1007,  303,  413,  314,  304,  525,  304,  304,
       303,  304,  821,  646,  406,  292,  648,  600,  822,  305,
-      601,  630,  292,  292, 1002, 1003,  602,  301,  302,  301,
-      302,  301,  301,  314,  303,  314,  304, 1004,  304,  304,
-      303,  304, 1005,  292,  413,  450,  305,  307,  307, 1009,
-      292,  292, 1010,  413,  406,  307,  308,  307,  309,  307,
-      307,  632,  310,  406,  450,  314,  311,  314, 1011,  310,
-      633,  837, 1012,  312,  313,  292, 1013,  838,  310,  450,
-     1016, 1014,  292,  533, 1017,  413,  307,  314,  307,  314,
-
-      307,  307,  314,  310,  314,  406,  534, 1006, 1015,  310,
-     1018, 1007,  292, 1019, 1020,  310,  342,  342, 1021,  292,
-      292,  314, 1022,  314,  342,  342,  342,  342,  342,  342,
-      314,  292,  314,  304, 1023,  304, 1008, 1024,  292,  292,
-      292,  649, 1025, 1026, 1027, 1028,  727,  292,  292, 1029,
-     1030, 1031, 1032, 1033, 1034,  342,  342,  342,  342,  342,
+      601,  630,  292,  292, 1008,  450,  602,  301,  302,  301,
+      302,  301,  301,  314,  303,  314,  304, 1012,  304,  304,
+      303,  304,  450,  292,  413, 1013,  305,  307,  307,  450,
+      292,  292, 1014,  413,  406,  307,  308,  307,  309,  307,
+      307,  632,  310,  406, 1015,  314,  311,  314, 1016,  310,
+      633,  837, 1011,  312,  313,  292, 1019,  838,  310, 1010,
+     1020, 1021,  292,  533, 1022,  413,  307,  314,  307,  314,
+
+      307,  307,  314,  310,  314,  406,  534,  887,  926,  310,
+     1023, 1009,  292,  888,  927,  310,  342,  342, 1024,  292,
+      292,  314, 1025,  314,  342,  342,  342,  342,  342,  342,
+      314,  292,  314,  304, 1017,  304,  967, 1026,  292,  292,
+      292,  649,  968, 1027, 1028, 1029,  727,  292,  292, 1030,
+     1031, 1018, 1032, 1033, 1034,  342,  342,  342,  342,  342,
       342,  403,  403,  304, 1035,  304, 1036,  557, 1037,  403,
       403,  403,  403,  403,  403,  314, 1038,  314, 1039, 1040,
      1041, 1042,  736, 1043, 1044,  292, 1045, 1046, 1047, 1048,
@@ -1112,23 +1130,23 @@ static yyconst flex_int16_t yy_nxt[2689] =
       403,  403,  403,  403,  403,  403,  407,  407, 1057, 1058,
      1059, 1060, 1061, 1062,  407,  407,  407,  407,  407,  407,
      1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
-     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083,
-     1084, 1085, 1086, 1087, 1088,  407,  407,  407,  407,  407,
-      407,  411,  411, 1089, 1090, 1082, 1091, 1092, 1093,  411,
-      412,  411,  413,  411,  411, 1094,  414, 1095, 1096, 1097,
-      415, 1098, 1099,  414, 1100, 1101, 1102, 1103, 1104, 1105,
+     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
+     1083, 1084, 1085, 1088, 1089,  407,  407,  407,  407,  407,
+      407,  411,  411, 1090, 1086, 1091, 1092, 1093, 1094,  411,
+      412,  411,  413,  411,  411, 1095,  414, 1096, 1097, 1098,
+      415, 1087, 1099,  414, 1100, 1101, 1102, 1103, 1104, 1105,
      1106, 1107,  414, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
       411,  413,  411,  413,  411,  411, 1115,  414, 1116, 1117,
 
      1118, 1119, 1120,  414, 1121, 1122, 1123, 1124, 1125,  414,
-      293,  293, 1126, 1127, 1128, 1129, 1130,  450,  293,  293,
-      293,  293,  293,  293,  450, 1133, 1134, 1135,  521,  450,
-      521, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
+      293,  293, 1126, 1127, 1128, 1129, 1130, 1131,  293,  293,
+      293,  293,  293,  293, 1132, 1133, 1134, 1135,  521, 1136,
+      521,  450,  450, 1139, 1140,  450, 1141, 1142, 1143, 1144,
      1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,  293,
       293,  293,  293,  293,  293, 1154, 1155, 1156,  521, 1157,
-      521,  342,  342, 1158, 1159, 1160, 1131, 1161, 1162,  342,
-      342,  342,  342,  342,  342, 1163, 1132, 1164, 1165,  559,
-     1166,  559, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
+      521,  342,  342, 1158, 1159, 1160, 1161, 1162, 1163,  342,
+      342,  342,  342,  342,  342, 1164, 1165, 1166, 1167,  559,
+     1137,  559, 1138, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
      1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
 
       342,  342,  342,  342,  342,  342, 1185, 1186, 1187,  559,
@@ -1137,58 +1155,58 @@ static yyconst flex_int16_t yy_nxt[2689] =
       628, 1199,  628, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
      1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
      1217,  403,  403,  403,  403,  403,  403, 1218, 1219, 1220,
-      628, 1221,  628,  407,  407, 1222, 1223, 1224,  450,  450,
-     1225,  407,  407,  407,  407,  407,  407, 1226, 1227, 1228,
-     1229,  629, 1230,  629, 1231, 1232, 1233, 1234, 1235, 1236,
-     1237, 1238, 1239, 1241, 1242, 1243, 1244, 1240, 1245, 1246,
-
-     1247, 1248,  407,  407,  407,  407,  407,  407, 1249, 1250,
-     1251,  629, 1252,  629,  989,  989, 1253,  989,  989,  989,
-     1254,  989,  989,  989,  989,  989, 1255,  989, 1256, 1257,
-     1258, 1259, 1260, 1261,  989,  989,  989,  989,  989, 1262,
+      628, 1221,  628,  407,  407, 1222, 1223, 1224, 1225, 1226,
+     1227,  407,  407,  407,  407,  407,  407, 1228, 1229, 1230,
+     1231,  629, 1232,  629, 1233,  450,  450, 1234, 1235, 1236,
+     1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
+
+     1247, 1250,  407,  407,  407,  407,  407,  407, 1251, 1252,
+     1253,  629, 1254,  629,  992,  992, 1255,  992,  992,  992,
+     1256,  992,  992,  992,  992,  992, 1248,  992, 1257, 1258,
+     1259, 1249, 1260, 1261,  992,  992,  992,  992,  992, 1262,
      1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
-     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1282, 1283,
-     1284, 1285, 1281, 1286, 1287, 1288, 1289, 1290,  989, 1291,
-     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
+     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
+     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,  992, 1291,
+     1293, 1294, 1295, 1296, 1292, 1297, 1298, 1299, 1300, 1301,
      1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
-     1312,  989,  989,  989, 1000, 1000, 1313, 1000, 1000, 1000,
-
-     1314, 1000, 1000, 1000, 1000, 1000, 1315, 1000, 1319, 1320,
-     1321, 1316, 1322, 1323, 1000, 1000, 1000, 1000, 1000, 1317,
-     1324, 1325, 1326, 1327, 1318, 1328, 1329, 1330, 1331, 1332,
-     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
-     1343, 1344, 1345, 1346, 1347, 1348, 1351, 1352, 1000, 1353,
-     1354, 1355, 1356, 1349, 1357, 1358, 1359, 1360, 1350, 1361,
-     1363, 1364, 1365, 1366, 1367, 1368, 1369, 1362, 1370, 1371,
-     1372, 1000, 1000, 1000,  989,  989, 1373,  989,  989,  989,
-     1374,  989,  989,  989,  989,  989, 1375,  989, 1376, 1377,
-     1380, 1378, 1381, 1382,  989,  989,  989,  989,  989, 1379,
+     1312,  992,  992,  992, 1003, 1003, 1313, 1003, 1003, 1003,
+
+     1314, 1003, 1003, 1003, 1003, 1003, 1315, 1003, 1316, 1317,
+     1318, 1319, 1320, 1321, 1003, 1003, 1003, 1003, 1003, 1322,
+     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1332, 1333, 1334,
+     1335, 1336, 1337, 1338, 1330, 1339, 1340, 1341, 1342, 1331,
+     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1003, 1351,
+     1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
+     1362, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
+     1375, 1003, 1003, 1003,  992,  992, 1378,  992,  992,  992,
+     1363,  992,  992,  992,  992,  992, 1379,  992, 1364, 1380,
+     1381, 1376, 1382, 1365,  992,  992,  992,  992,  992, 1377,
 
      1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
-     1393, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1394, 1402,
-     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,  989, 1411,
-     1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
+     1393, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1395,
+     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,  992, 1412,
+     1413, 1414, 1415, 1416, 1417, 1411, 1418, 1419, 1420, 1421,
      1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
-     1432,  989,  989,  989, 1000, 1000, 1433, 1000, 1000, 1000,
-     1434, 1000, 1000, 1000, 1000, 1000, 1435, 1000, 1436, 1437,
-     1438, 1439, 1440, 1441, 1000, 1000, 1000, 1000, 1000, 1442,
+     1432,  992,  992,  992, 1003, 1003, 1433, 1003, 1003, 1003,
+     1434, 1003, 1003, 1003, 1003, 1003, 1435, 1003, 1436, 1437,
+     1438, 1439, 1440, 1441, 1003, 1003, 1003, 1003, 1003, 1442,
      1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
      1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
 
-     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1000, 1471,
+     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1003, 1471,
      1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
      1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
-     1492, 1000, 1000, 1000, 1493, 1494, 1495, 1496, 1497, 1498,
+     1492, 1003, 1003, 1003, 1493, 1494, 1495, 1496, 1497, 1498,
      1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
      1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
-     1519, 1520, 1523, 1524, 1525, 1521, 1526, 1527, 1528, 1529,
-     1530, 1531, 1534, 1535, 1536, 1532, 1537, 1538, 1522, 1539,
-     1542, 1543, 1544, 1540, 1545, 1546, 1547, 1548, 1533, 1549,
-     1550, 1551, 1552, 1553, 1554, 1555, 1541, 1556, 1557, 1558,
-
-     1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
-     1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
-     1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
+     1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
+     1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
+     1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1550,
+     1551, 1552, 1548, 1553, 1554, 1555, 1556, 1557, 1558, 1561,
+
+     1562, 1563, 1559, 1564, 1565, 1549, 1566, 1569, 1570, 1571,
+     1567, 1572, 1573, 1574, 1575, 1560, 1576, 1577, 1578, 1579,
+     1580, 1581, 1582, 1568, 1583, 1584, 1585, 1586, 1587, 1588,
      1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
      1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
      1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
@@ -1199,93 +1217,97 @@ static yyconst flex_int16_t yy_nxt[2689] =
 
      1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
      1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
-     1679, 1680,   20,   20,   20,   20,   20,   20,   20,   20,
-       20,   20,  155,  155,  155,  155,  155,  155,  155,  155,
-      155,  155,   21,   21,   21,   21,   21,   21,   21,   21,
-       21,   21,  204,  204,  204,  204,  204,  204,  204,  204,
-      204,  204,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  208,  215,  215,  215,  215,  215,  215,  215,  215,
-      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
-      292,  292,  523,  292,  292,  292,  292,  341,  341,  341,
-
-      341,  341,  341,  341,  402,  964,  963,  962,  402,  402,
-      402,  404,  404,  404,  404,  404,  404,  404,  404,  404,
-      404,  406,  406,  961,  406,  406,  406,  406,  408,  960,
-      408,  408,  408,  408,  408,  408,  408,  408,  410,  959,
-      410,  410,  410,  410,  410,  410,  410,  410,  447,  958,
-      447,  447,  447,  447,  447,  447,  447,  447,  448,  957,
-      448,  449,  449,  956,  955,  449,  449,  954,  449,  522,
-      522,  953,  522,  522,  522,  522,  560,  560,  560,  560,
-      560,  560,  560,  990,  952,  990,  990,  990,  990,  990,
-      990,  990,  990, 1001,  951, 1001, 1001, 1001, 1001, 1001,
-
-     1001, 1001, 1001,  989,  950,  989,  989,  989,  989,  989,
-      989,  989,  989, 1000,  949, 1000, 1000, 1000, 1000, 1000,
-     1000, 1000, 1000,  948,  947,  946,  945,  944,  943,  942,
-      941,  940,  939,  938,  937,  936,  935,  934,  933,  932,
-      931,  930,  929,  928,  927,  926,  925,  924,  923,  922,
-      921,  920,  919,  918,  917,  916,  915,  914,  913,  912,
-      911,  910,  909,  908,  907,  906,  905,  904,  903,  902,
-      901,  900,  899,  898,  897,  896,  895,  894,  893,  892,
-      891,  890,  889,  888,  887,  886,  885,  884,  883,  882,
-      881,  880,  879,  878,  877,  876,  875,  874,  873,  872,
-
-      871,  870,  869,  868,  867,  866,  865,  864,  863,  862,
-      861,  860,  859,  858,  857,  856,  855,  851,  850,  849,
-      848,  847,  846,  845,  844,  843,  842,  841,  840,  839,
-      836,  835,  834,  833,  832,  831,  830,  829,  828,  827,
-      826,  825,  824,  823,  820,  819,  818,  817,  816,  815,
-      814,  813,  812,  811,  810,  809,  808,  807,  806,  805,
-      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
-      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
-      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
-      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
-
-      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
-      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
-      744,  743,  742,  741,  740,  739,  738,  737,  735,  734,
-      733,  732,  731,  730,  729,  728,  726,  725,  724,  723,
-      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
-      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
-      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,
-      692,  691,  690,  689,  688,  687,  686,  685,  684,  683,
-      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
-      672,  671,  670,  669,  668,  667,  666,  665,  449,  450,
-
-      446,  661,  660,  659,  658,  657,  656,  655,  654,  653,
-      652,  651,  650,  647,  645,  644,  643,  642,  641,  640,
-      639,  638,  637,  636,  635,  634,  631,  405,  627,  626,
-      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
-      615,  614,  610,  609,  608,  607,  606,  605,  604,  603,
-      599,  598,  597,  592,  591,  590,  584,  583,  582,  581,
-      580,  577,  576,  575,  574,  573,  570,  569,  568,  567,
-      564,  563,  562,  561,  558,  556,  555,  554,  553,  552,
-      551,  550,  549,  546,  545,  544,  543,  542,  541,  537,
-      536,  535,  530,  529,  526,  520,  519,  518,  517,  516,
-
-      515,  514,  513,  512,  511,  510,  509,  508,  507,  503,
-      502,  501,  500,  499,  498,  497,  496,  492,  491,  490,
-      487,  486,  485,  479,  478,  477,  476,  475,  472,  471,
-      470,  469,  468,  465,  464,  463,  462,  459,  458,  457,
-      456,  455,  454,  218,  214,  450,  298,  446,  445,  442,
-      441,  440,  429,  426,  425,  424,  306,  299,  296,  295,
-      409,  405,  291,  401,  400,  399,  398,  397,  396,  386,
-      385,  370,  369,  368,  367,  340,  334,  324,  323,  322,
-      306,  295,  294,  218,  291,  214,  288,  287,  286,  285,
-      284,  283,  273,  272,  258,  257,  256,  255,  232,  224,
-
-      223,  222,  218,  216,  214, 1681,   19, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681
+     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
+     1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
+     1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,   20,
+       20,   20,   20,   20,   20,   20,   20,   20,   20,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,   21,
+       21,   21,   21,   21,   21,   21,   21,   21,   21,  204,
+      204,  204,  204,  204,  204,  204,  204,  204,  204,  208,
+      208,  208,  208,  208,  208,  208,  208,  208,  208,  215,
+
+      215,  215,  215,  215,  215,  215,  215,  217,  217,  217,
+      217,  217,  217,  217,  217,  217,  217,  292,  292,  523,
+      292,  292,  292,  292,  341,  341,  341,  341,  341,  341,
+      341,  402,  970,  969,  966,  402,  402,  402,  404,  404,
+      404,  404,  404,  404,  404,  404,  404,  404,  406,  406,
+      965,  406,  406,  406,  406,  408,  964,  408,  408,  408,
+      408,  408,  408,  408,  408,  410,  963,  410,  410,  410,
+      410,  410,  410,  410,  410,  447,  962,  447,  447,  447,
+      447,  447,  447,  447,  447,  448,  961,  448,  449,  449,
+      960,  959,  449,  449,  958,  449,  522,  522,  957,  522,
+
+      522,  522,  522,  560,  560,  560,  560,  560,  560,  560,
+      993,  956,  993,  993,  993,  993,  993,  993,  993,  993,
+     1004,  955, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+      992,  954,  992,  992,  992,  992,  992,  992,  992,  992,
+     1003,  953, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
+      952,  951,  950,  949,  948,  947,  946,  945,  944,  943,
+      942,  941,  940,  939,  938,  937,  936,  935,  934,  933,
+      932,  931,  930,  929,  928,  925,  924,  923,  922,  921,
+      920,  919,  918,  917,  916,  915,  914,  913,  912,  911,
+      910,  909,  908,  907,  906,  905,  904,  903,  902,  901,
+
+      900,  899,  898,  897,  896,  895,  894,  893,  892,  891,
+      890,  889,  886,  885,  884,  883,  882,  881,  880,  879,
+      878,  877,  876,  875,  874,  873,  872,  871,  870,  869,
+      868,  867,  866,  865,  864,  863,  862,  861,  860,  859,
+      858,  857,  856,  855,  851,  850,  849,  848,  847,  846,
+      845,  844,  843,  842,  841,  840,  839,  836,  835,  834,
+      833,  832,  831,  830,  829,  828,  827,  826,  825,  824,
+      823,  820,  819,  818,  817,  816,  815,  814,  813,  812,
+      811,  810,  809,  808,  807,  806,  805,  804,  803,  802,
+      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
+
+      791,  790,  789,  788,  787,  786,  785,  784,  783,  782,
+      781,  780,  779,  778,  777,  776,  775,  774,  773,  772,
+      771,  770,  769,  768,  767,  766,  765,  764,  763,  762,
+      761,  760,  759,  758,  757,  756,  755,  754,  753,  752,
+      751,  750,  749,  748,  747,  746,  745,  744,  743,  742,
+      741,  740,  739,  738,  737,  735,  734,  733,  732,  731,
+      730,  729,  728,  726,  725,  724,  723,  722,  721,  720,
+      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
+      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
+      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
+
+      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
+      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
+      669,  668,  667,  666,  665,  449,  450,  446,  661,  660,
+      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
+      647,  645,  644,  643,  642,  641,  640,  639,  638,  637,
+      636,  635,  634,  631,  405,  627,  626,  625,  624,  623,
+      622,  621,  620,  619,  618,  617,  616,  615,  614,  610,
+      609,  608,  607,  606,  605,  604,  603,  599,  598,  597,
+      592,  591,  590,  584,  583,  582,  581,  580,  577,  576,
+      575,  574,  573,  570,  569,  568,  567,  564,  563,  562,
+
+      561,  558,  556,  555,  554,  553,  552,  551,  550,  549,
+      546,  545,  544,  543,  542,  541,  537,  536,  535,  530,
+      529,  526,  520,  519,  518,  517,  516,  515,  514,  513,
+      512,  511,  510,  509,  508,  507,  503,  502,  501,  500,
+      499,  498,  497,  496,  492,  491,  490,  487,  486,  485,
+      479,  478,  477,  476,  475,  472,  471,  470,  469,  468,
+      465,  464,  463,  462,  459,  458,  457,  456,  455,  454,
+      218,  214,  450,  298,  446,  445,  442,  441,  440,  429,
+      426,  425,  424,  306,  299,  296,  295,  409,  405,  291,
+      401,  400,  399,  398,  397,  396,  386,  385,  370,  369,
+
+      368,  367,  340,  334,  324,  323,  322,  306,  295,  294,
+      218,  291,  214,  288,  287,  286,  285,  284,  283,  273,
+      272,  258,  257,  256,  255,  232,  224,  223,  222,  218,
+      216,  214, 1708,   19, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708
     } ;
 
-static yyconst flex_int16_t yy_chk[2689] =
+static yyconst flex_int16_t yy_chk[2716] =
     {   0,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
@@ -1314,7 +1336,7 @@ static yyconst flex_int16_t yy_chk[2689] =
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
-        9,    9,    9,    9,    9,    9,    9,    9,   36,  800,
+        9,    9,    9,    9,    9,    9,    9,    9,   36,  804,
         9,    9,    9,    9,    9,    9,    9,    9,   28,   36,
        41,   41,   13,   13,   14,   14,   13,  664,   14,   43,
        43,   45,   28,   45,   48,   45,   46,   13,   48,   14,
@@ -1327,9 +1349,9 @@ static yyconst flex_int16_t yy_chk[2689] =
        10,   10,   10,   10,   10,   10,   10,   10,   13,   59,
        14,   81,  129,   58,   91,  129,   37,   58,   37,   59,
        58,   58,   87,   94,   94,   81,   96,   96,   72,   37,
-      107,  801,  179,  118,   10,  109,   10,   10,  179,   62,
+      107,  805,  179,  118,   10,  109,   10,   10,  179,   62,
       107,   91,   62,   62,  108,  109,   37,  124,   37,   62,
-       62,   62,  108,  802,   62,   62,   37,  804,  124,   62,
+       62,   62,  108,  806,   62,   62,   37,  807,  124,   62,
 
        10,   10,   10,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
@@ -1340,13 +1362,13 @@ static yyconst flex_int16_t yy_chk[2689] =
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   15,   15,   15,   15,   15,   15,
-      805,   15,   15,   15,   15,   15,   15,   15,   15,  122,
+      808,   15,   15,   15,   15,   15,   15,   15,   15,  122,
 
        15,   15,   15,   15,   15,   15,   15,   15,   15,   38,
-       38,  806,  168,   99,  110,   99,  131,  112,  110,  192,
+       38,  809,  168,   99,  110,   99,  131,  112,  110,  192,
        99,  112,  110,   99,  192,  300,  131,   38,  112,   38,
        99,   99,  100,  112,  100,   15,   15,   15,   15,  168,
-      128,  807,  100,  122,  128,  100,  139,  128,  132,  100,
+      128,  810,  100,  122,  128,  100,  139,  128,  132,  100,
       100,  132,  300,  210,  132,  209,  139,   38,  196,   38,
       128,   15,   15,   15,   15,   16,   16,   16,   16,   16,
        16,  196,   16,   16,   16,   16,   16,   16,   16,   16,
@@ -1356,232 +1378,236 @@ static yyconst flex_int16_t yy_chk[2689] =
       210,  101,  138,  102,  374,  102,  138,  103,  101,  101,
       130,  209,  374,  102,  103,  103,   16,   16,   16,   16,
       102,  102,  127,  239,  127,  102,  127,  137,  137,  140,
-      808,  141,  127,  140,  662,  239,  140,  140,  137,  127,
+      811,  141,  127,  140,  662,  239,  140,  140,  137,  127,
       127,  141,   16,   16,   16,   16,   17,   17,   17,  211,
-       17,   17,  809,   17,   17,   17,   17,  810,   17,   17,
+       17,   17,  812,   17,   17,   17,   17,  813,   17,   17,
       174,  174,   17,   17,   17,   17,   17,   17,   17,   17,
-      115,  174,  115,  176,  144,  662,  811,  144,  144,  245,
+      115,  174,  115,  176,  144,  662,  814,  144,  144,  245,
       115,  245,  261,  176,  144,  144,  144,  115,  115,  144,
       144,  175,  175,  177,  144,  261,  251,  178,  175,  211,
 
       330,  115,  175,  177,  411,  177,   17,  178,   17,  330,
       178,  187,   17,  251,  411,  177,  274,  317,  274,  317,
       190,  187,  274,   17,   17,   17,   17,   18,   18,   18,
-      190,   18,   18,  812,   18,   18,   18,   18,  813,   18,
+      190,   18,   18,  815,   18,   18,   18,   18,  816,   18,
        18,  663,  187,   18,   18,   18,   18,   18,   18,   18,
        18,  187,  125,  125,  265,  312,  188,  265,  189,  357,
       363,  357,  190,  265,  126,  126,  188,  312,  189,  190,
       125,  219,  125,  219,  227,  227,  453,  363,  323,  663,
       191,  323,  126,  125,  126,  351,  188,   18,  189,   18,
-      191,  323,  227,   18,  227,  189,  814,  351,  373,  815,
+      191,  323,  227,   18,  227,  189,  817,  351,  373,  818,
 
       125,  219,  125,  219,   18,   18,   18,   18,   26,   26,
       125,  373,  126,  451,  126,  453,   26,   26,   26,   26,
        26,   26,  227,  191,  227,  257,  301,  301,  257,  369,
-      257,  387,  369,  387,  369,  816,  817,  387,  257,  818,
-      819,  257,  369,  820,  301,  369,  301,   26,   26,   26,
-       26,   26,   26,   79,   79,  452,  821,  301,  822,  413,
-      826,   79,   79,   79,   79,   79,   79,  451,  307,  413,
-      307,  308,  827,  308,  301,  831,  301,  430,  307,  832,
-      432,  308,  834,  835,  301,  307,  307,  430,  308,  308,
-      432,  836,   79,   79,   79,   79,   79,   79,   90,   90,
-
-      837,  345,  345,  838,  842,  452,   90,   90,   90,   90,
-       90,   90,  843,   90,  412,  309,   90,  309,   90,  345,
+      257,  387,  369,  387,  369,  819,  820,  387,  257,  821,
+      822,  257,  369,  826,  301,  369,  301,   26,   26,   26,
+       26,   26,   26,   79,   79,  452,  827,  301,  831,  413,
+      832,   79,   79,   79,   79,   79,   79,  451,  307,  413,
+      307,  308,  834,  308,  301,  835,  301,  430,  307,  836,
+      432,  308,  837,  838,  301,  307,  307,  430,  308,  308,
+      432,  842,   79,   79,   79,   79,   79,   79,   90,   90,
+
+      843,  345,  345,  847,  848,  452,   90,   90,   90,   90,
+       90,   90,  850,   90,  412,  309,   90,  309,   90,  345,
        90,  345,  631,  430,  412,  309,  432,  378,  631,   90,
-      378,  412,  309,  309,  847,  848,  378,   90,   90,   90,
-       90,   90,   90,  314,   90,  314,   90,  850,   90,  345,
-       90,  345,  851,  314,  416,  852,   90,   98,   98,  855,
-      314,  314,  857,  417,  416,   98,   98,   98,   98,   98,
-       98,  416,   98,  417,  853,  318,   98,  318,  858,   98,
-      417,  647,  859,   98,   98,  318,  860,  647,   98,  854,
-      863,  862,  318,  318,  864,  433,   98,   98,   98,   98,
-
-       98,   98,  319,   98,  319,  433,  319,  852,  862,   98,
-      865,  853,  319,  868,  869,   98,  121,  121,  871,  319,
+      378,  412,  309,  309,  851,  854,  378,   90,   90,   90,
+       90,   90,   90,  314,   90,  314,   90,  855,   90,  345,
+       90,  345,  853,  314,  416,  857,   90,   98,   98,  852,
+      314,  314,  858,  417,  416,   98,   98,   98,   98,   98,
+       98,  416,   98,  417,  859,  318,   98,  318,  860,   98,
+      417,  647,  854,   98,   98,  318,  863,  647,   98,  853,
+      864,  865,  318,  318,  868,  433,   98,   98,   98,   98,
+
+       98,   98,  319,   98,  319,  433,  319,  706,  751,   98,
+      869,  852,  319,  706,  751,   98,  121,  121,  871,  319,
       319,  339,  873,  339,  121,  121,  121,  121,  121,  121,
-      525,  339,  525,  523,  874,  523,  854,  875,  339,  339,
-      525,  433,  876,  877,  878,  879,  525,  525,  525,  880,
-      881,  882,  883,  884,  885,  121,  121,  121,  121,  121,
-      121,  152,  152,  523,  886,  523,  887,  339,  889,  152,
-      152,  152,  152,  152,  152,  534,  890,  534,  891,  892,
-      893,  895,  534,  896,  897,  534,  899,  900,  901,  902,
-      903,  904,  534,  534,  905,  906,  907,  908,  909,  911,
-
-      152,  152,  152,  152,  152,  152,  160,  160,  912,  913,
-      915,  917,  918,  919,  160,  160,  160,  160,  160,  160,
-      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
-      930,  931,  932,  933,  935,  936,  937,  938,  940,  941,
-      942,  943,  946,  947,  949,  160,  160,  160,  160,  160,
-      160,  173,  173,  951,  952,  940,  953,  954,  955,  173,
-      173,  173,  173,  173,  173,  956,  173,  957,  958,  959,
-      173,  960,  961,  173,  962,  963,  964,  965,  967,  968,
-      969,  970,  173,  971,  973,  974,  975,  977,  978,  979,
-      173,  173,  173,  173,  173,  173,  980,  173,  981,  982,
-
-      983,  984,  986,  173,  987,  988,  992,  994,  995,  173,
-      293,  293,  997,  998,  999, 1003, 1005, 1006,  293,  293,
-      293,  293,  293,  293, 1008, 1009, 1010, 1012,  293, 1007,
-      293, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023,
-     1024, 1026, 1028, 1030, 1031, 1033, 1035, 1036, 1037,  293,
-      293,  293,  293,  293,  293, 1038, 1039, 1040,  293, 1041,
-      293,  342,  342, 1042, 1043, 1044, 1006, 1045, 1046,  342,
-      342,  342,  342,  342,  342, 1049, 1007, 1050, 1051,  342,
-     1052,  342, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
-     1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
-
-      342,  342,  342,  342,  342,  342, 1075, 1076, 1077,  342,
-     1079,  342,  403,  403, 1081, 1082, 1083, 1084, 1085, 1086,
-      403,  403,  403,  403,  403,  403, 1088, 1089, 1090, 1091,
-      403, 1093,  403, 1095, 1097, 1098, 1100, 1102, 1103, 1104,
-     1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116,
-     1117,  403,  403,  403,  403,  403,  403, 1118, 1119, 1120,
-      403, 1124,  403,  407,  407, 1125, 1126, 1130, 1131, 1132,
-     1133,  407,  407,  407,  407,  407,  407, 1135, 1136, 1137,
-     1138,  407, 1139,  407, 1141, 1142, 1144, 1145, 1146, 1147,
-     1148, 1150, 1151, 1153, 1154, 1155, 1156, 1151, 1157, 1158,
-
-     1159, 1162,  407,  407,  407,  407,  407,  407, 1164, 1165,
-     1166,  407, 1168,  407,  828,  828, 1169,  828,  828,  828,
-     1170,  828,  828,  828,  828,  828, 1172,  828, 1174, 1175,
-     1176, 1177, 1179, 1180,  828,  828,  828,  828,  828, 1181,
-     1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1194,
-     1195, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1206, 1207,
-     1208, 1209, 1204, 1210, 1211, 1212, 1215, 1217,  828, 1218,
-     1219, 1220, 1221, 1222, 1223, 1224, 1226, 1228, 1229, 1230,
-     1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241,
-     1242,  828,  828,  828,  844,  844, 1243,  844,  844,  844,
-
-     1245,  844,  844,  844,  844,  844, 1246,  844, 1250, 1252,
-     1254, 1247, 1255, 1256,  844,  844,  844,  844,  844, 1247,
-     1258, 1259, 1260, 1261, 1247, 1262, 1265, 1267, 1269, 1270,
-     1271, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281,
-     1282, 1283, 1284, 1286, 1287, 1288, 1291, 1299,  844, 1300,
-     1301, 1302, 1303, 1288, 1304, 1305, 1306, 1307, 1288, 1308,
-     1309, 1310, 1311, 1312, 1313, 1314, 1315, 1308, 1316, 1317,
-     1318,  844,  844,  844,  990,  990, 1319,  990,  990,  990,
-     1321,  990,  990,  990,  990,  990, 1322,  990, 1323, 1324,
-     1326, 1325, 1327, 1328,  990,  990,  990,  990,  990, 1325,
-
-     1329, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
-     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1340, 1348,
-     1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,  990, 1357,
-     1358, 1360, 1363, 1364, 1365, 1366, 1368, 1369, 1370, 1371,
-     1372, 1373, 1374, 1375, 1376, 1377, 1380, 1381, 1382, 1383,
-     1384,  990,  990,  990, 1001, 1001, 1385, 1001, 1001, 1001,
-     1386, 1001, 1001, 1001, 1001, 1001, 1387, 1001, 1388, 1389,
-     1390, 1392, 1395, 1396, 1001, 1001, 1001, 1001, 1001, 1397,
-     1398, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
-     1409, 1410, 1411, 1412, 1415, 1416, 1417, 1418, 1419, 1420,
-
-     1421, 1422, 1423, 1424, 1425, 1426, 1428, 1429, 1001, 1430,
-     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1441, 1442,
-     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1451, 1452, 1454,
-     1455, 1001, 1001, 1001, 1456, 1457, 1458, 1460, 1461, 1462,
-     1463, 1465, 1466, 1468, 1469, 1470, 1471, 1472, 1474, 1475,
-     1477, 1478, 1479, 1480, 1481, 1483, 1484, 1485, 1486, 1488,
-     1489, 1490, 1491, 1492, 1493, 1490, 1495, 1497, 1498, 1499,
-     1500, 1501, 1502, 1503, 1505, 1501, 1506, 1507, 1490, 1508,
-     1509, 1510, 1511, 1508, 1513, 1515, 1516, 1517, 1501, 1518,
-     1519, 1520, 1521, 1522, 1523, 1524, 1508, 1525, 1528, 1529,
-
-     1531, 1532, 1533, 1534, 1538, 1539, 1540, 1541, 1542, 1543,
-     1544, 1547, 1548, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
-     1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
-     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1575, 1576, 1577,
-     1578, 1579, 1580, 1581, 1583, 1584, 1585, 1586, 1588, 1589,
-     1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
-     1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
-     1612, 1613, 1615, 1616, 1617, 1618, 1619, 1621, 1622, 1623,
-     1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1635,
-     1636, 1638, 1639, 1640, 1641, 1643, 1644, 1645, 1646, 1647,
-
-     1648, 1649, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1658,
-     1660, 1662, 1663, 1664, 1667, 1668, 1671, 1672, 1674, 1676,
-     1677, 1678, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
-     1682, 1682, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
-     1683, 1683, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
-     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
-     1685, 1685, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
-     1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
-     1689, 1689, 1700, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
-
-     1690, 1690, 1690, 1690, 1691,  799,  798,  797, 1691, 1691,
-     1691, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
-     1692, 1693, 1693,  796, 1693, 1693, 1693, 1693, 1694,  795,
-     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1695,  794,
-     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1696,  792,
-     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,  790,
-     1697, 1698, 1698,  789,  788, 1698, 1698,  786, 1698, 1699,
-     1699,  785, 1699, 1699, 1699, 1699, 1701, 1701, 1701, 1701,
-     1701, 1701, 1701, 1702,  784, 1702, 1702, 1702, 1702, 1702,
-     1702, 1702, 1702, 1703,  782, 1703, 1703, 1703, 1703, 1703,
-
-     1703, 1703, 1703, 1704,  781, 1704, 1704, 1704, 1704, 1704,
-     1704, 1704, 1704, 1705,  780, 1705, 1705, 1705, 1705, 1705,
-     1705, 1705, 1705,  779,  777,  776,  775,  774,  773,  772,
-      771,  769,  767,  765,  764,  763,  762,  761,  759,  758,
-      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
-      747,  745,  744,  742,  740,  739,  738,  737,  736,  735,
-      733,  732,  730,  729,  728,  726,  725,  724,  723,  722,
-      721,  720,  719,  718,  717,  716,  715,  714,  713,  712,
-      711,  710,  708,  707,  706,  705,  704,  703,  702,  701,
-      700,  698,  696,  695,  694,  692,  691,  690,  688,  687,
-
-      686,  685,  683,  682,  681,  680,  679,  678,  677,  675,
-      673,  671,  670,  669,  668,  667,  665,  661,  660,  659,
-      658,  657,  656,  655,  654,  653,  652,  650,  649,  648,
-      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
-      636,  634,  633,  632,  630,  627,  624,  623,  622,  621,
-      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
-      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
-      600,  599,  597,  594,  593,  592,  591,  590,  589,  588,
-      587,  586,  585,  583,  582,  581,  580,  579,  578,  577,
-      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
-
-      566,  565,  564,  563,  562,  561,  558,  557,  556,  555,
-      554,  553,  552,  551,  550,  549,  548,  547,  546,  543,
-      542,  541,  540,  539,  538,  537,  536,  535,  533,  532,
-      531,  530,  529,  528,  527,  526,  524,  520,  517,  516,
-      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
-      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
-      495,  494,  493,  492,  491,  489,  488,  487,  486,  485,
-      484,  483,  482,  481,  480,  478,  477,  476,  475,  474,
-      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
-      463,  462,  461,  460,  459,  458,  457,  456,  450,  449,
-
-      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
-      436,  435,  434,  431,  429,  428,  427,  426,  425,  424,
-      423,  422,  421,  420,  419,  418,  415,  404,  401,  400,
-      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
-      389,  388,  386,  385,  384,  383,  382,  381,  380,  379,
-      377,  376,  375,  372,  371,  370,  368,  367,  366,  365,
-      364,  362,  361,  360,  359,  358,  356,  355,  354,  353,
-      350,  349,  348,  347,  340,  338,  337,  336,  335,  334,
-      333,  332,  331,  329,  328,  327,  326,  325,  324,  322,
-      321,  320,  316,  315,  311,  288,  287,  286,  285,  284,
-
-      283,  282,  281,  280,  279,  278,  277,  276,  275,  273,
-      272,  271,  270,  269,  268,  267,  266,  264,  263,  262,
-      260,  259,  258,  256,  255,  254,  253,  252,  250,  249,
-      248,  247,  246,  244,  243,  242,  241,  238,  237,  236,
-      235,  234,  230,  217,  214,  208,  202,  199,  197,  195,
-      194,  193,  184,  182,  181,  180,  171,  166,  164,  162,
-      161,  159,  158,  150,  149,  148,  147,  146,  145,  143,
-      142,  136,  135,  134,  133,  116,  111,  106,  105,  104,
-       95,   85,   84,   78,   77,   76,   70,   69,   68,   67,
-       64,   63,   61,   60,   54,   53,   52,   51,   42,   34,
-
-       32,   31,   25,   24,   22,   19, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681
+      525,  339,  525,  523,  862,  523,  800,  874,  339,  339,
+      525,  433,  800,  875,  876,  877,  525,  525,  525,  878,
+      879,  862,  880,  881,  882,  121,  121,  121,  121,  121,
+      121,  152,  152,  523,  883,  523,  884,  339,  885,  152,
+      152,  152,  152,  152,  152,  534,  886,  534,  887,  888,
+      890,  891,  534,  892,  893,  534,  894,  896,  897,  898,
+      900,  901,  534,  534,  902,  903,  904,  905,  906,  907,
+
+      152,  152,  152,  152,  152,  152,  160,  160,  908,  909,
+      910,  912,  913,  914,  160,  160,  160,  160,  160,  160,
+      916,  918,  919,  920,  921,  922,  923,  924,  925,  926,
+      927,  928,  929,  930,  931,  932,  933,  934,  935,  937,
+      938,  939,  940,  943,  944,  160,  160,  160,  160,  160,
+      160,  173,  173,  945,  942,  948,  949,  951,  953,  173,
+      173,  173,  173,  173,  173,  954,  173,  955,  956,  957,
+      173,  942,  958,  173,  959,  960,  961,  962,  963,  964,
+      965,  966,  173,  967,  968,  970,  971,  972,  973,  974,
+      173,  173,  173,  173,  173,  173,  976,  173,  977,  978,
+
+      980,  981,  982,  173,  983,  984,  985,  986,  987,  173,
+      293,  293,  989,  990,  991,  995,  997,  998,  293,  293,
+      293,  293,  293,  293, 1000, 1001, 1002, 1006,  293, 1008,
+      293, 1009, 1011, 1012, 1013, 1010, 1015, 1017, 1018, 1019,
+     1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1031,  293,
+      293,  293,  293,  293,  293, 1033, 1034, 1036,  293, 1038,
+      293,  342,  342, 1039, 1040, 1041, 1042, 1043, 1044,  342,
+      342,  342,  342,  342,  342, 1045, 1046, 1047, 1048,  342,
+     1009,  342, 1010, 1049, 1050, 1053, 1054, 1055, 1056, 1057,
+     1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1070,
+
+      342,  342,  342,  342,  342,  342, 1072, 1073, 1074,  342,
+     1075,  342,  403,  403, 1076, 1077, 1078, 1079, 1080, 1081,
+      403,  403,  403,  403,  403,  403, 1082, 1084, 1086, 1087,
+      403, 1088,  403, 1089, 1090, 1091, 1093, 1094, 1095, 1096,
+     1098, 1100, 1102, 1103, 1105, 1107, 1108, 1109, 1110, 1111,
+     1112,  403,  403,  403,  403,  403,  403, 1113, 1114, 1115,
+      403, 1116,  403,  407,  407, 1117, 1118, 1119, 1122, 1123,
+     1124,  407,  407,  407,  407,  407,  407, 1125, 1126, 1130,
+     1131,  407, 1132,  407, 1136, 1137, 1138, 1139, 1141, 1142,
+     1143, 1144, 1145, 1147, 1148, 1150, 1151, 1152, 1153, 1154,
+
+     1156, 1158,  407,  407,  407,  407,  407,  407, 1160, 1161,
+     1162,  407, 1163,  407,  828,  828, 1164,  828,  828,  828,
+     1165,  828,  828,  828,  828,  828, 1157,  828, 1166, 1169,
+     1171, 1157, 1172, 1173,  828,  828,  828,  828,  828, 1175,
+     1176, 1177, 1179, 1181, 1182, 1183, 1184, 1185, 1187, 1188,
+     1189, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200,
+     1202, 1203, 1205, 1206, 1207, 1208, 1209, 1211,  828, 1212,
+     1213, 1215, 1216, 1217, 1212, 1218, 1219, 1220, 1221, 1224,
+     1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1237,
+     1238,  828,  828,  828,  844,  844, 1239,  844,  844,  844,
+
+     1240,  844,  844,  844,  844,  844, 1241,  844, 1242, 1243,
+     1244, 1246, 1247, 1248,  844,  844,  844,  844,  844, 1249,
+     1250, 1251, 1252, 1253, 1255, 1256, 1257, 1260, 1262, 1264,
+     1265, 1266, 1268, 1269, 1257, 1270, 1271, 1272, 1273, 1257,
+     1276, 1278, 1280, 1281, 1282, 1283, 1284, 1285,  844, 1286,
+     1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298,
+     1299, 1303, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
+     1319,  844,  844,  844,  993,  993, 1321,  993,  993,  993,
+     1300,  993,  993,  993,  993,  993, 1322,  993, 1300, 1323,
+     1324, 1320, 1325, 1300,  993,  993,  993,  993,  993, 1320,
+
+     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1336,
+     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1338,
+     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,  993, 1355,
+     1356, 1357, 1358, 1359, 1360, 1354, 1361, 1362, 1363, 1364,
+     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1375,
+     1378,  993,  993,  993, 1004, 1004, 1379, 1004, 1004, 1004,
+     1380, 1004, 1004, 1004, 1004, 1004, 1381, 1004, 1382, 1384,
+     1385, 1386, 1387, 1388, 1004, 1004, 1004, 1004, 1004, 1389,
+     1390, 1391, 1392, 1393, 1396, 1397, 1398, 1399, 1400, 1401,
+     1402, 1403, 1404, 1405, 1406, 1407, 1409, 1412, 1413, 1414,
+
+     1415, 1416, 1418, 1419, 1420, 1421, 1422, 1423, 1004, 1424,
+     1425, 1426, 1427, 1428, 1429, 1430, 1433, 1434, 1435, 1436,
+     1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1447,
+     1448, 1004, 1004, 1004, 1449, 1450, 1451, 1452, 1453, 1454,
+     1455, 1456, 1457, 1458, 1461, 1462, 1463, 1464, 1465, 1466,
+     1467, 1468, 1469, 1470, 1472, 1473, 1475, 1476, 1477, 1478,
+     1479, 1480, 1482, 1483, 1484, 1485, 1487, 1488, 1490, 1491,
+     1492, 1493, 1494, 1495, 1497, 1498, 1500, 1501, 1502, 1503,
+     1504, 1505, 1507, 1508, 1509, 1510, 1512, 1513, 1514, 1515,
+     1516, 1517, 1514, 1520, 1522, 1523, 1524, 1525, 1526, 1527,
+
+     1529, 1531, 1526, 1532, 1533, 1514, 1534, 1535, 1536, 1537,
+     1534, 1540, 1542, 1543, 1544, 1526, 1545, 1546, 1547, 1548,
+     1549, 1550, 1551, 1534, 1552, 1555, 1556, 1558, 1559, 1560,
+     1561, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1574, 1575,
+     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
+     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
+     1597, 1598, 1599, 1600, 1602, 1603, 1604, 1605, 1606, 1607,
+     1608, 1610, 1611, 1612, 1613, 1615, 1616, 1617, 1618, 1619,
+     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1628, 1629, 1630,
+     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1639, 1640, 1642,
+
+     1643, 1644, 1645, 1646, 1648, 1649, 1650, 1652, 1653, 1654,
+     1655, 1656, 1657, 1658, 1659, 1660, 1662, 1663, 1665, 1666,
+     1667, 1668, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
+     1678, 1679, 1680, 1681, 1683, 1684, 1685, 1687, 1689, 1690,
+     1691, 1694, 1695, 1698, 1699, 1701, 1703, 1704, 1705, 1709,
+     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1710,
+     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1711,
+     1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1712,
+     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1713,
+     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1714,
+
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1715, 1715, 1715,
+     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1716, 1716, 1727,
+     1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1718,  802,  801,  799, 1718, 1718, 1718, 1719, 1719,
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1720, 1720,
+      798, 1720, 1720, 1720, 1720, 1721,  797, 1721, 1721, 1721,
+     1721, 1721, 1721, 1721, 1721, 1722,  796, 1722, 1722, 1722,
+     1722, 1722, 1722, 1722, 1722, 1723,  795, 1723, 1723, 1723,
+     1723, 1723, 1723, 1723, 1723, 1724,  794, 1724, 1725, 1725,
+      792,  790, 1725, 1725,  789, 1725, 1726, 1726,  788, 1726,
+
+     1726, 1726, 1726, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
+     1729,  786, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
+     1730,  785, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
+     1731,  784, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
+     1732,  782, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
+      781,  780,  779,  777,  776,  775,  774,  773,  772,  771,
+      769,  767,  765,  764,  763,  762,  761,  759,  758,  757,
+      756,  755,  754,  753,  752,  750,  749,  748,  747,  745,
+      744,  742,  740,  739,  738,  737,  736,  735,  733,  732,
+      730,  729,  728,  726,  725,  724,  723,  722,  721,  720,
+
+      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
+      708,  707,  705,  704,  703,  702,  701,  700,  698,  696,
+      695,  694,  692,  691,  690,  688,  687,  686,  685,  683,
+      682,  681,  680,  679,  678,  677,  675,  673,  671,  670,
+      669,  668,  667,  665,  661,  660,  659,  658,  657,  656,
+      655,  654,  653,  652,  650,  649,  648,  646,  645,  644,
+      643,  642,  641,  640,  639,  638,  637,  636,  634,  633,
+      632,  630,  627,  624,  623,  622,  621,  620,  619,  618,
+      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
+      607,  606,  605,  604,  603,  602,  601,  600,  599,  597,
+
+      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
+      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
+      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
+      563,  562,  561,  558,  557,  556,  555,  554,  553,  552,
+      551,  550,  549,  548,  547,  546,  543,  542,  541,  540,
+      539,  538,  537,  536,  535,  533,  532,  531,  530,  529,
+      528,  527,  526,  524,  520,  517,  516,  515,  514,  513,
+      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
+      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
+      492,  491,  489,  488,  487,  486,  485,  484,  483,  482,
+
+      481,  480,  478,  477,  476,  475,  474,  473,  472,  471,
+      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
+      460,  459,  458,  457,  456,  450,  449,  446,  445,  444,
+      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
+      431,  429,  428,  427,  426,  425,  424,  423,  422,  421,
+      420,  419,  418,  415,  404,  401,  400,  399,  398,  397,
+      396,  395,  394,  393,  392,  391,  390,  389,  388,  386,
+      385,  384,  383,  382,  381,  380,  379,  377,  376,  375,
+      372,  371,  370,  368,  367,  366,  365,  364,  362,  361,
+      360,  359,  358,  356,  355,  354,  353,  350,  349,  348,
+
+      347,  340,  338,  337,  336,  335,  334,  333,  332,  331,
+      329,  328,  327,  326,  325,  324,  322,  321,  320,  316,
+      315,  311,  288,  287,  286,  285,  284,  283,  282,  281,
+      280,  279,  278,  277,  276,  275,  273,  272,  271,  270,
+      269,  268,  267,  266,  264,  263,  262,  260,  259,  258,
+      256,  255,  254,  253,  252,  250,  249,  248,  247,  246,
+      244,  243,  242,  241,  238,  237,  236,  235,  234,  230,
+      217,  214,  208,  202,  199,  197,  195,  194,  193,  184,
+      182,  181,  180,  171,  166,  164,  162,  161,  159,  158,
+      150,  149,  148,  147,  146,  145,  143,  142,  136,  135,
+
+      134,  133,  116,  111,  106,  105,  104,   95,   85,   84,
+       78,   77,   76,   70,   69,   68,   67,   64,   63,   61,
+       60,   54,   53,   52,   51,   42,   34,   32,   31,   25,
+       24,   22,   19, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+
+     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1708, 1708
     } ;
 
 static yy_state_type yy_last_accepting_state;
@@ -1698,7 +1724,7 @@ int yywrap (void) { return 1; }
 
 
 
-#line 1702 "ldlex.c"
+#line 1728 "ldlex.c"
 
 #define INITIAL 0
 #define SCRIPT 1
@@ -1745,7 +1771,7 @@ FILE *yyget_out (void );
 
 void yyset_out  (FILE * out_str  );
 
-yy_size_t yyget_leng (void );
+int yyget_leng (void );
 
 char *yyget_text (void );
 
@@ -1785,7 +1811,12 @@ static int input (void );
 
 /* Amount of stuff to slurp up with each read. */
 #ifndef YY_READ_BUF_SIZE
+#ifdef __ia64__
+/* On IA-64, the buffer size is 16k, not 8k */
+#define YY_READ_BUF_SIZE 16384
+#else
 #define YY_READ_BUF_SIZE 8192
+#endif /* __ia64__ */
 #endif
 
 /* Copy whatever the last rule matched to the standard output. */
@@ -1793,7 +1824,7 @@ static int input (void );
 /* This used to be an fputs(), but since the string might contain NUL's,
  * we now use fwrite().
  */
-#define ECHO fwrite( yytext, yyleng, 1, yyout )
+#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
 #endif
 
 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
@@ -1804,7 +1835,7 @@ static int input (void );
 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
 		{ \
 		int c = '*'; \
-		yy_size_t n; \
+		size_t n; \
 		for ( n = 0; n < max_size && \
 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
 			buf[n] = (char) c; \
@@ -1905,7 +1936,7 @@ YY_DECL
 	}
     }
 
-#line 1909 "ldlex.c"
+#line 1940 "ldlex.c"
 
 	if ( !(yy_init) )
 		{
@@ -1958,13 +1989,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 1682 )
+				if ( yy_current_state >= 1709 )
 					yy_c = yy_meta[(unsigned int) yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 2607 );
+		while ( yy_base[yy_current_state] != 2634 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -2657,49 +2688,49 @@ YY_RULE_SETUP
 case 123:
 YY_RULE_SETUP
 #line 320 "ldlex.l"
-{ RTOKEN(SUBALIGN);}
+{ RTOKEN(OVERFLOW_INTO);}
 	YY_BREAK
 case 124:
 YY_RULE_SETUP
 #line 321 "ldlex.l"
-{ RTOKEN(PROVIDE); }
+{ RTOKEN(SUBALIGN);}
 	YY_BREAK
 case 125:
 YY_RULE_SETUP
 #line 322 "ldlex.l"
-{ RTOKEN(PROVIDE_HIDDEN); }
+{ RTOKEN(PROVIDE); }
 	YY_BREAK
 case 126:
 YY_RULE_SETUP
 #line 323 "ldlex.l"
-{ RTOKEN(KEEP); }
+{ RTOKEN(PROVIDE_HIDDEN); }
 	YY_BREAK
 case 127:
 YY_RULE_SETUP
 #line 324 "ldlex.l"
-{ RTOKEN(EXCLUDE_FILE); }
+{ RTOKEN(KEEP); }
 	YY_BREAK
 case 128:
 YY_RULE_SETUP
 #line 325 "ldlex.l"
-{ RTOKEN(CONSTANT);}
+{ RTOKEN(EXCLUDE_FILE); }
 	YY_BREAK
 case 129:
-/* rule 129 can match eol */
 YY_RULE_SETUP
 #line 326 "ldlex.l"
-{ ++ lineno; }
+{ RTOKEN(CONSTANT);}
 	YY_BREAK
 case 130:
 /* rule 130 can match eol */
 YY_RULE_SETUP
 #line 327 "ldlex.l"
-{ ++ lineno;  RTOKEN(NEWLINE); }
+{ ++ lineno; }
 	YY_BREAK
 case 131:
+/* rule 131 can match eol */
 YY_RULE_SETUP
 #line 328 "ldlex.l"
-{ /* Mri comment line */ }
+{ ++ lineno;  RTOKEN(NEWLINE); }
 	YY_BREAK
 case 132:
 YY_RULE_SETUP
@@ -2709,222 +2740,227 @@ YY_RULE_SETUP
 case 133:
 YY_RULE_SETUP
 #line 330 "ldlex.l"
-{ RTOKEN(ENDWORD); }
+{ /* Mri comment line */ }
 	YY_BREAK
 case 134:
 YY_RULE_SETUP
 #line 331 "ldlex.l"
-{ RTOKEN(ALIGNMOD);}
+{ RTOKEN(ENDWORD); }
 	YY_BREAK
 case 135:
 YY_RULE_SETUP
 #line 332 "ldlex.l"
-{ RTOKEN(ALIGN_K);}
+{ RTOKEN(ALIGNMOD);}
 	YY_BREAK
 case 136:
 YY_RULE_SETUP
 #line 333 "ldlex.l"
-{ RTOKEN(CHIP); }
+{ RTOKEN(ALIGN_K);}
 	YY_BREAK
 case 137:
 YY_RULE_SETUP
 #line 334 "ldlex.l"
-{ RTOKEN(BASE); }
+{ RTOKEN(CHIP); }
 	YY_BREAK
 case 138:
 YY_RULE_SETUP
 #line 335 "ldlex.l"
-{ RTOKEN(ALIAS); }
+{ RTOKEN(BASE); }
 	YY_BREAK
 case 139:
 YY_RULE_SETUP
 #line 336 "ldlex.l"
-{ RTOKEN(TRUNCATE); }
+{ RTOKEN(ALIAS); }
 	YY_BREAK
 case 140:
 YY_RULE_SETUP
 #line 337 "ldlex.l"
-{ RTOKEN(LOAD); }
+{ RTOKEN(TRUNCATE); }
 	YY_BREAK
 case 141:
 YY_RULE_SETUP
 #line 338 "ldlex.l"
-{ RTOKEN(PUBLIC); }
+{ RTOKEN(LOAD); }
 	YY_BREAK
 case 142:
 YY_RULE_SETUP
 #line 339 "ldlex.l"
-{ RTOKEN(ORDER); }
+{ RTOKEN(PUBLIC); }
 	YY_BREAK
 case 143:
 YY_RULE_SETUP
 #line 340 "ldlex.l"
-{ RTOKEN(NAMEWORD); }
+{ RTOKEN(ORDER); }
 	YY_BREAK
 case 144:
 YY_RULE_SETUP
 #line 341 "ldlex.l"
-{ RTOKEN(FORMAT); }
+{ RTOKEN(NAMEWORD); }
 	YY_BREAK
 case 145:
 YY_RULE_SETUP
 #line 342 "ldlex.l"
-{ RTOKEN(CASE); }
+{ RTOKEN(FORMAT); }
 	YY_BREAK
 case 146:
 YY_RULE_SETUP
 #line 343 "ldlex.l"
-{ RTOKEN(START); }
+{ RTOKEN(CASE); }
 	YY_BREAK
 case 147:
 YY_RULE_SETUP
 #line 344 "ldlex.l"
-{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
+{ RTOKEN(START); }
 	YY_BREAK
 case 148:
 YY_RULE_SETUP
 #line 345 "ldlex.l"
-{ RTOKEN(SECT); }
+{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
 	YY_BREAK
 case 149:
 YY_RULE_SETUP
 #line 346 "ldlex.l"
-{ RTOKEN(ABSOLUTE); }
+{ RTOKEN(SECT); }
 	YY_BREAK
 case 150:
 YY_RULE_SETUP
 #line 347 "ldlex.l"
-{ RTOKEN(ENDWORD); }
+{ RTOKEN(ABSOLUTE); }
 	YY_BREAK
 case 151:
 YY_RULE_SETUP
 #line 348 "ldlex.l"
-{ RTOKEN(ALIGNMOD);}
+{ RTOKEN(ENDWORD); }
 	YY_BREAK
 case 152:
 YY_RULE_SETUP
 #line 349 "ldlex.l"
-{ RTOKEN(ALIGN_K);}
+{ RTOKEN(ALIGNMOD);}
 	YY_BREAK
 case 153:
 YY_RULE_SETUP
 #line 350 "ldlex.l"
-{ RTOKEN(CHIP); }
+{ RTOKEN(ALIGN_K);}
 	YY_BREAK
 case 154:
 YY_RULE_SETUP
 #line 351 "ldlex.l"
-{ RTOKEN(BASE); }
+{ RTOKEN(CHIP); }
 	YY_BREAK
 case 155:
 YY_RULE_SETUP
 #line 352 "ldlex.l"
-{ RTOKEN(ALIAS); }
+{ RTOKEN(BASE); }
 	YY_BREAK
 case 156:
 YY_RULE_SETUP
 #line 353 "ldlex.l"
-{ RTOKEN(TRUNCATE); }
+{ RTOKEN(ALIAS); }
 	YY_BREAK
 case 157:
 YY_RULE_SETUP
 #line 354 "ldlex.l"
-{ RTOKEN(LOAD); }
+{ RTOKEN(TRUNCATE); }
 	YY_BREAK
 case 158:
 YY_RULE_SETUP
 #line 355 "ldlex.l"
-{ RTOKEN(PUBLIC); }
+{ RTOKEN(LOAD); }
 	YY_BREAK
 case 159:
 YY_RULE_SETUP
 #line 356 "ldlex.l"
-{ RTOKEN(ORDER); }
+{ RTOKEN(PUBLIC); }
 	YY_BREAK
 case 160:
 YY_RULE_SETUP
 #line 357 "ldlex.l"
-{ RTOKEN(NAMEWORD); }
+{ RTOKEN(ORDER); }
 	YY_BREAK
 case 161:
 YY_RULE_SETUP
 #line 358 "ldlex.l"
-{ RTOKEN(FORMAT); }
+{ RTOKEN(NAMEWORD); }
 	YY_BREAK
 case 162:
 YY_RULE_SETUP
 #line 359 "ldlex.l"
-{ RTOKEN(CASE); }
+{ RTOKEN(FORMAT); }
 	YY_BREAK
 case 163:
 YY_RULE_SETUP
 #line 360 "ldlex.l"
-{ RTOKEN(EXTERN); }
+{ RTOKEN(CASE); }
 	YY_BREAK
 case 164:
 YY_RULE_SETUP
 #line 361 "ldlex.l"
-{ RTOKEN(START); }
+{ RTOKEN(EXTERN); }
 	YY_BREAK
 case 165:
 YY_RULE_SETUP
 #line 362 "ldlex.l"
-{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
+{ RTOKEN(START); }
 	YY_BREAK
 case 166:
 YY_RULE_SETUP
 #line 363 "ldlex.l"
-{ RTOKEN(SECT); }
+{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
 	YY_BREAK
 case 167:
 YY_RULE_SETUP
 #line 364 "ldlex.l"
-{ RTOKEN(ABSOLUTE); }
+{ RTOKEN(SECT); }
 	YY_BREAK
 case 168:
 YY_RULE_SETUP
-#line 366 "ldlex.l"
+#line 365 "ldlex.l"
+{ RTOKEN(ABSOLUTE); }
+	YY_BREAK
+case 169:
+YY_RULE_SETUP
+#line 367 "ldlex.l"
 {
 /* Filename without commas, needed to parse mri stuff */
 				 yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 	YY_BREAK
-case 169:
+case 170:
 YY_RULE_SETUP
-#line 373 "ldlex.l"
+#line 374 "ldlex.l"
 {
 				 yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 	YY_BREAK
-case 170:
+case 171:
 YY_RULE_SETUP
-#line 377 "ldlex.l"
+#line 378 "ldlex.l"
 {
 				  yylval.name = xstrdup (yytext + 2);
 				  return LNAME;
 				}
 	YY_BREAK
-case 171:
+case 172:
 YY_RULE_SETUP
-#line 381 "ldlex.l"
+#line 382 "ldlex.l"
 {
 				 yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 	YY_BREAK
-case 172:
+case 173:
 YY_RULE_SETUP
-#line 385 "ldlex.l"
+#line 386 "ldlex.l"
 {
 				  yylval.name = xstrdup (yytext + 2);
 				  return LNAME;
 				}
 	YY_BREAK
-case 173:
+case 174:
 YY_RULE_SETUP
-#line 389 "ldlex.l"
+#line 390 "ldlex.l"
 {
 		/* Annoyingly, this pattern can match comments, and we have
 		   longest match issues to consider.  So if the first two
@@ -2942,10 +2978,10 @@ YY_RULE_SETUP
 		  }
 	}
 	YY_BREAK
-case 174:
-/* rule 174 can match eol */
+case 175:
+/* rule 175 can match eol */
 YY_RULE_SETUP
-#line 406 "ldlex.l"
+#line 407 "ldlex.l"
 {
 					/* No matter the state, quotes
 					   give what's inside */
@@ -2954,94 +2990,94 @@ YY_RULE_SETUP
 					return NAME;
 				}
 	YY_BREAK
-case 175:
-/* rule 175 can match eol */
+case 176:
+/* rule 176 can match eol */
 YY_RULE_SETUP
-#line 413 "ldlex.l"
+#line 414 "ldlex.l"
 { lineno++;}
 	YY_BREAK
-case 176:
+case 177:
 YY_RULE_SETUP
-#line 414 "ldlex.l"
+#line 415 "ldlex.l"
 { }
 	YY_BREAK
-case 177:
+case 178:
 YY_RULE_SETUP
-#line 416 "ldlex.l"
+#line 417 "ldlex.l"
 { return *yytext; }
 	YY_BREAK
-case 178:
+case 179:
 YY_RULE_SETUP
-#line 418 "ldlex.l"
+#line 419 "ldlex.l"
 { RTOKEN(GLOBAL); }
 	YY_BREAK
-case 179:
+case 180:
 YY_RULE_SETUP
-#line 420 "ldlex.l"
+#line 421 "ldlex.l"
 { RTOKEN(LOCAL); }
 	YY_BREAK
-case 180:
+case 181:
 YY_RULE_SETUP
-#line 422 "ldlex.l"
+#line 423 "ldlex.l"
 { RTOKEN(EXTERN); }
 	YY_BREAK
-case 181:
+case 182:
 YY_RULE_SETUP
-#line 424 "ldlex.l"
+#line 425 "ldlex.l"
 { yylval.name = xstrdup (yytext);
 				  return VERS_IDENTIFIER; }
 	YY_BREAK
-case 182:
+case 183:
 YY_RULE_SETUP
-#line 427 "ldlex.l"
+#line 428 "ldlex.l"
 { yylval.name = xstrdup (yytext);
 				  return VERS_TAG; }
 	YY_BREAK
-case 183:
+case 184:
 YY_RULE_SETUP
-#line 430 "ldlex.l"
+#line 431 "ldlex.l"
 { BEGIN(VERS_SCRIPT); return *yytext; }
 	YY_BREAK
-case 184:
+case 185:
 YY_RULE_SETUP
-#line 432 "ldlex.l"
+#line 433 "ldlex.l"
 { BEGIN(VERS_NODE);
 				  vers_node_nesting = 0;
 				  return *yytext;
 				}
 	YY_BREAK
-case 185:
-YY_RULE_SETUP
-#line 436 "ldlex.l"
-{ return *yytext; }
-	YY_BREAK
 case 186:
 YY_RULE_SETUP
 #line 437 "ldlex.l"
-{ vers_node_nesting++; return *yytext; }
+{ return *yytext; }
 	YY_BREAK
 case 187:
 YY_RULE_SETUP
 #line 438 "ldlex.l"
+{ vers_node_nesting++; return *yytext; }
+	YY_BREAK
+case 188:
+YY_RULE_SETUP
+#line 439 "ldlex.l"
 { if (--vers_node_nesting < 0)
 				    BEGIN(VERS_SCRIPT);
 				  return *yytext;
 				}
 	YY_BREAK
-case 188:
-/* rule 188 can match eol */
+case 189:
+/* rule 189 can match eol */
 YY_RULE_SETUP
-#line 443 "ldlex.l"
+#line 444 "ldlex.l"
 { lineno++; }
 	YY_BREAK
-case 189:
+case 190:
 YY_RULE_SETUP
-#line 445 "ldlex.l"
+#line 446 "ldlex.l"
 { /* Eat up comments */ }
 	YY_BREAK
-case 190:
+case 191:
 YY_RULE_SETUP
-#line 447 "ldlex.l"
+#line 448 "ldlex.l"
 { /* Eat up whitespace */ }
 	YY_BREAK
 case YY_STATE_EOF(INITIAL):
@@ -3053,7 +3089,7 @@ case YY_STATE_EOF(MRI):
 case YY_STATE_EOF(VERS_START):
 case YY_STATE_EOF(VERS_SCRIPT):
 case YY_STATE_EOF(VERS_NODE):
-#line 449 "ldlex.l"
+#line 450 "ldlex.l"
 {
   include_stack_ptr--;
 
@@ -3072,22 +3108,22 @@ case YY_STATE_EOF(VERS_NODE):
   return END;
 }
 	YY_BREAK
-case 191:
+case 192:
 YY_RULE_SETUP
-#line 467 "ldlex.l"
+#line 468 "ldlex.l"
 lex_warn_invalid (" in script", yytext);
 	YY_BREAK
-case 192:
+case 193:
 YY_RULE_SETUP
-#line 468 "ldlex.l"
+#line 469 "ldlex.l"
 lex_warn_invalid (" in expression", yytext);
 	YY_BREAK
-case 193:
+case 194:
 YY_RULE_SETUP
-#line 470 "ldlex.l"
+#line 471 "ldlex.l"
 ECHO;
 	YY_BREAK
-#line 3091 "ldlex.c"
+#line 3127 "ldlex.c"
 
 	case YY_END_OF_BUFFER:
 		{
@@ -3271,7 +3307,7 @@ static int yy_get_next_buffer (void)
 
 	else
 		{
-			yy_size_t num_to_read =
+			int num_to_read =
 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
 
 		while ( num_to_read <= 0 )
@@ -3285,7 +3321,7 @@ static int yy_get_next_buffer (void)
 
 			if ( b->yy_is_our_buffer )
 				{
-				yy_size_t new_size = b->yy_buf_size * 2;
+				int new_size = b->yy_buf_size * 2;
 
 				if ( new_size <= 0 )
 					b->yy_buf_size += b->yy_buf_size / 8;
@@ -3316,7 +3352,7 @@ static int yy_get_next_buffer (void)
 
 		/* Read in more data. */
 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
-			(yy_n_chars), num_to_read );
+			(yy_n_chars), (size_t) num_to_read );
 
 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
 		}
@@ -3377,7 +3413,7 @@ static int yy_get_next_buffer (void)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 1682 )
+			if ( yy_current_state >= 1709 )
 				yy_c = yy_meta[(unsigned int) yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
@@ -3405,11 +3441,11 @@ static int yy_get_next_buffer (void)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 1682 )
+		if ( yy_current_state >= 1709 )
 			yy_c = yy_meta[(unsigned int) yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-	yy_is_jam = (yy_current_state == 1681);
+	yy_is_jam = (yy_current_state == 1708);
 
 	return yy_is_jam ? 0 : yy_current_state;
 }
@@ -3438,7 +3474,7 @@ static int yy_get_next_buffer (void)
 
 		else
 			{ /* need more input */
-			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
+			int offset = (yy_c_buf_p) - (yytext_ptr);
 			++(yy_c_buf_p);
 
 			switch ( yy_get_next_buffer(  ) )
@@ -3462,7 +3498,7 @@ static int yy_get_next_buffer (void)
 				case EOB_ACT_END_OF_FILE:
 					{
 					if ( yywrap( ) )
-						return 0;
+						return EOF;
 
 					if ( ! (yy_did_buffer_switch_on_eof) )
 						YY_NEW_FILE;
@@ -3714,7 +3750,7 @@ void yypop_buffer_state (void)
  */
 static void yyensure_buffer_stack (void)
 {
-	yy_size_t num_to_alloc;
+	int num_to_alloc;
     
 	if (!(yy_buffer_stack)) {
 
@@ -3806,16 +3842,17 @@ YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
 
 /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
  * scan from a @e copy of @a bytes.
- * @param bytes the byte buffer to scan
- * @param len the number of bytes in the buffer pointed to by @a bytes.
+ * @param yybytes the byte buffer to scan
+ * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
  * 
  * @return the newly allocated buffer state object.
  */
-YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
+YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
 {
 	YY_BUFFER_STATE b;
 	char *buf;
-	yy_size_t n, i;
+	yy_size_t n;
+	int i;
     
 	/* Get memory for full buffer, including space for trailing EOB's. */
 	n = _yybytes_len + 2;
@@ -3897,7 +3934,7 @@ FILE *yyget_out  (void)
 /** Get the length of the current token.
  * 
  */
-yy_size_t yyget_leng  (void)
+int yyget_leng  (void)
 {
         return yyleng;
 }
@@ -4045,7 +4082,7 @@ void yyfree (void * ptr )
 
 #define YYTABLES_NAME "yytables"
 
-#line 470 "ldlex.l"
+#line 471 "ldlex.l"
 
 
 
@@ -4277,3 +4314,4 @@ lex_warn_invalid (char *where, char *what)
   einfo ("%P:%S: ignoring invalid character `%s'%s\n", what, where);
 }
 
+
diff --git a/ld/ldlex.l b/ld/ldlex.l
index 4e859b0..f14e37e 100644
--- a/ld/ldlex.l
+++ b/ld/ldlex.l
@@ -317,6 +317,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\[\]\-\!\^\\]([*?.$_a-zA-Z0-9\[\]\-\!\^\\]|::)*
 <EXPRESSION,BOTH,SCRIPT>"INCLUDE"	{ RTOKEN(INCLUDE);}
 <BOTH,SCRIPT>"PHDRS"			{ RTOKEN (PHDRS); }
 <EXPRESSION,BOTH,SCRIPT>"AT"		{ RTOKEN(AT);}
+<EXPRESSION,BOTH,SCRIPT>"OVERFLOW_INTO"		{ RTOKEN(OVERFLOW_INTO);}
 <EXPRESSION,BOTH,SCRIPT>"SUBALIGN"	{ RTOKEN(SUBALIGN);}
 <EXPRESSION,BOTH,SCRIPT>"PROVIDE"	{ RTOKEN(PROVIDE); }
 <EXPRESSION,BOTH,SCRIPT>"PROVIDE_HIDDEN" { RTOKEN(PROVIDE_HIDDEN); }
diff --git a/ld/mri.c b/ld/mri.c
index 91b40dc..58cd5f1 100644
--- a/ld/mri.c
+++ b/ld/mri.c
@@ -231,7 +231,7 @@ mri_draw_tree (void)
 		lang_add_wild (NULL, tmp, FALSE);
 	      }
 
-	  lang_leave_output_section_statement (0, "*default*", NULL, NULL);
+	  lang_leave_output_section_statement (0, "*default*", NULL, NULL, NULL);
 
 	  p = p->next;
 	}
-- 
1.7.10.4

