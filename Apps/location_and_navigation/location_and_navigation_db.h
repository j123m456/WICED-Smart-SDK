/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes that can be used to send notifications
 *
 */

// location_and_navigation_db.h

// ***** Primary service 'Generic Access'
#define HDLS_GENERIC_ACCESS                                                  0x0100
#define UUID_SERVICE_GAP                                                     0x1800
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME                                      0x0110
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE                                0x0111
#define UUID_CHARACTERISTIC_DEVICE_NAME                                      0x2A00
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE                                       0x0120
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE                                 0x0121
#define UUID_CHARACTERISTIC_APPEARANCE                                       0x2A01
// ***** Primary service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                                               0x0200
#define UUID_SERVICE_GATT                                                    0x1801
// ***** Primary service 'Location and Navigation'
#define HDLS_LOCATION_AND_NAVIGATION                                         0x0300
#define __UUID_LOCATION_AND_NAVIGATION                                       0x1819
// ----- Characteristic 'LN Feature'
#define HDLC_LOCATION_AND_NAVIGATION_LN_FEATURE                              0x0310
#define HDLC_LOCATION_AND_NAVIGATION_LN_FEATURE_VALUE                        0x0311
#define __UUID_LOCATION_AND_NAVIGATION_LN_FEATURE                            0x2A6A
// ----- Characteristic 'Location and Speed'
#define HDLC_LOCATION_AND_NAVIGATION_LOCATION_AND_SPEED                      0x0320
#define HDLC_LOCATION_AND_NAVIGATION_LOCATION_AND_SPEED_VALUE                0x0321
#define __UUID_LOCATION_AND_NAVIGATION_LOCATION_AND_SPEED                    0x2A67
// Client Configuration
#define HDLD_LOCATION_AND_NAVIGATION_LOCATION_AND_SPEED_CLIENT_CONFIGURATION 0x0330
// ----- Characteristic 'Position Quality'
#define HDLC_LOCATION_AND_NAVIGATION_POSITION_QUALITY                        0x0340
#define HDLC_LOCATION_AND_NAVIGATION_POSITION_QUALITY_VALUE                  0x0341
#define __UUID_LOCATION_AND_NAVIGATION_POSITION_QUALITY                      0x2A69
// ----- Characteristic 'LN Control Point'
#define HDLC_LOCATION_AND_NAVIGATION_LN_CONTROL_POINT                        0x0350
#define HDLC_LOCATION_AND_NAVIGATION_LN_CONTROL_POINT_VALUE                  0x0351
#define __UUID_LOCATION_AND_NAVIGATION_LN_CONTROL_POINT                      0x2A6B
// Client Configuration
#define HDLD_LOCATION_AND_NAVIGATION_LN_CONTROL_POINT_CLIENT_CONFIGURATION   0x0360
// ----- Characteristic 'Navigation'
#define HDLC_LOCATION_AND_NAVIGATION_NAVIGATION                              0x0370
#define HDLC_LOCATION_AND_NAVIGATION_NAVIGATION_VALUE                        0x0371
#define __UUID_LOCATION_AND_NAVIGATION_NAVIGATION                            0x2A68
// Client Configuration
#define HDLD_LOCATION_AND_NAVIGATION_NAVIGATION_CLIENT_CONFIGURATION         0x0380

#pragma pack(1)
// Host information for NVRAM
typedef PACKED struct
{
    // BD address of the bonded host
    BD_ADDR  bdaddr;

    // Current value of the client configuration descriptor for characteristic 'Location and Speed'
    UINT16 location_and_navigation_location_and_speed_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'LN Control Point'
    UINT16 location_and_navigation_ln_control_point_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'Navigation'
    UINT16 location_and_navigation_navigation_client_configuration;
}  __HOSTINFO;
#pragma pack()

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT8        location_and_navigation_indication_sent;           // 1 means waiting for ack
extern UINT16       location_and_navigation_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    location_and_navigation_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      location_and_navigation_remote_addr;               // Address of currently connected client
extern UINT8        location_and_navigation_uuid_main_vsc_service[1];  // main vendor specific service. 1 byte length means no such service
// Pointer to the generated part of hostinfo
extern __HOSTINFO   *p_hostinfo_generated;

// Functions definitions

// Indication confirmation callback
extern void __indication_cfm();
// Will be called on indication conformation
extern void location_and_navigation_indication_cfm();
// Registers timer. Should be called from location_and_navigation_create()
extern void location_and_navigation_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void location_and_navigation_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Set *changed true if any persistent value is changed
extern int __write_handler(UINT16 handle, int len, UINT8 *attrPtr, BOOL *changed);


// ------------------- You have to implement these functions ----------------

// Custom function to be called every fine timer tick
extern void location_and_navigation_timer_fine();

// Custom function to be called every 1 s
extern void location_and_navigation_timer_1s();

// It will be called at the write handler and should set *changed TRUE if any persistent value is changed
extern int on_write_location_and_navigation_ln_control_point(int len, UINT8 *attrPtr, BOOL *changed);


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'LN Feature' is changed
extern BOOL store_in_db_location_and_navigation_ln_feature(UINT8* p_value, UINT8 value_len);

// It should be called when 'Location and Speed' is changed
extern BOOL store_in_db_location_and_navigation_location_and_speed(UINT8* p_value, UINT8 value_len);

// It should be called when 'Position Quality' is changed
extern BOOL store_in_db_location_and_navigation_position_quality(UINT8* p_value, UINT8 value_len);

// It should be called when 'LN Control Point' is changed
extern BOOL store_in_db_location_and_navigation_ln_control_point(UINT8* p_value, UINT8 value_len);

// It should be called when 'Navigation' is changed
extern BOOL store_in_db_location_and_navigation_navigation(UINT8* p_value, UINT8 value_len);
