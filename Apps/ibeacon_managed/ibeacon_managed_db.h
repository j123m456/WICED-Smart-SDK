/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes that can be used to send notifications
 *
 */

// ibeacon_managed_db.h

// ***** Primary service 'Generic Access'
#define HDLS_GENERIC_ACCESS                       0x0100
#define UUID_SERVICE_GAP                          0x1800
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME           0x0110
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE     0x0111
#define UUID_CHARACTERISTIC_DEVICE_NAME           0x2A00
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE            0x0120
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE      0x0121
#define UUID_CHARACTERISTIC_APPEARANCE            0x2A01
// ***** Primary service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                    0x0200
#define UUID_SERVICE_GATT                         0x1801
// ***** Primary service 'ibeacon_managed'
#define HDLS_IBEACON_MANAGED                      0x0300
#define __UUID_IBEACON_MANAGED                    0xb1, 0xa8, 0x2c, 0x30, 0xcf, 0xf8, 0x41, 0x03, 0xab, 0x07, 0x61, 0xc8, 0x7d, 0xd3, 0xf3, 0x72
// ----- Characteristic 'company_uuid'
#define HDLC_IBEACON_MANAGED_COMPANY_UUID         0x0310
#define HDLC_IBEACON_MANAGED_COMPANY_UUID_VALUE   0x0311
#define __UUID_IBEACON_MANAGED_COMPANY_UUID       0xc3, 0x70, 0x01, 0xa8, 0x63, 0x4b, 0x44, 0x7d, 0x8e, 0x6b, 0x0c, 0xa0, 0x38, 0xe1, 0xcb, 0xab
// ----- Characteristic 'major_id'
#define HDLC_IBEACON_MANAGED_MAJOR_ID             0x0320
#define HDLC_IBEACON_MANAGED_MAJOR_ID_VALUE       0x0321
#define __UUID_IBEACON_MANAGED_MAJOR_ID           0x6e, 0x0c, 0x91, 0xac, 0x8f, 0x5d, 0x43, 0xc3, 0x8e, 0x00, 0x4d, 0x54, 0xdc, 0xa2, 0xb8, 0x26
// ----- Characteristic 'minor_id'
#define HDLC_IBEACON_MANAGED_MINOR_ID             0x0330
#define HDLC_IBEACON_MANAGED_MINOR_ID_VALUE       0x0331
#define __UUID_IBEACON_MANAGED_MINOR_ID           0xa8, 0xf6, 0x71, 0xd3, 0x2e, 0x30, 0x49, 0x4e, 0xa7, 0x69, 0x76, 0x2a, 0x72, 0xa1, 0xce, 0x0a
// ----- Characteristic 'measured_power'
#define HDLC_IBEACON_MANAGED_MEASURED_POWER       0x0340
#define HDLC_IBEACON_MANAGED_MEASURED_POWER_VALUE 0x0341
#define __UUID_IBEACON_MANAGED_MEASURED_POWER     0xcd, 0xda, 0x8f, 0x65, 0xf0, 0x62, 0x4b, 0x02, 0xbc, 0xec, 0x16, 0xe0, 0x9f, 0x92, 0x05, 0xe2

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT16       ibeacon_managed_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    ibeacon_managed_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      ibeacon_managed_remote_addr;               // Address of currently connected client
extern UINT8        ibeacon_managed_uuid_main_vsc_service[16]; // Main vendor specific service

// Functions definitions

// Will be called on indication conformation
// Registers timer. Should be called from ibeacon_managed_create()
extern void ibeacon_managed_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void ibeacon_managed_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Returns true if any persistent value is changed
extern BOOL __write_handler(UINT16 handle, int len, UINT8 *attrPtr);


// ------------------- You have to implement these functions ----------------

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_ibeacon_managed_company_uuid(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_ibeacon_managed_major_id(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_ibeacon_managed_minor_id(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_ibeacon_managed_measured_power(int len, UINT8 *attrPtr);


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'company_uuid' is changed
extern BOOL store_in_db_ibeacon_managed_company_uuid(UINT8* p_value, UINT8 value_len);

// It should be called when 'major_id' is changed
extern BOOL store_in_db_ibeacon_managed_major_id(UINT8* p_value, UINT8 value_len);

// It should be called when 'minor_id' is changed
extern BOOL store_in_db_ibeacon_managed_minor_id(UINT8* p_value, UINT8 value_len);

// It should be called when 'measured_power' is changed
extern BOOL store_in_db_ibeacon_managed_measured_power(UINT8* p_value, UINT8 value_len);
